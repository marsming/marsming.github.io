<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Jupyter_notebook</title>
      <link href="/Python/2018/10/26/Jupyter-notebook/"/>
      <url>/Python/2018/10/26/Jupyter-notebook/</url>
      
        <content type="html"><![CDATA[<h1 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h1><ul><li>notebook是Jupyter项目的重要组件之一，它是一个代码、文本（有标记或无标记）、数据可视化或其它输出的交互式文档。Jupyter Notebook需要与内核互动，内核是Jupyter与其它编程语言的交互编程协议。Python的Jupyter内核是使用IPython。要启动Jupyter，在命令行中输入<code>jupyter notebook</code>:</li></ul><h2 id="一、IPython帮助文档"><a href="#一、IPython帮助文档" class="headerlink" title="一、IPython帮助文档"></a>一、IPython帮助文档</h2><h3 id="使用help"><a href="#使用help" class="headerlink" title="使用help()"></a>使用help()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用help()</span></span><br><span class="line"><span class="comment">## 通过以下命令获得帮助文档</span></span><br><span class="line"><span class="comment">#或者输入help（）执行程序再输入要查看的相应方法名</span></span><br><span class="line">In [<span class="number">1</span>]: help(len)</span><br><span class="line">Help on built-<span class="keyword">in</span> function len <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">len(obj, /)</span><br><span class="line">    Return the number of items <span class="keyword">in</span> a container.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: help(type)</span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">type</span> <span class="title">in</span> <span class="title">module</span> <span class="title">builtins</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">type</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">type</span><span class="params">(object_or_name, bases, dict)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">type</span><span class="params">(object)</span> -&gt; the object's type</span></span><br><span class="line"><span class="class"> |  type(name, bases, dict) -&gt; a new type</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  Methods defined here:</span></span><br><span class="line"> |</span><br><span class="line"> |  __call__(self, /, *args, **kwargs)</span><br><span class="line"> |      Call self <span class="keyword">as</span> a function.</span><br><span class="line"> |</span><br><span class="line"> |  __delattr__(self, name, /)</span><br><span class="line"> |      Implement delattr(self, name).</span><br><span class="line"> |</span><br><span class="line"> |  __dir__(...)</span><br><span class="line"> |      __dir__() -&gt; list</span><br><span class="line"> |      specialized __dir__ implementation <span class="keyword">for</span> types</span><br><span class="line"> |</span><br><span class="line"> |  __getattribute__(self, name, /)</span><br><span class="line"> |      Return getattr(self, name).</span><br><span class="line"> |</span><br><span class="line"> |  __init__(self, /, *args, **kwargs)</span><br><span class="line"> |      Initialize self.  See help(type(self)) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |</span><br><span class="line"> |  __instancecheck__(...)</span><br><span class="line"> |      __instancecheck__() -&gt; bool</span><br><span class="line"> |      check <span class="keyword">if</span> an object <span class="keyword">is</span> an instance</span><br><span class="line"> |</span><br><span class="line"> |  __new__(*args, **kwargs)</span><br><span class="line"> |      Create <span class="keyword">and</span> <span class="keyword">return</span> a new object.  See help(type) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |</span><br><span class="line"> |  __prepare__(...)</span><br><span class="line"> |      __prepare__() -&gt; dict</span><br><span class="line"> |      used to create the namespace <span class="keyword">for</span> the <span class="class"><span class="keyword">class</span> <span class="title">statement</span></span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__repr__</span><span class="params">(self, /)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">Return</span> <span class="title">repr</span><span class="params">(self)</span>.</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__setattr__</span><span class="params">(self, name, value, /)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">Implement</span> <span class="title">setattr</span><span class="params">(self, name, value)</span>.</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__sizeof__</span><span class="params">(...)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">__sizeof__</span><span class="params">()</span> -&gt; int</span></span><br><span class="line"><span class="class"> |      return memory consumption of the type object</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  __subclasscheck__(...)</span></span><br><span class="line"><span class="class"> |      __subclasscheck__() -&gt; bool</span></span><br><span class="line"><span class="class"> |      check if a class is a subclass</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  __subclasses__(...)</span></span><br><span class="line"><span class="class"> |      __subclasses__() -&gt; list of immediate subclasses</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  mro(...)</span></span><br><span class="line"><span class="class"> |      mro() -&gt; list</span></span><br><span class="line"><span class="class"> |      return a type's method resolution order</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  ----------------------------------------------------------------------</span></span><br><span class="line"><span class="class"> |  Data descriptors defined here:</span></span><br><span class="line"> |</span><br><span class="line"> |  __abstractmethods__</span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |</span><br><span class="line"> |  __text_signature__</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data <span class="keyword">and</span> other attributes defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __base__ = &lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;</span></span><br><span class="line"><span class="class"> |      <span class="title">The</span> <span class="title">most</span> <span class="title">base</span> <span class="title">type</span></span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"> |  __bases__ = (&lt;class 'object'&gt;,)</span><br><span class="line"> |</span><br><span class="line"> |  __basicsize__ = <span class="number">864</span></span><br><span class="line"> |</span><br><span class="line"> |  __dictoffset__ = <span class="number">264</span></span><br><span class="line"> |</span><br><span class="line"> |  __flags__ = <span class="number">-2146675712</span></span><br><span class="line"> |</span><br><span class="line"> |  __itemsize__ = <span class="number">40</span></span><br><span class="line"> |</span><br><span class="line"> |  __mro__ = (&lt;class 'type'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"> |</span><br><span class="line"> |  __weakrefoffset__ = <span class="number">368</span></span><br></pre></td></tr></table></figure><h3 id="使用？"><a href="#使用？" class="headerlink" title="使用？"></a>使用？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用？</span></span><br><span class="line">In [4]: len?</span><br><span class="line">Signature: len(obj, /)</span><br><span class="line">Docstring: Return the number of items <span class="keyword">in</span> a container.</span><br><span class="line">Type:      builtin_function_or_method</span><br></pre></td></tr></table></figure><h3 id="自省"><a href="#自省" class="headerlink" title="自省??"></a>自省??</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算1到100的数之和</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        sum += i</span><br><span class="line">    print(<span class="string">'sum = %d'</span> % sum)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_number??</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Signature: add_number(n)</span><br><span class="line">Source:   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算1到100的数之和</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        sum += i</span><br><span class="line">    print(<span class="string">'sum = %d'</span> % sum)</span><br><span class="line">File:      d:\myproject\python\jupyter\&lt;ipython-input<span class="number">-20</span>-ad8522950c02&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure><h3 id="tab自动补全"><a href="#tab自动补全" class="headerlink" title="tab自动补全"></a>tab自动补全</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/tab.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sc</span><br></pre></td></tr></table></figure><h2 id="二、IPython魔法指令"><a href="#二、IPython魔法指令" class="headerlink" title="二、IPython魔法指令"></a>二、IPython魔法指令</h2><h3 id="1、运行外部Python文件"><a href="#1、运行外部Python文件" class="headerlink" title="1、运行外部Python文件"></a>1、运行外部Python文件</h3><ul><li>%run *.py运行外部文件（默认是在当前目录）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建一个ipython_test.py文件，内容如下：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x + y) / z</span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">c = <span class="number">7.5</span></span><br><span class="line">result = f(a, b, c)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: %run ipython_test.py</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: result</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">1.4666666666666666</span></span><br><span class="line">In [<span class="number">10</span>]: a</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="2、加载外部python文件"><a href="#2、加载外部python文件" class="headerlink" title="2、加载外部python文件"></a>2、加载外部python文件</h3><ul><li>%load *.py加载外部文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: %load ipython_test.py</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="comment"># %load ipython_test.py</span></span><br><span class="line">    ...: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    ...:     <span class="keyword">return</span> (x + y) / z</span><br><span class="line">    ...: a = <span class="number">5</span></span><br><span class="line">    ...: b = <span class="number">6</span></span><br><span class="line">    ...: c = <span class="number">7.5</span></span><br><span class="line">    ...: result = f(a, b, c)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: result</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1.4666666666666666</span></span><br></pre></td></tr></table></figure><h3 id="3、运行计时"><a href="#3、运行计时" class="headerlink" title="3、运行计时"></a>3、运行计时</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>)]</span><br><span class="line">    ...: b = np.array(a)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算程序运行时间</span></span><br><span class="line">In [<span class="number">16</span>]: %time b * b</span><br><span class="line">Wall time: <span class="number">1</span> ms</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">array([   <span class="number">1</span>,    <span class="number">4</span>,    <span class="number">9</span>,   <span class="number">16</span>,   <span class="number">25</span>,   <span class="number">36</span>,   <span class="number">49</span>,   <span class="number">64</span>,   <span class="number">81</span>,  <span class="number">100</span>,  <span class="number">121</span>,</span><br><span class="line">        <span class="number">144</span>,  <span class="number">169</span>,  <span class="number">196</span>,  <span class="number">225</span>,  <span class="number">256</span>,  <span class="number">289</span>,  <span class="number">324</span>,  <span class="number">361</span>,  <span class="number">400</span>,  <span class="number">441</span>,  <span class="number">484</span>,</span><br><span class="line">        <span class="number">529</span>,  <span class="number">576</span>,  <span class="number">625</span>,  <span class="number">676</span>,  <span class="number">729</span>,  <span class="number">784</span>,  <span class="number">841</span>,  <span class="number">900</span>,  <span class="number">961</span>, <span class="number">1024</span>, <span class="number">1089</span>,</span><br><span class="line">       <span class="number">1156</span>, <span class="number">1225</span>, <span class="number">1296</span>, <span class="number">1369</span>, <span class="number">1444</span>, <span class="number">1521</span>, <span class="number">1600</span>, <span class="number">1681</span>, <span class="number">1764</span>, <span class="number">1849</span>, <span class="number">1936</span>,</span><br><span class="line">       <span class="number">2025</span>, <span class="number">2116</span>, <span class="number">2209</span>, <span class="number">2304</span>, <span class="number">2401</span>, <span class="number">2500</span>, <span class="number">2601</span>, <span class="number">2704</span>, <span class="number">2809</span>, <span class="number">2916</span>, <span class="number">3025</span>,</span><br><span class="line">       <span class="number">3136</span>, <span class="number">3249</span>, <span class="number">3364</span>, <span class="number">3481</span>, <span class="number">3600</span>, <span class="number">3721</span>, <span class="number">3844</span>, <span class="number">3969</span>, <span class="number">4096</span>, <span class="number">4225</span>, <span class="number">4356</span>,</span><br><span class="line">       <span class="number">4489</span>, <span class="number">4624</span>, <span class="number">4761</span>, <span class="number">4900</span>, <span class="number">5041</span>, <span class="number">5184</span>, <span class="number">5329</span>, <span class="number">5476</span>, <span class="number">5625</span>, <span class="number">5776</span>, <span class="number">5929</span>,</span><br><span class="line">       <span class="number">6084</span>, <span class="number">6241</span>, <span class="number">6400</span>, <span class="number">6561</span>, <span class="number">6724</span>, <span class="number">6889</span>, <span class="number">7056</span>, <span class="number">7225</span>, <span class="number">7396</span>, <span class="number">7569</span>, <span class="number">7744</span>,</span><br><span class="line">       <span class="number">7921</span>, <span class="number">8100</span>, <span class="number">8281</span>, <span class="number">8464</span>, <span class="number">8649</span>, <span class="number">8836</span>, <span class="number">9025</span>, <span class="number">9216</span>, <span class="number">9409</span>, <span class="number">9604</span>, <span class="number">9801</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算平均运行时间</span></span><br><span class="line">In [<span class="number">17</span>]: %timeit b * b</span><br><span class="line"><span class="number">678</span> ns ± <span class="number">118</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br></pre></td></tr></table></figure><h3 id="4、查看当前会话中的所有函数与变量"><a href="#4、查看当前会话中的所有函数与变量" class="headerlink" title="4、查看当前会话中的所有函数与变量"></a>4、查看当前会话中的所有函数与变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前会话中的所有变量与函数名称：</span></span><br><span class="line">In [<span class="number">18</span>]: %who</span><br><span class="line">a        add_number      b       c       f       np      result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前会话中的所有变量与函数名称的详细信息：</span></span><br><span class="line">In [<span class="number">19</span>]: %whos</span><br><span class="line">Variable     Type        Data/Info</span><br><span class="line">----------------------------------</span><br><span class="line">a            list        n=<span class="number">99</span></span><br><span class="line">add_number   function    &lt;function add_number at <span class="number">0x000002DBBF818D08</span>&gt;</span><br><span class="line">b            ndarray     <span class="number">99</span>: <span class="number">99</span> elems, type `int32`, <span class="number">396</span> bytes</span><br><span class="line">c            float       <span class="number">7.5</span></span><br><span class="line">f            function    &lt;function f at <span class="number">0x000002DBBF818BF8</span>&gt;</span><br><span class="line">np           module      &lt;module <span class="string">'numpy'</span> <span class="keyword">from</span> <span class="string">'F:\&lt;...&gt;ges\\numpy\\__init__.py'</span>&gt;</span><br><span class="line">result       float       <span class="number">1.4666666666666666</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回一个字符串列表，列表中的元素是当前会话中的所有变量和函数名：</span></span><br><span class="line">In [<span class="number">20</span>]: %who_ls</span><br><span class="line">Out[<span class="number">20</span>]: [<span class="string">'a'</span>, <span class="string">'add_number'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'np'</span>, <span class="string">'result'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: !ls</span><br><span class="line">douban_movie.csv</span><br><span class="line">emp.csv</span><br><span class="line">image</span><br><span class="line">ipython_test.py</span><br><span class="line">Jupyter Notebook.ipynb</span><br><span class="line">Numpy.ipynb</span><br><span class="line">Pandas绗旇��</span><br><span class="line">pydata</span><br><span class="line">Python楂樼骇鐗规��.ipynb</span><br><span class="line">Python鍑芥暟寮忕紪绋�.ipynb</span><br><span class="line">Python鍩虹��.ipynb</span><br><span class="line">Python鍩虹��-鍑芥暟.ipynb</span><br><span class="line">Python鍩虹��闆嗗悎.ipynb</span><br><span class="line">Python鍩虹��鍒楄〃.ipynb</span><br><span class="line">Python鍩虹��鍏冪粍.ipynb</span><br><span class="line">Python鍩虹��瀛楀吀.ipynb</span><br><span class="line">Python缁冧範棰�.ipynb</span><br><span class="line">tram.csv</span><br><span class="line">trans_result.xlsx</span><br><span class="line">Untitled.ipynb</span><br><span class="line">Untitled1.ipynb</span><br></pre></td></tr></table></figure><h3 id="5、列出所有魔法"><a href="#5、列出所有魔法" class="headerlink" title="5、列出所有魔法"></a>5、列出所有魔法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: %lsmagic</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">Available line magics:</span><br><span class="line">%alias  %alias_magic  %autocall  %autoindent  %automagic  %bookmark  %cd  %cls  %colors  %config  %copy  %cpaste  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %notebook  %page  %paste  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode</span><br><span class="line"></span><br><span class="line">Available cell magics:</span><br><span class="line">%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex</span><br><span class="line">%%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile</span><br><span class="line"></span><br><span class="line">Automagic <span class="keyword">is</span> ON, % prefix IS NOT needed <span class="keyword">for</span> line magics.</span><br></pre></td></tr></table></figure><h2 id="三、notebook快捷键"><a href="#三、notebook快捷键" class="headerlink" title="三、notebook快捷键"></a>三、notebook快捷键</h2><h3 id="1、命令模式"><a href="#1、命令模式" class="headerlink" title="1、命令模式"></a>1、命令模式</h3><ul><li>Enter:转入编辑模式</li><li>Shift-Enter:运行本单元，选中下个单元</li><li>Ctrl-Enter:运行本单元，选中下个单元</li><li>Alt-Enter:运行本单元，在下面插入一个单元</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2、Python解释器</title>
      <link href="/Python/2018/10/25/2%E3%80%81Python%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
      <url>/Python/2018/10/25/2%E3%80%81Python%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h1><ul><li>Linux/Unix的系统上，Python解释器通常被安装在/usr/local/bin/python3.x这样的有效路径（目录）里。</li><li>我们可以将路径/usr/local/bin添加到您的Linux/Unix操作系统的环境变量中，这样您就可通过shell 终端输入下面的命令来启动 Python 。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.x</span><br></pre></td></tr></table></figure><ul><li>在Windows系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在C:\Python36下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set path=%path%;C:\python36</span><br></pre></td></tr></table></figure><hr><h2 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h2><ul><li>我们可以在命令提示符中输入“Python”命令来启动Python解释器：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><ul><li>执行以上命令后，出现如下窗口信息：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.3</span> |Anaconda custom (<span class="number">64</span>-bit)| (default, Oct <span class="number">15</span> <span class="number">2017</span>, <span class="number">03</span>:<span class="number">27</span>:<span class="number">45</span>)</span><br><span class="line"><span class="number">1900</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>在python提示符中输入以下语句，然后按回车键查看运行效果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello Python!'</span>)</span><br></pre></td></tr></table></figure><ul><li>以上命令执行结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure><ul><li>当键入一个多行结构时，续行是必须的，我们可以看如下if语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>the_world_is_flat = <span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> the_world_is_flat:</span><br><span class="line"><span class="meta">... </span>   print(<span class="string">'Be careful not to fall off!'</span>)</span><br><span class="line">...</span><br><span class="line">Be careful <span class="keyword">not</span> to fall off!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h2><ul><li>将如下代码拷贝至hello.py文件中：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello Python!'</span>)</span><br></pre></td></tr></table></figure><ul><li>通过以下命令执行该脚本：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><ul><li>输出结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure><ul><li>在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以向SHELL脚本一样可直接执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3.6</span></span><br></pre></td></tr></table></figure><ul><li>然后修改脚本权限，使其有执行权限，命令如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">755</span> hello.py</span><br></pre></td></tr></table></figure><ul><li>执行以下命令：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.py</span><br></pre></td></tr></table></figure><ul><li>输出结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1、基本数据类型</title>
      <link href="/Python/2018/10/24/1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/Python/2018/10/24/1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>python的六个标准内置对象  <ul><li>数字             1234,3.1415,3+4j,Deciaml,Fraction</li><li>字符串           ‘spam’,”guido’s”</li><li>列表              [1,[2,’three’],4]</li><li>元组              (1,’spam’,4,’U’)</li><li>字典              {‘food’:’spam’,’taste’:’yum’}</li><li>集合              set(‘abc’),{‘a’,’b’,’c’}</li></ul></li></ul><h2 id="Numbers（数字）"><a href="#Numbers（数字）" class="headerlink" title="Numbers（数字）"></a>Numbers（数字）</h2><p>Python 3支持int、float、bool、complex（复数）。</p><ul><li>数值类型的赋值和计算都是很直观的，就像大多数语言一样。内置的type()函数可以用来查询变量所指的对象类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d = <span class="number">20</span>,<span class="number">5.5</span>,<span class="keyword">True</span>,<span class="number">3</span>+<span class="number">4j</span></span><br><span class="line">print(type(a),type(b),type(c),type(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt; &lt;<span class="title">class</span> '<span class="title">float</span>'&gt; &lt;<span class="title">class</span> '<span class="title">bool</span>'&gt; &lt;<span class="title">class</span> '<span class="title">complex</span>'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数值运算：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = 4+5     #加法</span><br><span class="line">b = 4.3-2   #减法</span><br><span class="line">c = 3*7     #乘法</span><br><span class="line">d = 2/4     #除法，得到一个浮点数</span><br><span class="line">e = 2//4    #除法，得到一个整数</span><br><span class="line">f = 17%3    #取余</span><br><span class="line">g = 2**5    #乘方</span><br><span class="line">print(a,b,c,d,e,f,g)</span><br><span class="line">9 2.3 21 0.5 0 2 32</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。</li><li>4、在混合计算时，Pyhton会把整型转换成为浮点数。</li></ul><hr><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><ul><li>Python中的字符串str用单引号(‘ ‘)或双引号(“ “)括起来，同时使用反斜杠()转义特殊字符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Yes,he doesn\'t'</span></span><br><span class="line">print(s,type(s),len(s))</span><br><span class="line">Yes,he doesn<span class="string">'t &lt;class '</span>st<span class="string">r'&gt; 14</span></span><br></pre></td></tr></table></figure><ul><li>如果不想让反斜杠发生转义，可以在字符串前面加r,表示原始字符串：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'C:\some\name'</span>)</span><br><span class="line">C:\some</span><br><span class="line">ame</span><br><span class="line">print(<span class="string">r'C:\some\name'</span>)</span><br><span class="line">C:\some\name</span><br></pre></td></tr></table></figure><p>另外，反斜杠可以作为换行符，表示下一行是上一行的延续。还可以使用”””…”””或者’’’…’’’跨越多行。</p><ul><li>字符串可以使用 + 运算符串连接在一起，或者用 * 运算符重复：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'str'</span>+<span class="string">'ing'</span>,<span class="string">'my'</span>*<span class="number">3</span>)</span><br><span class="line">string mymymy</span><br></pre></td></tr></table></figure><p>Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少。</p><ul><li>注意，没有单独的字符类型，一个字符就是长度为1的字符串。 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'Python'</span></span><br><span class="line">print(word[<span class="number">0</span>],word[<span class="number">5</span>])</span><br><span class="line">P n</span><br><span class="line"></span><br><span class="line">print(word[<span class="number">-1</span>],word[<span class="number">-6</span>])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><p>还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量[头下标:尾下标]。</p><ul><li>截取的范围是前闭后开的，并且两个索引都可以省略： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'ilovepython'</span></span><br><span class="line">a = word[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">b = word[:]</span><br><span class="line">c = word[<span class="number">5</span>:]</span><br><span class="line">d = word[<span class="number">-10</span>:<span class="number">-6</span>]</span><br><span class="line">print(a,b,c,d)</span><br><span class="line">love ilovepython python love</span><br></pre></td></tr></table></figure><p>与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。<br> <strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><hr><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><ul><li>列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'him'</span>,<span class="number">25</span>,<span class="number">100</span>,<span class="string">'her'</span>]</span><br><span class="line">print(a)</span><br><span class="line">[<span class="string">'him'</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="string">'her'</span>]</span><br></pre></td></tr></table></figure><p>和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。详细的在这里就不赘述了。</p><ul><li>列表还支持串联操作，使用+操作符： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a + [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure><ul><li>与Python字符串不一样的是，列表中的元素是可以改变的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line">a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>]=[]    <span class="comment">#删除</span></span><br><span class="line">a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>List内置类很多方法，例如append()、pop()等等，在后面会讲到。<br> <strong>注意:</strong></p><ul><li>1、List写在中括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><hr><h2 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple(元组)"></a>Tuple(元组)</h2><p>元组（Tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。</p><ul><li>元组中的元素类型也可以不相同：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1992</span>,<span class="number">2018</span>,<span class="string">'physics'</span>,<span class="string">'math'</span>)</span><br><span class="line">print(a,type(a),len(a))</span><br><span class="line">(<span class="number">1992</span>, <span class="number">2018</span>, <span class="string">'physics'</span>, <span class="string">'math'</span>) &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt; 4</span></span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片。</p><ul><li>其实，可以把字符串看做一种特殊的元组：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(tup[<span class="number">0</span>],tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">tup[<span class="number">0</span>]= <span class="number">11</span>      <span class="comment">#修改元组元素的操作是非法的(不可修改)</span></span><br><span class="line"><span class="number">1</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><ul><li>构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()       <span class="comment">#空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,)    <span class="comment">#一个元组，需要在元素后面添加逗号</span></span><br><span class="line">print(tup1,tup2)</span><br><span class="line">() (<span class="number">20</span>,)</span><br></pre></td></tr></table></figure><ul><li>另外，元组也支持用+操作符：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup1,tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(tup1+tup2)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li>string、list和tuple都属于sequence(序列)。</li></ul><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法和列表一样。</li><li>3、注意构造包含0或1个元素的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><hr><h2 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a>Sets（集合）</h2><ul><li>集合（set）是一个无序不重复元素的集。</li><li><code>基本功能是进行成员关系测试和消除重复元素。</code></li><li>可以使用大括号或者set()函数创建set集合，注意：创建一个空集合必须用set()而不是 { }，因为{ }是用来创建一个空字典。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;<span class="string">'Tom'</span>,<span class="string">'Jim'</span>,<span class="string">'Mary'</span>,<span class="string">'Tom'</span>,<span class="string">'Jack'</span>,<span class="string">'Rose'</span>&#125;</span><br><span class="line">print(student)      <span class="comment">#重复的元素被自动去掉</span></span><br><span class="line">&#123;<span class="string">'Tom'</span>, <span class="string">'Rose'</span>, <span class="string">'Mary'</span>, <span class="string">'Jack'</span>, <span class="string">'Jim'</span>&#125;</span><br><span class="line"><span class="string">'Rose'</span> <span class="keyword">in</span> student   <span class="comment">#membership testing(成员测试)</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">a</span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line"></span><br><span class="line">a - b   <span class="comment">#a和b的差集</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line"></span><br><span class="line">a | b   <span class="comment">#a和b的并集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line"></span><br><span class="line">a &amp; b   <span class="comment">#a和b的交集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line">a ^ b   <span class="comment">#a和b中不同时存在的元素</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Dictionaries（字典）"><a href="#Dictionaries（字典）" class="headerlink" title="Dictionaries（字典）"></a>Dictionaries（字典）</h2><ul><li>字典（dictionaries）是Python中另一个非常有用的内置数据类型。</li><li>字典是一种映射类型（mapping type），它是一个无序的键：值对集合。</li><li>关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。</li><li>在同一个字典中，关键字还必须互不相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&#125;           <span class="comment">#创建空字典</span></span><br><span class="line">tel = &#123;<span class="string">'Jack'</span>:<span class="number">1557</span>,<span class="string">'Tom'</span>:<span class="number">1320</span>,<span class="string">'Rose'</span>:<span class="number">1886</span>&#125;</span><br><span class="line">tel</span><br><span class="line">&#123;<span class="string">'Jack'</span>: <span class="number">1557</span>, <span class="string">'Rose'</span>: <span class="number">1886</span>, <span class="string">'Tom'</span>: <span class="number">1320</span>&#125;</span><br><span class="line"></span><br><span class="line">tel[<span class="string">'Jack'</span>]        <span class="comment">#主要的操作：通过key查询</span></span><br><span class="line"><span class="number">1557</span></span><br><span class="line"><span class="keyword">del</span> tel[<span class="string">'Rose'</span>]     <span class="comment">#删除一个键值对</span></span><br><span class="line">tel[<span class="string">'Mary'</span>] = <span class="number">4127</span>  <span class="comment">#添加一个键值对</span></span><br><span class="line">tel</span><br><span class="line">&#123;<span class="string">'Jack'</span>: <span class="number">1557</span>, <span class="string">'Mary'</span>: <span class="number">4127</span>, <span class="string">'Tom'</span>: <span class="number">1320</span>&#125;</span><br><span class="line"></span><br><span class="line">list(tel.keys())    <span class="comment">#返回所有key组成的list</span></span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Tom'</span>, <span class="string">'Mary'</span>]</span><br><span class="line"></span><br><span class="line">sorted(tel.keys())  <span class="comment">#按key排序</span></span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Mary'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">'Tom'</span> <span class="keyword">in</span> tel        <span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">'Mary'</span> <span class="keyword">not</span> <span class="keyword">in</span> tel   <span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li>构造函数dict()直接从键值对sequence中构建字典，当然也可以进行推到，如下 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict([(<span class="string">'sape'</span>,<span class="number">4139</span>),(<span class="string">'guido'</span>,<span class="number">4127</span>),(<span class="string">'jack'</span>,<span class="number">4098</span>)])</span><br><span class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;x:x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"></span><br><span class="line">dict(sape=<span class="number">4139</span>,guido=<span class="number">4127</span>,jack=<span class="number">4098</span>)</span><br><span class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</li></ul><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用{ }。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
