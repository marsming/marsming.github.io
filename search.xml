<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>2、Python解释器</title>
      <link href="/Python/2018/10/25/2%E3%80%81Python%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
      <url>/Python/2018/10/25/2%E3%80%81Python%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h1><ul><li>Linux/Unix的系统上，Python解释器通常被安装在/usr/local/bin/python3.x这样的有效路径（目录）里。</li><li>我们可以将路径/usr/local/bin添加到您的Linux/Unix操作系统的环境变量中，这样您就可通过shell 终端输入下面的命令来启动 Python 。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.x</span><br></pre></td></tr></table></figure><ul><li>在Windows系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在C:\Python36下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set path=%path%;C:\python36</span><br></pre></td></tr></table></figure><hr><h2 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h2><ul><li>我们可以在命令提示符中输入“Python”命令来启动Python解释器：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><ul><li>执行以上命令后，出现如下窗口信息：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.3</span> |Anaconda custom (<span class="number">64</span>-bit)| (default, Oct <span class="number">15</span> <span class="number">2017</span>, <span class="number">03</span>:<span class="number">27</span>:<span class="number">45</span>)</span><br><span class="line"><span class="number">1900</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>在python提示符中输入以下语句，然后按回车键查看运行效果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello Python!'</span>)</span><br></pre></td></tr></table></figure><ul><li>以上命令执行结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure><ul><li>当键入一个多行结构时，续行是必须的，我们可以看如下if语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>the_world_is_flat = <span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> the_world_is_flat:</span><br><span class="line"><span class="meta">... </span>   print(<span class="string">'Be careful not to fall off!'</span>)</span><br><span class="line">...</span><br><span class="line">Be careful <span class="keyword">not</span> to fall off!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h2><ul><li>将如下代码拷贝至hello.py文件中：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello Python!'</span>)</span><br></pre></td></tr></table></figure><ul><li>通过以下命令执行该脚本：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><ul><li>输出结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure><ul><li>在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以向SHELL脚本一样可直接执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3.6</span></span><br></pre></td></tr></table></figure><ul><li>然后修改脚本权限，使其有执行权限，命令如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">755</span> hello.py</span><br></pre></td></tr></table></figure><ul><li>执行以下命令：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.py</span><br></pre></td></tr></table></figure><ul><li>输出结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1、基本数据类型</title>
      <link href="/Python/2018/10/24/1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/Python/2018/10/24/1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>python的六个标准内置对象  <ul><li>数字             1234,3.1415,3+4j,Deciaml,Fraction</li><li>字符串           ‘spam’,”guido’s”</li><li>列表              [1,[2,’three’],4]</li><li>元组              (1,’spam’,4,’U’)</li><li>字典              {‘food’:’spam’,’taste’:’yum’}</li><li>集合              set(‘abc’),{‘a’,’b’,’c’}</li></ul></li></ul><h2 id="Numbers（数字）"><a href="#Numbers（数字）" class="headerlink" title="Numbers（数字）"></a>Numbers（数字）</h2><p>Python 3支持int、float、bool、complex（复数）。</p><ul><li>数值类型的赋值和计算都是很直观的，就像大多数语言一样。内置的type()函数可以用来查询变量所指的对象类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d = <span class="number">20</span>,<span class="number">5.5</span>,<span class="keyword">True</span>,<span class="number">3</span>+<span class="number">4j</span></span><br><span class="line">print(type(a),type(b),type(c),type(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt; &lt;<span class="title">class</span> '<span class="title">float</span>'&gt; &lt;<span class="title">class</span> '<span class="title">bool</span>'&gt; &lt;<span class="title">class</span> '<span class="title">complex</span>'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数值运算：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = 4+5     #加法</span><br><span class="line">b = 4.3-2   #减法</span><br><span class="line">c = 3*7     #乘法</span><br><span class="line">d = 2/4     #除法，得到一个浮点数</span><br><span class="line">e = 2//4    #除法，得到一个整数</span><br><span class="line">f = 17%3    #取余</span><br><span class="line">g = 2**5    #乘方</span><br><span class="line">print(a,b,c,d,e,f,g)</span><br><span class="line">9 2.3 21 0.5 0 2 32</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。</li><li>4、在混合计算时，Pyhton会把整型转换成为浮点数。</li></ul><hr><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><ul><li>Python中的字符串str用单引号(‘ ‘)或双引号(“ “)括起来，同时使用反斜杠()转义特殊字符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Yes,he doesn\'t'</span></span><br><span class="line">print(s,type(s),len(s))</span><br><span class="line">Yes,he doesn<span class="string">'t &lt;class '</span>st<span class="string">r'&gt; 14</span></span><br></pre></td></tr></table></figure><ul><li>如果不想让反斜杠发生转义，可以在字符串前面加r,表示原始字符串：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'C:\some\name'</span>)</span><br><span class="line">C:\some</span><br><span class="line">ame</span><br><span class="line">print(<span class="string">r'C:\some\name'</span>)</span><br><span class="line">C:\some\name</span><br></pre></td></tr></table></figure><p>另外，反斜杠可以作为换行符，表示下一行是上一行的延续。还可以使用”””…”””或者’’’…’’’跨越多行。</p><ul><li>字符串可以使用 + 运算符串连接在一起，或者用 * 运算符重复：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'str'</span>+<span class="string">'ing'</span>,<span class="string">'my'</span>*<span class="number">3</span>)</span><br><span class="line">string mymymy</span><br></pre></td></tr></table></figure><p>Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少。</p><ul><li>注意，没有单独的字符类型，一个字符就是长度为1的字符串。 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'Python'</span></span><br><span class="line">print(word[<span class="number">0</span>],word[<span class="number">5</span>])</span><br><span class="line">P n</span><br><span class="line"></span><br><span class="line">print(word[<span class="number">-1</span>],word[<span class="number">-6</span>])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><p>还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量[头下标:尾下标]。</p><ul><li>截取的范围是前闭后开的，并且两个索引都可以省略： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'ilovepython'</span></span><br><span class="line">a = word[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">b = word[:]</span><br><span class="line">c = word[<span class="number">5</span>:]</span><br><span class="line">d = word[<span class="number">-10</span>:<span class="number">-6</span>]</span><br><span class="line">print(a,b,c,d)</span><br><span class="line">love ilovepython python love</span><br></pre></td></tr></table></figure><p>与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。<br> <strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><hr><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><ul><li>列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'him'</span>,<span class="number">25</span>,<span class="number">100</span>,<span class="string">'her'</span>]</span><br><span class="line">print(a)</span><br><span class="line">[<span class="string">'him'</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="string">'her'</span>]</span><br></pre></td></tr></table></figure><p>和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。详细的在这里就不赘述了。</p><ul><li>列表还支持串联操作，使用+操作符： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a + [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure><ul><li>与Python字符串不一样的是，列表中的元素是可以改变的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line">a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>]=[]    <span class="comment">#删除</span></span><br><span class="line">a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>List内置类很多方法，例如append()、pop()等等，在后面会讲到。<br> <strong>注意:</strong></p><ul><li>1、List写在中括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><hr><h2 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple(元组)"></a>Tuple(元组)</h2><p>元组（Tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。</p><ul><li>元组中的元素类型也可以不相同：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1992</span>,<span class="number">2018</span>,<span class="string">'physics'</span>,<span class="string">'math'</span>)</span><br><span class="line">print(a,type(a),len(a))</span><br><span class="line">(<span class="number">1992</span>, <span class="number">2018</span>, <span class="string">'physics'</span>, <span class="string">'math'</span>) &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt; 4</span></span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片。</p><ul><li>其实，可以把字符串看做一种特殊的元组：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(tup[<span class="number">0</span>],tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">tup[<span class="number">0</span>]= <span class="number">11</span>      <span class="comment">#修改元组元素的操作是非法的(不可修改)</span></span><br><span class="line"><span class="number">1</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><ul><li>构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()       <span class="comment">#空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,)    <span class="comment">#一个元组，需要在元素后面添加逗号</span></span><br><span class="line">print(tup1,tup2)</span><br><span class="line">() (<span class="number">20</span>,)</span><br></pre></td></tr></table></figure><ul><li>另外，元组也支持用+操作符：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup1,tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(tup1+tup2)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li>string、list和tuple都属于sequence(序列)。</li></ul><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法和列表一样。</li><li>3、注意构造包含0或1个元素的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><hr><h2 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a>Sets（集合）</h2><ul><li>集合（set）是一个无序不重复元素的集。</li><li><code>基本功能是进行成员关系测试和消除重复元素。</code></li><li>可以使用大括号或者set()函数创建set集合，注意：创建一个空集合必须用set()而不是 { }，因为{ }是用来创建一个空字典。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;<span class="string">'Tom'</span>,<span class="string">'Jim'</span>,<span class="string">'Mary'</span>,<span class="string">'Tom'</span>,<span class="string">'Jack'</span>,<span class="string">'Rose'</span>&#125;</span><br><span class="line">print(student)      <span class="comment">#重复的元素被自动去掉</span></span><br><span class="line">&#123;<span class="string">'Tom'</span>, <span class="string">'Rose'</span>, <span class="string">'Mary'</span>, <span class="string">'Jack'</span>, <span class="string">'Jim'</span>&#125;</span><br><span class="line"><span class="string">'Rose'</span> <span class="keyword">in</span> student   <span class="comment">#membership testing(成员测试)</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">a</span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line"></span><br><span class="line">a - b   <span class="comment">#a和b的差集</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line"></span><br><span class="line">a | b   <span class="comment">#a和b的并集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line"></span><br><span class="line">a &amp; b   <span class="comment">#a和b的交集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line">a ^ b   <span class="comment">#a和b中不同时存在的元素</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Dictionaries（字典）"><a href="#Dictionaries（字典）" class="headerlink" title="Dictionaries（字典）"></a>Dictionaries（字典）</h2><ul><li>字典（dictionaries）是Python中另一个非常有用的内置数据类型。</li><li>字典是一种映射类型（mapping type），它是一个无序的键：值对集合。</li><li>关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。</li><li>在同一个字典中，关键字还必须互不相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&#125;           <span class="comment">#创建空字典</span></span><br><span class="line">tel = &#123;<span class="string">'Jack'</span>:<span class="number">1557</span>,<span class="string">'Tom'</span>:<span class="number">1320</span>,<span class="string">'Rose'</span>:<span class="number">1886</span>&#125;</span><br><span class="line">tel</span><br><span class="line">&#123;<span class="string">'Jack'</span>: <span class="number">1557</span>, <span class="string">'Rose'</span>: <span class="number">1886</span>, <span class="string">'Tom'</span>: <span class="number">1320</span>&#125;</span><br><span class="line"></span><br><span class="line">tel[<span class="string">'Jack'</span>]        <span class="comment">#主要的操作：通过key查询</span></span><br><span class="line"><span class="number">1557</span></span><br><span class="line"><span class="keyword">del</span> tel[<span class="string">'Rose'</span>]     <span class="comment">#删除一个键值对</span></span><br><span class="line">tel[<span class="string">'Mary'</span>] = <span class="number">4127</span>  <span class="comment">#添加一个键值对</span></span><br><span class="line">tel</span><br><span class="line">&#123;<span class="string">'Jack'</span>: <span class="number">1557</span>, <span class="string">'Mary'</span>: <span class="number">4127</span>, <span class="string">'Tom'</span>: <span class="number">1320</span>&#125;</span><br><span class="line"></span><br><span class="line">list(tel.keys())    <span class="comment">#返回所有key组成的list</span></span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Tom'</span>, <span class="string">'Mary'</span>]</span><br><span class="line"></span><br><span class="line">sorted(tel.keys())  <span class="comment">#按key排序</span></span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Mary'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">'Tom'</span> <span class="keyword">in</span> tel        <span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">'Mary'</span> <span class="keyword">not</span> <span class="keyword">in</span> tel   <span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li>构造函数dict()直接从键值对sequence中构建字典，当然也可以进行推到，如下 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict([(<span class="string">'sape'</span>,<span class="number">4139</span>),(<span class="string">'guido'</span>,<span class="number">4127</span>),(<span class="string">'jack'</span>,<span class="number">4098</span>)])</span><br><span class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;x:x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"></span><br><span class="line">dict(sape=<span class="number">4139</span>,guido=<span class="number">4127</span>,jack=<span class="number">4098</span>)</span><br><span class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</li></ul><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用{ }。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
