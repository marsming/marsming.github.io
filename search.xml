<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>4.pandas数据合并</title>
      <link href="/Pandas/2018/10/31/4-pandas%E6%95%B0%E6%8D%AE%E5%90%88%E5%B9%B6/"/>
      <url>/Pandas/2018/10/31/4-pandas%E6%95%B0%E6%8D%AE%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="0-回顾numpy的级联"><a href="#0-回顾numpy的级联" class="headerlink" title="0. 回顾numpy的级联"></a>0. 回顾numpy的级联</h1><ul><li>1.生成2各3*3的矩阵，对其分别进行两个维度上的级联</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: nd = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: nd</span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: nd1 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: nd1</span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0是第一维的方向：行</span></span><br><span class="line">In [<span class="number">7</span>]: np.concatenate((nd,nd1),axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: np.concatenate((nd,nd1),axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">8</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><ul><li>定义生成一个DataFrame的函数：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="function"><span class="keyword">def</span> <span class="title">make_df</span><span class="params">(cols,inds)</span>:</span></span><br><span class="line">   ...:     data = &#123;c:[c+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> inds] <span class="keyword">for</span> c <span class="keyword">in</span> cols&#125;</span><br><span class="line">   ...:     print(data)</span><br><span class="line">   ...:     <span class="keyword">return</span> pd.DataFrame(data,index = inds,columns = cols)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: make_df([<span class="string">'A'</span>,<span class="string">'B'</span>],[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A1'</span>, <span class="string">'A2'</span>], <span class="string">'B'</span>: [<span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br></pre></td></tr></table></figure><h1 id="1-使用pd-concat-级联"><a href="#1-使用pd-concat-级联" class="headerlink" title="1. 使用pd.concat()级联"></a>1. 使用pd.concat()级联</h1><ul><li>Pandas使用<code>pd.concat</code>函数，与<code>np.concatenate</code>函数类似，只是多了一些参数：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Signature: pd.concat(objs, axis=<span class="number">0</span>, join=<span class="string">'outer'</span>, join_axes=<span class="keyword">None</span>, ignore_index=<span class="keyword">False</span>, keys=<span class="keyword">None</span>, levels=<span class="keyword">None</span>, names=<span class="keyword">None</span>, verify_integrity=<span class="keyword">False</span>, sort=<span class="keyword">None</span>, copy=<span class="keyword">True</span>)</span><br><span class="line">Docstring:</span><br><span class="line">Concatenate pandas objects along a particular axis <span class="keyword">with</span> optional set logic</span><br></pre></td></tr></table></figure><h2 id="1-1-简单级联"><a href="#1-1-简单级联" class="headerlink" title="1.1 简单级联"></a>1.1 简单级联</h2><ul><li>和np.concatenate一样，优先增加行数(默认axis=0)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: df1 = make_df(list(<span class="string">'AB'</span>),[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>], <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: df2 = make_df(list(<span class="string">'AB'</span>),[<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A2'</span>, <span class="string">'A3'</span>], <span class="string">'B'</span>: [<span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: pd.concat([df1,df2])</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  A0  B0</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">3</span>  A3  B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: pd.concat((df1,df2))</span><br><span class="line">Out[<span class="number">14</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  A0  B0</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">3</span>  A3  B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以通过设置axis来改变级联方向</span></span><br><span class="line">In [<span class="number">15</span>]: pd.concat((df1,df2),axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">     A    B    A    B</span><br><span class="line"><span class="number">0</span>   A0   B0  NaN  NaN</span><br><span class="line"><span class="number">1</span>   A1   B1  NaN  NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN   A2   B2</span><br><span class="line"><span class="number">3</span>  NaN  NaN   A3   B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意，index在级联时是可以重复的</span></span><br><span class="line">In [<span class="number">16</span>]: df3 = make_df(list(<span class="string">'AB'</span>),[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>], <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: df4 = make_df(list(<span class="string">'AB'</span>),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>], <span class="string">'B'</span>: [<span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: df5 = pd.concat((df3,df4))</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: df5</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  A0  B0</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">3</span>  A3  B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: df5.loc[[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以选择忽略ignore_index,重新索引</span></span><br><span class="line">In [<span class="number">21</span>]: pd.concat((df3,df4),ignore_index=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  A0  B0</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">3</span>  A1  B1</span><br><span class="line"><span class="number">4</span>  A2  B2</span><br><span class="line"><span class="number">5</span>  A3  B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#或者使用多层索引keys</span></span><br><span class="line">In [<span class="number">22</span>]: x = make_df(list(<span class="string">'XY'</span>),[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">&#123;<span class="string">'X'</span>: [<span class="string">'Xa'</span>, <span class="string">'Xb'</span>], <span class="string">'Y'</span>: [<span class="string">'Ya'</span>, <span class="string">'Yb'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: y = make_df(list(<span class="string">'XY'</span>),[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">&#123;<span class="string">'X'</span>: [<span class="string">'XA'</span>, <span class="string">'XB'</span>], <span class="string">'Y'</span>: [<span class="string">'YA'</span>, <span class="string">'YB'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: pd.concat((x,y))</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">    X   Y</span><br><span class="line">a  Xa  Ya</span><br><span class="line">b  Xb  Yb</span><br><span class="line">A  XA  YA</span><br><span class="line">B  XB  YB</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#keys可以增加索引，使得合并后的数据更清晰</span></span><br><span class="line">In [<span class="number">25</span>]: pd.concat((x,y),keys=[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">      X   Y</span><br><span class="line">x a  Xa  Ya</span><br><span class="line">  b  Xb  Yb</span><br><span class="line">y A  XA  YA</span><br><span class="line">  B  XB  YB</span><br></pre></td></tr></table></figure><h2 id="1-2-不匹配级联"><a href="#1-2-不匹配级联" class="headerlink" title="1.2 不匹配级联"></a>1.2 不匹配级联</h2><ul><li>不匹配指的是级联的维度的索引不一致。例如纵向级联时列索引不一致，横向级联时航索引不一致</li><li>有3种连接方式：</li><li>外连接：补NaN（默认模式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: df1 = make_df([<span class="string">'A'</span>,<span class="string">'B'</span>],[<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A1'</span>, <span class="string">'A3'</span>], <span class="string">'B'</span>: [<span class="string">'B1'</span>, <span class="string">'B3'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: df2 = make_df([<span class="string">'B'</span>,<span class="string">'C'</span>],[<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">&#123;<span class="string">'B'</span>: [<span class="string">'B2'</span>, <span class="string">'B4'</span>], <span class="string">'C'</span>: [<span class="string">'C2'</span>, <span class="string">'C4'</span>]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: pd.concat((df1,df2),join=<span class="string">'outer'</span>)</span><br><span class="line">F:\soft\Anaconda3\Scripts\ipython:<span class="number">1</span>: FutureWarning: Sorting because non-concatenation axis <span class="keyword">is</span> <span class="keyword">not</span> aligned. A future version</span><br><span class="line">of pandas will change to <span class="keyword">not</span> sort by default.</span><br><span class="line"></span><br><span class="line">To accept the future behavior, <span class="keyword">pass</span> <span class="string">'sort=True'</span>.</span><br><span class="line"></span><br><span class="line">To retain the current behavior <span class="keyword">and</span> silence the warning, <span class="keyword">pass</span> sort=<span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">     A   B    C</span><br><span class="line"><span class="number">1</span>   A1  B1  NaN</span><br><span class="line"><span class="number">3</span>   A3  B3  NaN</span><br><span class="line"><span class="number">2</span>  NaN  B2   C2</span><br><span class="line"><span class="number">4</span>  NaN  B4   C4</span><br></pre></td></tr></table></figure><ul><li>内连接：只连接匹配的项</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: pd.concat((df1,df2),join=<span class="string">'inner'</span>)</span><br><span class="line">Out[<span class="number">29</span>]:</span><br><span class="line">    B</span><br><span class="line"><span class="number">1</span>  B1</span><br><span class="line"><span class="number">3</span>  B3</span><br><span class="line"><span class="number">2</span>  B2</span><br><span class="line"><span class="number">4</span>  B4</span><br></pre></td></tr></table></figure><ul><li>连接指定轴join_axes</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: df3 = make_df(list(<span class="string">'ACD'</span>),[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>], <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>], <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: df4 = make_df(list(<span class="string">'CDF'</span>),[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">&#123;<span class="string">'C'</span>: [<span class="string">'C3'</span>, <span class="string">'C4'</span>, <span class="string">'C5'</span>], <span class="string">'D'</span>: [<span class="string">'D3'</span>, <span class="string">'D4'</span>, <span class="string">'D5'</span>], <span class="string">'F'</span>: [<span class="string">'F3'</span>, <span class="string">'F4'</span>, <span class="string">'F5'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: pd.concat((df3,df4))</span><br><span class="line">F:\soft\Anaconda3\Scripts\ipython:<span class="number">1</span>: FutureWarning: Sorting because non-concatenation axis <span class="keyword">is</span> <span class="keyword">not</span> aligned. A future version</span><br><span class="line">of pandas will change to <span class="keyword">not</span> sort by default.</span><br><span class="line"></span><br><span class="line">To accept the future behavior, <span class="keyword">pass</span> <span class="string">'sort=True'</span>.</span><br><span class="line"></span><br><span class="line">To retain the current behavior <span class="keyword">and</span> silence the warning, <span class="keyword">pass</span> sort=<span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">Out[<span class="number">32</span>]:</span><br><span class="line">     A   C   D    F</span><br><span class="line"><span class="number">0</span>   A0  C0  D0  NaN</span><br><span class="line"><span class="number">1</span>   A1  C1  D1  NaN</span><br><span class="line"><span class="number">2</span>   A2  C2  D2  NaN</span><br><span class="line"><span class="number">3</span>  NaN  C3  D3   F3</span><br><span class="line"><span class="number">4</span>  NaN  C4  D4   F4</span><br><span class="line"><span class="number">5</span>  NaN  C5  D5   F5</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#join_axes 以某一个DataFrame列索引为新的索引值</span></span><br><span class="line">In [<span class="number">33</span>]: pd.concat((df3,df4),join_axes=[df4.columns])</span><br><span class="line">Out[<span class="number">33</span>]:</span><br><span class="line">    C   D    F</span><br><span class="line"><span class="number">0</span>  C0  D0  NaN</span><br><span class="line"><span class="number">1</span>  C1  D1  NaN</span><br><span class="line"><span class="number">2</span>  C2  D2  NaN</span><br><span class="line"><span class="number">3</span>  C3  D3   F3</span><br><span class="line"><span class="number">4</span>  C4  D4   F4</span><br><span class="line"><span class="number">5</span>  C5  D5   F5</span><br></pre></td></tr></table></figure><h2 id="1-3-使用append-函数级联"><a href="#1-3-使用append-函数级联" class="headerlink" title="1.3 使用append()函数级联"></a>1.3 使用append()函数级联</h2><ul><li>由于级联的使用非常普遍，因此有一个函数append专门用于在后面添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df1 = make_df([<span class="string">'大众'</span>,<span class="string">'雷克萨斯'</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">&#123;<span class="string">'大众'</span>: [<span class="string">'大众0'</span>, <span class="string">'大众1'</span>, <span class="string">'大众2'</span>, <span class="string">'大众3'</span>, <span class="string">'大众4'</span>], <span class="string">'雷克萨斯'</span>: [<span class="string">'雷克萨斯0'</span>, <span class="string">'雷克萨斯1'</span>, <span class="string">'雷克萨斯2'</span>, <span class="string">'雷克萨斯3'</span>, <span class="string">'雷克萨斯4'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: df2 = make_df([<span class="string">'大众'</span>,<span class="string">'雷克萨斯'</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">&#123;<span class="string">'大众'</span>: [<span class="string">'大众5'</span>, <span class="string">'大众6'</span>, <span class="string">'大众7'</span>, <span class="string">'大众8'</span>, <span class="string">'大众9'</span>], <span class="string">'雷克萨斯'</span>: [<span class="string">'雷克萨斯5'</span>, <span class="string">'雷克萨斯6'</span>, <span class="string">'雷克萨斯7'</span>, <span class="string">'雷克萨斯8'</span>, <span class="string">'雷克萨斯9'</span>]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: df1.append(df2)</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">    大众   雷克萨斯</span><br><span class="line"><span class="number">0</span>  大众<span class="number">0</span>  雷克萨斯<span class="number">0</span></span><br><span class="line"><span class="number">1</span>  大众<span class="number">1</span>  雷克萨斯<span class="number">1</span></span><br><span class="line"><span class="number">2</span>  大众<span class="number">2</span>  雷克萨斯<span class="number">2</span></span><br><span class="line"><span class="number">3</span>  大众<span class="number">3</span>  雷克萨斯<span class="number">3</span></span><br><span class="line"><span class="number">4</span>  大众<span class="number">4</span>  雷克萨斯<span class="number">4</span></span><br><span class="line"><span class="number">5</span>  大众<span class="number">5</span>  雷克萨斯<span class="number">5</span></span><br><span class="line"><span class="number">6</span>  大众<span class="number">6</span>  雷克萨斯<span class="number">6</span></span><br><span class="line"><span class="number">7</span>  大众<span class="number">7</span>  雷克萨斯<span class="number">7</span></span><br><span class="line"><span class="number">8</span>  大众<span class="number">8</span>  雷克萨斯<span class="number">8</span></span><br><span class="line"><span class="number">9</span>  大众<span class="number">9</span>  雷克萨斯<span class="number">9</span></span><br></pre></td></tr></table></figure><h1 id="2-使用pd-merge-合并"><a href="#2-使用pd-merge-合并" class="headerlink" title="2. 使用pd.merge()合并"></a>2. 使用pd.merge()合并</h1><ul><li>merge与concat的区别在于，merge需要依据某一共同的行或列来进行合并</li><li>使用pd.merge()合并时，除自动根除两者相同columns名称的那一列，作为key来进行合并</li><li>注意每一列元素的吮吸不要求一致</li></ul><h2 id="2-1-一对一合并"><a href="#2-1-一对一合并" class="headerlink" title="2.1 一对一合并"></a>2.1 一对一合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: df1 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Sara'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'sail'</span>,<span class="string">'counting'</span>,<span class="string">'marcketing'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: df2 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Sara'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: display(df1,df2)</span><br><span class="line">  employee       group</span><br><span class="line"><span class="number">0</span>       Po        sail</span><br><span class="line"><span class="number">1</span>     Sara    counting</span><br><span class="line"><span class="number">2</span>    Danis  marcketing</span><br><span class="line"></span><br><span class="line">  employee  work_time</span><br><span class="line"><span class="number">0</span>       Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Sara          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis          <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: pd.merge(df1,df2)</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line">  employee       group  work_time</span><br><span class="line"><span class="number">0</span>       Po        sail          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Sara    counting          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis  marcketing          <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: df3 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Sara'</span>,<span class="string">'Bush'</span>],<span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: pd.merge(df1,df3)</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">  employee     group  work_time</span><br><span class="line"><span class="number">0</span>       Po      sail          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Sara  counting          <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: pd.concat((df1,df2),axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">43</span>]:</span><br><span class="line">  employee       group employee  work_time</span><br><span class="line"><span class="number">0</span>       Po        sail       Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Sara    counting     Sara          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis  marcketing    Danis          <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-2-多对一合并"><a href="#2-2-多对一合并" class="headerlink" title="2.2 多对一合并"></a>2.2 多对一合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: df1 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Sara'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'sail'</span>,<span class="string">'counting'</span>,<span class="string">'marcketing'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: df2 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Po'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: display(df1,df2)</span><br><span class="line">  employee       group</span><br><span class="line"><span class="number">0</span>       Po        sail</span><br><span class="line"><span class="number">1</span>     Sara    counting</span><br><span class="line"><span class="number">2</span>    Danis  marcketing</span><br><span class="line"></span><br><span class="line">  employee  work_time</span><br><span class="line"><span class="number">0</span>       Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       Po          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis          <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">47</span>]: pd.merge(df1,df2)</span><br><span class="line">Out[<span class="number">47</span>]:</span><br><span class="line">  employee       group  work_time</span><br><span class="line"><span class="number">0</span>       Po        sail          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       Po        sail          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis  marcketing          <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-3-多对多合并"><a href="#2-3-多对多合并" class="headerlink" title="2.3 多对多合并"></a>2.3 多对多合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: df1 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Po'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'sail'</span>,<span class="string">'counting'</span>,<span class="string">'marcketing'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: df2 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Po'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: display(df1,df2)</span><br><span class="line">  employee       group</span><br><span class="line"><span class="number">0</span>       Po        sail</span><br><span class="line"><span class="number">1</span>       Po    counting</span><br><span class="line"><span class="number">2</span>    Danis  marcketing</span><br><span class="line"></span><br><span class="line">  employee  work_time</span><br><span class="line"><span class="number">0</span>       Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       Po          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis          <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在进行多对多合并时，每一个数据都没有放过</span></span><br><span class="line">In [<span class="number">51</span>]: pd.merge(df1,df2)</span><br><span class="line">Out[<span class="number">51</span>]:</span><br><span class="line">  employee       group  work_time</span><br><span class="line"><span class="number">0</span>       Po        sail          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       Po        sail          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       Po    counting          <span class="number">2</span></span><br><span class="line"><span class="number">3</span>       Po    counting          <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    Danis  marcketing          <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-4-key的规范化"><a href="#2-4-key的规范化" class="headerlink" title="2.4 key的规范化"></a>2.4 key的规范化</h2><ul><li>使用on=显示指定哪一列位key,当有多个key相同时使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">52</span>]: df3 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Summer'</span>,<span class="string">'Flower'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'sail'</span>,<span class="string">'marketing'</span>,<span class="string">'serch'</span>],</span><br><span class="line">    ...: <span class="string">'salary'</span>:[<span class="number">12000</span>,<span class="number">10000</span>,<span class="number">8000</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: df4 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Winter'</span>,<span class="string">'Flower'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'marketing'</span>,<span class="string">'marketing'</span>,<span class="string">'serch'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: display(df3,df4)</span><br><span class="line">  employee      group  salary</span><br><span class="line"><span class="number">0</span>       Po       sail   <span class="number">12000</span></span><br><span class="line"><span class="number">1</span>   Summer  marketing   <span class="number">10000</span></span><br><span class="line"><span class="number">2</span>   Flower      serch    <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">  employee      group  work_time</span><br><span class="line"><span class="number">0</span>       Po  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Winter  marketing          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   Flower      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">55</span>]: pd.merge(df3,df4)</span><br><span class="line">Out[<span class="number">55</span>]:</span><br><span class="line">  employee  group  salary  work_time</span><br><span class="line"><span class="number">0</span>   Flower  serch    <span class="number">8000</span>          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: pd.merge(df3,df4,on=<span class="string">'employee'</span>)</span><br><span class="line">Out[<span class="number">56</span>]:</span><br><span class="line">  employee group_x  salary    group_y  work_time</span><br><span class="line"><span class="number">0</span>       Po    sail   <span class="number">12000</span>  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Flower   serch    <span class="number">8000</span>      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">57</span>]: pd.merge(df3,df4,on=<span class="string">'group'</span>,suffixes=[<span class="string">'_A'</span>,<span class="string">'_B'</span>])</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line">  employee_A      group  salary employee_B  work_time</span><br><span class="line"><span class="number">0</span>     Summer  marketing   <span class="number">10000</span>         Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Summer  marketing   <span class="number">10000</span>     Winter          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>     Flower      serch    <span class="number">8000</span>     Flower          <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>使用left_on和right_on指定左右两边的列作为key，当左右两个的key都不相等时使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: df5 = pd.DataFrame(&#123;<span class="string">'employer'</span>:[<span class="string">'Po'</span>,<span class="string">'Summer'</span>,<span class="string">'Flower'</span>],</span><br><span class="line">    ...: <span class="string">'Team'</span>:[<span class="string">'sail'</span>,<span class="string">'marketing'</span>,<span class="string">'serch'</span>],</span><br><span class="line">    ...: <span class="string">'salary'</span>:[<span class="number">12000</span>,<span class="number">10000</span>,<span class="number">8000</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: df6 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Winter'</span>,<span class="string">'Flower'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'marketing'</span>,<span class="string">'marketing'</span>,<span class="string">'serch'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: display(df5,df6)</span><br><span class="line">  employer       Team  salary</span><br><span class="line"><span class="number">0</span>       Po       sail   <span class="number">12000</span></span><br><span class="line"><span class="number">1</span>   Summer  marketing   <span class="number">10000</span></span><br><span class="line"><span class="number">2</span>   Flower      serch    <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">  employee      group  work_time</span><br><span class="line"><span class="number">0</span>       Po  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Winter  marketing          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   Flower      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">61</span>]: pd.merge(df5,df6,left_on=<span class="string">'employer'</span>,right_on=<span class="string">'employee'</span>)</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">  employer   Team  salary employee      group  work_time</span><br><span class="line"><span class="number">0</span>       Po   sail   <span class="number">12000</span>       Po  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Flower  serch    <span class="number">8000</span>   Flower      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">62</span>]: pd.merge(df5,df6,left_on=<span class="string">'Team'</span>,right_on=<span class="string">'group'</span>)</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">  employer       Team  salary employee      group  work_time</span><br><span class="line"><span class="number">0</span>   Summer  marketing   <span class="number">10000</span>       Po  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Summer  marketing   <span class="number">10000</span>   Winter  marketing          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   Flower      serch    <span class="number">8000</span>   Flower      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="2-5-内合并与外合并"><a href="#2-5-内合并与外合并" class="headerlink" title="2.5 内合并与外合并"></a>2.5 内合并与外合并</h2><ul><li>内合并：只保留两者都有的key（默认模式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: df1 = pd.DataFrame(&#123;<span class="string">'age'</span>:[<span class="number">18</span>,<span class="number">19</span>,<span class="number">22</span>,<span class="number">25</span>],<span class="string">'height'</span>:[<span class="number">170</span>,<span class="number">165</span>,<span class="number">180</span>,<span class="number">170</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: df2 = pd.DataFrame(&#123;<span class="string">'age'</span>:[<span class="number">18</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">30</span>],<span class="string">'weight'</span>:[<span class="number">55</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">65</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: display(df1,df2)</span><br><span class="line">   age  height</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>     <span class="number">170</span></span><br><span class="line"><span class="number">1</span>   <span class="number">19</span>     <span class="number">165</span></span><br><span class="line"><span class="number">2</span>   <span class="number">22</span>     <span class="number">180</span></span><br><span class="line"><span class="number">3</span>   <span class="number">25</span>     <span class="number">170</span></span><br><span class="line"></span><br><span class="line">   age  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>      <span class="number">55</span></span><br><span class="line"><span class="number">1</span>   <span class="number">20</span>      <span class="number">50</span></span><br><span class="line"><span class="number">2</span>   <span class="number">22</span>      <span class="number">60</span></span><br><span class="line"><span class="number">3</span>   <span class="number">30</span>      <span class="number">65</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">66</span>]: pd.merge(df1,df2)</span><br><span class="line">Out[<span class="number">66</span>]:</span><br><span class="line">   age  height  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>     <span class="number">170</span>      <span class="number">55</span></span><br><span class="line"><span class="number">1</span>   <span class="number">22</span>     <span class="number">180</span>      <span class="number">60</span></span><br></pre></td></tr></table></figure><ul><li>外合并how=’outer’：补NaN</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: pd.merge(df1,df2,how=<span class="string">'outer'</span>)</span><br><span class="line">Out[<span class="number">67</span>]:</span><br><span class="line">   age  height  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>   <span class="number">170.0</span>    <span class="number">55.0</span></span><br><span class="line"><span class="number">1</span>   <span class="number">19</span>   <span class="number">165.0</span>     NaN</span><br><span class="line"><span class="number">2</span>   <span class="number">22</span>   <span class="number">180.0</span>    <span class="number">60.0</span></span><br><span class="line"><span class="number">3</span>   <span class="number">25</span>   <span class="number">170.0</span>     NaN</span><br><span class="line"><span class="number">4</span>   <span class="number">20</span>     NaN    <span class="number">50.0</span></span><br><span class="line"><span class="number">5</span>   <span class="number">30</span>     NaN    <span class="number">65.0</span></span><br></pre></td></tr></table></figure><ul><li>左合并、右合并：how=’left’,how=’right’</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">68</span>]: pd.merge(df1,df2,how=<span class="string">'left'</span>)</span><br><span class="line">Out[<span class="number">68</span>]:</span><br><span class="line">   age  height  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>     <span class="number">170</span>    <span class="number">55.0</span></span><br><span class="line"><span class="number">1</span>   <span class="number">19</span>     <span class="number">165</span>     NaN</span><br><span class="line"><span class="number">2</span>   <span class="number">22</span>     <span class="number">180</span>    <span class="number">60.0</span></span><br><span class="line"><span class="number">3</span>   <span class="number">25</span>     <span class="number">170</span>     NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">69</span>]: pd.merge(df1,df2,how=<span class="string">'right'</span>)</span><br><span class="line">Out[<span class="number">69</span>]:</span><br><span class="line">   age  height  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>   <span class="number">170.0</span>      <span class="number">55</span></span><br><span class="line"><span class="number">1</span>   <span class="number">22</span>   <span class="number">180.0</span>      <span class="number">60</span></span><br><span class="line"><span class="number">2</span>   <span class="number">20</span>     NaN      <span class="number">50</span></span><br><span class="line"><span class="number">3</span>   <span class="number">30</span>     NaN      <span class="number">65</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.pandas数据丢失</title>
      <link href="/Pandas/2018/10/31/2-pandas%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/"/>
      <url>/Pandas/2018/10/31/2-pandas%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Pandas处理丢失数据"><a href="#Pandas处理丢失数据" class="headerlink" title="Pandas处理丢失数据"></a>Pandas处理丢失数据</h1><ul><li>两种丢失数据：<ul><li>None</li><li>np.nan(NaN)</li></ul></li></ul><h2 id="1-None"><a href="#1-None" class="headerlink" title="1. None"></a>1. None</h2><ul><li>None是Python自带的，其类型是python object。因此，None不能参与到任何计算中。</li><li>object类型的运算要比int类型的运算慢很多</li><li>计算不同数据类型求和时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: %timeit np.arange(<span class="number">0</span>,<span class="number">10000</span>,dtype=int).sum()</span><br><span class="line"><span class="number">20</span> µs ± <span class="number">2.34</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: %timeit np.arange(<span class="number">0</span>,<span class="number">10000</span>,dtype=float).sum()</span><br><span class="line"><span class="number">21.3</span> µs ± <span class="number">1.93</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: %timeit np.arange(<span class="number">0</span>,<span class="number">10000</span>,dtype=object).sum()</span><br><span class="line"><span class="number">835</span> µs ± <span class="number">158</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000</span> loops each)</span><br></pre></td></tr></table></figure><h2 id="2-np-nan-NaN"><a href="#2-np-nan-NaN" class="headerlink" title="2. np.nan(NaN)"></a>2. np.nan(NaN)</h2><ul><li>np.nan是浮点类型，能参与到计算中。但计算的结果总是NaN。</li><li>但可以使用np.nan*()函数来计算nan,此时视nan为0.</li></ul><h2 id="3-pandas中的None与NaN"><a href="#3-pandas中的None与NaN" class="headerlink" title="3. pandas中的None与NaN"></a>3. pandas中的None与NaN</h2><h3 id="3-1-pandas中None与np-nan都视作np-nan"><a href="#3-1-pandas中None与np-nan都视作np-nan" class="headerlink" title="3.1 pandas中None与np.nan都视作np.nan"></a>3.1 pandas中None与np.nan都视作np.nan</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建DataFrame</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: df = pd.DataFrame(&#123;<span class="string">'age'</span>:np.random.randint(<span class="number">20</span>,<span class="number">25</span>,size=<span class="number">5</span>),</span><br><span class="line">   ...: <span class="string">'salary'</span>:[<span class="number">10000</span>,<span class="number">12000</span>,<span class="number">15000</span>,<span class="number">9000</span>,<span class="number">20000</span>]&#125;,</span><br><span class="line">   ...: index=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'小赵'</span>,<span class="string">'小王'</span>,<span class="string">'小刘'</span>],</span><br><span class="line">   ...: columns=[<span class="string">'age'</span>,<span class="string">'salary'</span>,<span class="string">'work'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: df</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">    age  salary work</span><br><span class="line">张三   <span class="number">21</span>   <span class="number">10000</span>  NaN</span><br><span class="line">李四   <span class="number">23</span>   <span class="number">12000</span>  NaN</span><br><span class="line">小赵   <span class="number">22</span>   <span class="number">15000</span>  NaN</span><br><span class="line">小王   <span class="number">20</span>    <span class="number">9000</span>  NaN</span><br><span class="line">小刘   <span class="number">20</span>   <span class="number">20000</span>  NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在jupyter notebook中有以下警告但可以显示</span></span><br><span class="line">In [<span class="number">8</span>]: df.work[<span class="string">'李四'</span>:<span class="string">'小王'</span>] = <span class="string">'Python'</span></span><br><span class="line">F:\soft\Anaconda3\Scripts\ipython:<span class="number">1</span>: SettingWithCopyWarning:</span><br><span class="line">A value <span class="keyword">is</span> trying to be set on a copy of a slice <span class="keyword">from</span> a DataFrame</span><br><span class="line"></span><br><span class="line">See the caveats <span class="keyword">in</span> the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html<span class="comment">#indexing-view-versus-copy</span></span><br></pre></td></tr></table></figure><h3 id="3-2-pandas中None与np-nan的操作"><a href="#3-2-pandas中None与np-nan的操作" class="headerlink" title="3.2 pandas中None与np.nan的操作"></a>3.2 pandas中None与np.nan的操作</h3><ul><li><code>isnull()</code></li><li><code>notnull()</code></li><li><code>dropna()</code>:过滤丢失数据</li><li><code>fillna()</code>:填充丢失数据</li><li>（1）判断函数<ul><li><code>isnull()</code></li><li><code>notnull()</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: df.isnull()</span><br><span class="line">Out[<span class="number">9</span>]:</span><br><span class="line">      age  salary   work</span><br><span class="line">张三  <span class="keyword">False</span>   <span class="keyword">False</span>   <span class="keyword">True</span></span><br><span class="line">李四  <span class="keyword">False</span>   <span class="keyword">False</span>  <span class="keyword">False</span></span><br><span class="line">小赵  <span class="keyword">False</span>   <span class="keyword">False</span>  <span class="keyword">False</span></span><br><span class="line">小王  <span class="keyword">False</span>   <span class="keyword">False</span>  <span class="keyword">False</span></span><br><span class="line">小刘  <span class="keyword">False</span>   <span class="keyword">False</span>   <span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据获取的数据取出原来数据的空数据</span></span><br><span class="line">In [<span class="number">10</span>]: s1 = df.isnull().any(axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: df[s1]</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">    age  salary work</span><br><span class="line">张三   <span class="number">21</span>   <span class="number">10000</span>  NaN</span><br><span class="line">小刘   <span class="number">20</span>   <span class="number">20000</span>  NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: df.notnull()</span><br><span class="line">Out[<span class="number">12</span>]:</span><br><span class="line">     age  salary   work</span><br><span class="line">张三  <span class="keyword">True</span>    <span class="keyword">True</span>  <span class="keyword">False</span></span><br><span class="line">李四  <span class="keyword">True</span>    <span class="keyword">True</span>   <span class="keyword">True</span></span><br><span class="line">小赵  <span class="keyword">True</span>    <span class="keyword">True</span>   <span class="keyword">True</span></span><br><span class="line">小王  <span class="keyword">True</span>    <span class="keyword">True</span>   <span class="keyword">True</span></span><br><span class="line">小刘  <span class="keyword">True</span>    <span class="keyword">True</span>  <span class="keyword">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取原来数据中非空的数据</span></span><br><span class="line">In [<span class="number">13</span>]: df.notnull().any(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">张三    <span class="keyword">True</span></span><br><span class="line">李四    <span class="keyword">True</span></span><br><span class="line">小赵    <span class="keyword">True</span></span><br><span class="line">小王    <span class="keyword">True</span></span><br><span class="line">小刘    <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># all限定所有数据都不为空</span></span><br><span class="line">In [<span class="number">14</span>]: df.notnull().all(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">14</span>]:</span><br><span class="line">张三    <span class="keyword">False</span></span><br><span class="line">李四     <span class="keyword">True</span></span><br><span class="line">小赵     <span class="keyword">True</span></span><br><span class="line">小王     <span class="keyword">True</span></span><br><span class="line">小刘    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: df[s2]</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">    age  salary    work</span><br><span class="line">李四   <span class="number">23</span>   <span class="number">12000</span>  Python</span><br><span class="line">小赵   <span class="number">22</span>   <span class="number">15000</span>  Python</span><br><span class="line">小王   <span class="number">20</span>    <span class="number">9000</span>  Python</span><br></pre></td></tr></table></figure><ul><li>(2)过滤函数<ul><li><code>dropna()</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选择过滤的是行还是列）（默认是行）</span></span><br><span class="line">In [<span class="number">17</span>]: df.dropna(axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">    age  salary    work</span><br><span class="line">李四   <span class="number">23</span>   <span class="number">12000</span>  Python</span><br><span class="line">小赵   <span class="number">22</span>   <span class="number">15000</span>  Python</span><br><span class="line">小王   <span class="number">20</span>    <span class="number">9000</span>  Python</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#还可以选择过滤方式how='all'</span></span><br><span class="line">In [<span class="number">18</span>]: df.dropna(how=<span class="string">'all'</span>)</span><br><span class="line">Out[<span class="number">18</span>]:</span><br><span class="line">    age  salary    work</span><br><span class="line">张三   <span class="number">21</span>   <span class="number">10000</span>     NaN</span><br><span class="line">李四   <span class="number">23</span>   <span class="number">12000</span>  Python</span><br><span class="line">小赵   <span class="number">22</span>   <span class="number">15000</span>  Python</span><br><span class="line">小王   <span class="number">20</span>    <span class="number">9000</span>  Python</span><br><span class="line">小刘   <span class="number">20</span>   <span class="number">20000</span>     NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: df.loc[<span class="string">'张三'</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: df</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">     age   salary    work</span><br><span class="line">张三   NaN      NaN     NaN</span><br><span class="line">李四  <span class="number">23.0</span>  <span class="number">12000.0</span>  Python</span><br><span class="line">小赵  <span class="number">22.0</span>  <span class="number">15000.0</span>  Python</span><br><span class="line">小王  <span class="number">20.0</span>   <span class="number">9000.0</span>  Python</span><br><span class="line">小刘  <span class="number">20.0</span>  <span class="number">20000.0</span>     NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: df.dropna(how=<span class="string">'all'</span>)</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">     age   salary    work</span><br><span class="line">李四  <span class="number">23.0</span>  <span class="number">12000.0</span>  Python</span><br><span class="line">小赵  <span class="number">22.0</span>  <span class="number">15000.0</span>  Python</span><br><span class="line">小王  <span class="number">20.0</span>   <span class="number">9000.0</span>  Python</span><br><span class="line">小刘  <span class="number">20.0</span>  <span class="number">20000.0</span>     NaN</span><br></pre></td></tr></table></figure><ul><li>(3)填充函数Series/DataFrame<ul><li><code>fillna()</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fillna()对所有的空数据进行替换</span></span><br><span class="line">In [<span class="number">22</span>]: display(df)</span><br><span class="line">     age   salary    work</span><br><span class="line">张三   NaN      NaN     NaN</span><br><span class="line">李四  <span class="number">23.0</span>  <span class="number">12000.0</span>  Python</span><br><span class="line">小赵  <span class="number">22.0</span>  <span class="number">15000.0</span>  Python</span><br><span class="line">小王  <span class="number">20.0</span>   <span class="number">9000.0</span>  Python</span><br><span class="line">小刘  <span class="number">20.0</span>  <span class="number">20000.0</span>     NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: df.fillna(value=<span class="string">'Java'</span>)</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">     age salary    work</span><br><span class="line">张三  Java   Java    Java</span><br><span class="line">李四    <span class="number">23</span>  <span class="number">12000</span>  Python</span><br><span class="line">小赵    <span class="number">22</span>  <span class="number">15000</span>  Python</span><br><span class="line">小王    <span class="number">20</span>   <span class="number">9000</span>  Python</span><br><span class="line">小刘    <span class="number">20</span>  <span class="number">20000</span>    Java</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选择向前填充还是向后填充(inplace对原来的数据进行变更)</span></span><br><span class="line">In [<span class="number">24</span>]: df.fillna(method=<span class="string">'bfill'</span>)</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">     age   salary    work</span><br><span class="line">张三  <span class="number">23.0</span>  <span class="number">12000.0</span>  Python</span><br><span class="line">李四  <span class="number">23.0</span>  <span class="number">12000.0</span>  Python</span><br><span class="line">小赵  <span class="number">22.0</span>  <span class="number">15000.0</span>  Python</span><br><span class="line">小王  <span class="number">20.0</span>   <span class="number">9000.0</span>  Python</span><br><span class="line">小刘  <span class="number">20.0</span>  <span class="number">20000.0</span>     NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">25</span>]: df.fillna(method=<span class="string">'ffill'</span>)</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">     age   salary    work</span><br><span class="line">张三   NaN      NaN     NaN</span><br><span class="line">李四  <span class="number">23.0</span>  <span class="number">12000.0</span>  Python</span><br><span class="line">小赵  <span class="number">22.0</span>  <span class="number">15000.0</span>  Python</span><br><span class="line">小王  <span class="number">20.0</span>   <span class="number">9000.0</span>  Python</span><br><span class="line">小刘  <span class="number">20.0</span>  <span class="number">20000.0</span>  Python</span><br></pre></td></tr></table></figure><ul><li>对于DataFrame来说，还要选择填充的轴axis。记住，对于DataFrame来说：<ul><li>axis=0：index/行</li><li>axis=1：columns/列</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pandas多层索引</title>
      <link href="/Pandas/2018/10/31/3-pandas%E5%A4%9A%E5%B1%82%E7%B4%A2%E5%BC%95/"/>
      <url>/Pandas/2018/10/31/3-pandas%E5%A4%9A%E5%B1%82%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建多层行索引"><a href="#1-创建多层行索引" class="headerlink" title="1. 创建多层行索引"></a>1. 创建多层行索引</h1><h2 id="1-1-隐式构造"><a href="#1-1-隐式构造" class="headerlink" title="1.1 隐式构造"></a>1.1 隐式构造</h2><ul><li>最常见的方法是给DataFrame构造函数的index参数传递两个或更多的数组<ul><li>Series也可以创建多层索引</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s</span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line">a  <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">   <span class="number">0</span>    <span class="number">2</span></span><br><span class="line">b  <span class="number">1</span>    <span class="number">3</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: df = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">6</span>,<span class="number">3</span>)),</span><br><span class="line">   ...: columns=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'Python'</span>],</span><br><span class="line">   ...: index=[[<span class="string">'Michael'</span>,<span class="string">'Michael'</span>,<span class="string">'Lisa'</span>,<span class="string">'Lisa'</span>,<span class="string">'Po'</span>,<span class="string">'Po'</span>],</span><br><span class="line">   ...: [<span class="string">'Mid'</span>,<span class="string">'End'</span>,<span class="string">'Mid'</span>,<span class="string">'End'</span>,<span class="string">'Mid'</span>,<span class="string">'End'</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: df</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">              语文   数学  Python</span><br><span class="line">Michael Mid  <span class="number">117</span>   <span class="number">50</span>     <span class="number">144</span></span><br><span class="line">        End   <span class="number">39</span>   <span class="number">56</span>      <span class="number">56</span></span><br><span class="line">Lisa    Mid  <span class="number">110</span>  <span class="number">103</span>     <span class="number">148</span></span><br><span class="line">        End  <span class="number">119</span>   <span class="number">91</span>     <span class="number">116</span></span><br><span class="line">Po      Mid   <span class="number">69</span>   <span class="number">67</span>      <span class="number">13</span></span><br><span class="line">        End  <span class="number">120</span>  <span class="number">127</span>     <span class="number">105</span></span><br></pre></td></tr></table></figure><h2 id="1-2-显示构造pd-MultiIndex"><a href="#1-2-显示构造pd-MultiIndex" class="headerlink" title="1.2 显示构造pd.MultiIndex"></a>1.2 显示构造pd.MultiIndex</h2><ul><li>使用数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: df1 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">6</span>,<span class="number">3</span>)),</span><br><span class="line">   ...: columns=[<span class="string">'Java'</span>,<span class="string">'Python'</span>,<span class="string">'Scala'</span>],</span><br><span class="line">   ...: index=pd.MultiIndex.from_arrays([[<span class="string">'张三'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'王五'</span>],</span><br><span class="line">   ...: [<span class="string">'期中'</span>,<span class="string">'期末'</span>,<span class="string">'期中'</span>,<span class="string">'期末'</span>,<span class="string">'期中'</span>,<span class="string">'期末'</span>]]))</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: df1</span><br><span class="line">Out[<span class="number">9</span>]:</span><br><span class="line">           Java   Python   Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>      <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>       <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>       <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>      <span class="number">92</span></span><br><span class="line">王五 期中    <span class="number">64</span>     <span class="number">17</span>       <span class="number">98</span></span><br><span class="line">    期末    <span class="number">40</span>     <span class="number">60</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><ul><li>使用tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: df2 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">6</span>,<span class="number">3</span>)),</span><br><span class="line">    ...: columns=[<span class="string">'Java'</span>,<span class="string">'Python'</span>,<span class="string">'Scala'</span>],</span><br><span class="line">    ...: index=pd.MultiIndex.from_tuples([(<span class="string">'张三'</span>,<span class="string">'期中'</span>),(<span class="string">'张三'</span>,<span class="string">'期末'</span>),(<span class="string">'李四'</span>,<span class="string">'期中'</span>),(<span class="string">'李四'</span>,<span class="string">'</span></span><br><span class="line"><span class="string">    ...: 期末'</span>),(<span class="string">'王五'</span>,<span class="string">'期中'</span>),(<span class="string">'王五'</span>,<span class="string">'期末'</span>)]))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: df2</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">       Java   Python  Scala</span><br><span class="line">张三 期中    <span class="number">80</span>     <span class="number">108</span>     <span class="number">108</span></span><br><span class="line">    期末    <span class="number">146</span>    <span class="number">84</span>       <span class="number">85</span></span><br><span class="line">李四 期中    <span class="number">139</span>    <span class="number">136</span>     <span class="number">66</span></span><br><span class="line">    期末    <span class="number">149</span>    <span class="number">92</span>      <span class="number">94</span></span><br><span class="line">王五 期中    <span class="number">27</span>     <span class="number">83</span>      <span class="number">143</span></span><br><span class="line">    期末    <span class="number">109</span>    <span class="number">4</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><ul><li>使用product 【最简单，推荐使用】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: df3 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">6</span>,<span class="number">3</span>)),</span><br><span class="line">    ...: columns=[<span class="string">'Java'</span>,<span class="string">'Python'</span>,<span class="string">'Scala'</span>],</span><br><span class="line">    ...: index=pd.MultiIndex.from_product([[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>],[<span class="string">'期中'</span>,<span class="string">'期末'</span>]]))</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: df3</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三  期中    <span class="number">48</span>     <span class="number">131</span>     <span class="number">73</span></span><br><span class="line">     期末    <span class="number">69</span>     <span class="number">60</span>      <span class="number">67</span></span><br><span class="line">李四  期中    <span class="number">17</span>     <span class="number">50</span>      <span class="number">106</span></span><br><span class="line">     期末    <span class="number">140</span>    <span class="number">32</span>      <span class="number">10</span></span><br><span class="line">王五  期中    <span class="number">40</span>     <span class="number">113</span>     <span class="number">73</span></span><br><span class="line">     期末    <span class="number">37</span>     <span class="number">105</span>     <span class="number">103</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对于DataFrame列同样可以设置多层索引</span></span><br><span class="line">In [<span class="number">14</span>]: df4 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">3</span>,<span class="number">6</span>)),</span><br><span class="line">    ...: columns=pd.MultiIndex.from_product([[<span class="string">'Java'</span>,<span class="string">'Python'</span>,<span class="string">'Scala'</span>],[<span class="string">'期中'</span>,<span class="string">'期末'</span>]]),</span><br><span class="line">    ...: index=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: df4</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">     Java           Python      Scala</span><br><span class="line">     期中   期末     期中  期末    期中   期末</span><br><span class="line">张三   <span class="number">81</span>   <span class="number">17</span>      <span class="number">49</span>    <span class="number">83</span>     <span class="number">104</span>   <span class="number">123</span></span><br><span class="line">李四   <span class="number">30</span>   <span class="number">119</span>     <span class="number">23</span>    <span class="number">65</span>     <span class="number">11</span>    <span class="number">138</span></span><br><span class="line">王五   <span class="number">65</span>   <span class="number">147</span>     <span class="number">17</span>    <span class="number">25</span>     <span class="number">148</span>   <span class="number">149</span></span><br></pre></td></tr></table></figure><h1 id="2-多层索引对象的索引与切片操作"><a href="#2-多层索引对象的索引与切片操作" class="headerlink" title="2. 多层索引对象的索引与切片操作"></a>2. 多层索引对象的索引与切片操作</h1><h2 id="2-1-Series的操作"><a href="#2-1-Series的操作" class="headerlink" title="2.1 Series的操作"></a>2.1 Series的操作</h2><ul><li>【重要】对于Series来说，直接中括号<code>[]</code>与使用<code>.loc()</code>完全一样，推荐使用中括号索引和切片</li><li>（1）索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: s = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">4</span>),index=[[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>],[<span class="string">'期中'</span>,<span class="string">'期末'</span>,<span class="string">'期</span></span><br><span class="line"><span class="string">    ...: 中'</span>,<span class="string">'期末'</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: s</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">a  期中     <span class="number">19</span></span><br><span class="line">   期末     <span class="number">16</span></span><br><span class="line">b  期中      <span class="number">2</span></span><br><span class="line">   期末    <span class="number">126</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: s[<span class="string">'a'</span>,<span class="string">'期末'</span>]</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">16</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: s[[<span class="string">'a'</span>,<span class="string">'期中'</span>]]</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">a  期中    <span class="number">19</span></span><br><span class="line">   期末    <span class="number">16</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><ul><li>（2）切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: s[<span class="string">'a'</span>:<span class="string">'b'</span>]</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">a  期中     <span class="number">19</span></span><br><span class="line">   期末     <span class="number">16</span></span><br><span class="line">b  期中      <span class="number">2</span></span><br><span class="line">   期末    <span class="number">126</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: s.iloc[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">a  期中    <span class="number">19</span></span><br><span class="line">   期末    <span class="number">16</span></span><br><span class="line">b  期中     <span class="number">2</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><h2 id="2-2-DataFrame的操作"><a href="#2-2-DataFrame的操作" class="headerlink" title="2.2 DataFrame的操作"></a>2.2 DataFrame的操作</h2><ul><li>（1）可以直接使用列名称来进行行列索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: df1</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">           Java   Python   Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>      <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>       <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>       <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>      <span class="number">92</span></span><br><span class="line">王五 期中    <span class="number">64</span>     <span class="number">17</span>       <span class="number">98</span></span><br><span class="line">    期末    <span class="number">40</span>     <span class="number">60</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: df1[<span class="string">'张三'</span>:<span class="string">'李四'</span>]</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>     <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>      <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>      <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>     <span class="number">92</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: df1.loc[<span class="string">'张三'</span>:<span class="string">'李四'</span>]</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>     <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>      <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>      <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>     <span class="number">92</span></span><br></pre></td></tr></table></figure><ul><li>（2）使用行索引需要用<code>ix()</code>，<code>loc()</code>等函数</li><li>【极其重要】推荐使用<code>loc()</code>函数</li><li>注意在对行索引的时候，若一级行索引还有多个，对二级行索引会遇到问题！也就是说，无法直接对二级索引进行索引，必须让二级索引变成一级索引后才能对其进行索引！</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">25</span>]: df1.loc[<span class="string">'张三'</span>,<span class="string">'期中'</span>]</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">Java       <span class="number">19</span></span><br><span class="line">Python    <span class="number">147</span></span><br><span class="line">Scala       <span class="number">7</span></span><br><span class="line">Name: (张三, 期中), dtype: int32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: df1.loc[<span class="string">'张三'</span>].loc[<span class="string">'期中'</span>]</span><br><span class="line">Out[<span class="number">26</span>]:</span><br><span class="line">Java       <span class="number">19</span></span><br><span class="line">Python    <span class="number">147</span></span><br><span class="line">Scala       <span class="number">7</span></span><br><span class="line">Name: 期中, dtype: int32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: df1.loc[[<span class="string">'张三'</span>,<span class="string">'李四'</span>]]</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>     <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>      <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>      <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>     <span class="number">92</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1.loc[:,<span class="string">'期中'</span>]</span><br><span class="line"><span class="comment">#报错</span></span><br></pre></td></tr></table></figure><h1 id="3-索引的堆（stack）"><a href="#3-索引的堆（stack）" class="headerlink" title="3. 索引的堆（stack）"></a>3. 索引的堆（stack）</h1><ul><li>stack()</li><li>unstack()</li><li>【小技巧】使用<code>stack()</code>的时候，level等于哪一个，哪一个就消失，出现在行里。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: df4</span><br><span class="line">Out[<span class="number">29</span>]:</span><br><span class="line">      Java           Python      Scala</span><br><span class="line">      期中   期末     期中  期末    期中   期末</span><br><span class="line">张三   <span class="number">81</span>   <span class="number">17</span>       <span class="number">49</span>    <span class="number">83</span>     <span class="number">104</span>   <span class="number">123</span></span><br><span class="line">李四   <span class="number">30</span>   <span class="number">119</span>      <span class="number">23</span>    <span class="number">65</span>     <span class="number">11</span>    <span class="number">138</span></span><br><span class="line">王五   <span class="number">65</span>   <span class="number">147</span>      <span class="number">17</span>    <span class="number">25</span>     <span class="number">148</span>   <span class="number">149</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#stack = 堆  ---&gt;行</span></span><br><span class="line">In [<span class="number">30</span>]: df4.stack()</span><br><span class="line">Out[<span class="number">30</span>]:</span><br><span class="line">         Java   Python  Scala</span><br><span class="line">张三 期中    <span class="number">81</span>      <span class="number">49</span>     <span class="number">104</span></span><br><span class="line">    期末    <span class="number">17</span>      <span class="number">83</span>     <span class="number">123</span></span><br><span class="line">李四 期中    <span class="number">30</span>      <span class="number">23</span>     <span class="number">11</span></span><br><span class="line">    期末    <span class="number">119</span>     <span class="number">65</span>     <span class="number">138</span></span><br><span class="line">王五 期中    <span class="number">65</span>      <span class="number">17</span>     <span class="number">148</span></span><br><span class="line">    期末    <span class="number">147</span>     <span class="number">25</span>     <span class="number">149</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多层索引而言0,1,2：从上往下数</span></span><br><span class="line">In [<span class="number">31</span>]: df4.stack(level=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">31</span>]:</span><br><span class="line">             期中   期末</span><br><span class="line">张三 Java     <span class="number">81</span>    <span class="number">17</span></span><br><span class="line">    Python   <span class="number">49</span>    <span class="number">83</span></span><br><span class="line">    Scala    <span class="number">104</span>   <span class="number">123</span></span><br><span class="line">李四 Java     <span class="number">30</span>    <span class="number">119</span></span><br><span class="line">    Python   <span class="number">23</span>    <span class="number">65</span></span><br><span class="line">    Scala    <span class="number">11</span>    <span class="number">138</span></span><br><span class="line">王五 Java     <span class="number">65</span>    <span class="number">147</span></span><br><span class="line">    Python   <span class="number">17</span>    <span class="number">25</span></span><br><span class="line">    Scala    <span class="number">148</span>   <span class="number">149</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: df4.stack(level=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">32</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">81</span>      <span class="number">49</span>      <span class="number">104</span></span><br><span class="line">    期末    <span class="number">17</span>      <span class="number">83</span>      <span class="number">123</span></span><br><span class="line">李四 期中    <span class="number">30</span>      <span class="number">23</span>      <span class="number">11</span></span><br><span class="line">    期末    <span class="number">119</span>     <span class="number">65</span>      <span class="number">138</span></span><br><span class="line">王五 期中    <span class="number">65</span>      <span class="number">17</span>      <span class="number">148</span></span><br><span class="line">    期末    <span class="number">147</span>     <span class="number">25</span>      <span class="number">149</span></span><br></pre></td></tr></table></figure><ul><li>【小技巧】使用<code>unstack()</code>的时候，<code>level()</code>等于哪一个，哪一个就消失，出现在列里面。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: df2</span><br><span class="line">Out[<span class="number">33</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">80</span>     <span class="number">108</span>    <span class="number">108</span></span><br><span class="line">    期末    <span class="number">146</span>    <span class="number">84</span>      <span class="number">85</span></span><br><span class="line">李四 期中    <span class="number">139</span>    <span class="number">136</span>     <span class="number">66</span></span><br><span class="line">    期末    <span class="number">149</span>    <span class="number">92</span>      <span class="number">94</span></span><br><span class="line">王五 期中    <span class="number">27</span>     <span class="number">83</span>      <span class="number">143</span></span><br><span class="line">    期末    <span class="number">109</span>    <span class="number">4</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df2.unstack()</span><br><span class="line">Out[<span class="number">34</span>]:</span><br><span class="line">   Java         Python       Scala</span><br><span class="line">        期中   期末     期中  期末    期中  期末</span><br><span class="line">张三     <span class="number">80</span>    <span class="number">146</span>     <span class="number">108</span>   <span class="number">84</span>     <span class="number">108</span>  <span class="number">85</span></span><br><span class="line">李四     <span class="number">139</span>   <span class="number">149</span>     <span class="number">136</span>   <span class="number">92</span>     <span class="number">66</span>   <span class="number">94</span></span><br><span class="line">王五     <span class="number">27</span>    <span class="number">109</span>     <span class="number">83</span>    <span class="number">4</span>      <span class="number">143</span>  <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: df2.unstack(level=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">35</span>]:</span><br><span class="line">   Java            Python          Scala</span><br><span class="line">     张三   李四   王五     张三   李四  王五    张三  李四   王五</span><br><span class="line">期中    <span class="number">80</span>     <span class="number">139</span>   <span class="number">27</span>       <span class="number">108</span>   <span class="number">136</span>  <span class="number">83</span>      <span class="number">108</span>  <span class="number">66</span>    <span class="number">143</span></span><br><span class="line">期末    <span class="number">146</span>    <span class="number">149</span>   <span class="number">109</span>      <span class="number">84</span>    <span class="number">92</span>   <span class="number">4</span>       <span class="number">85</span>   <span class="number">94</span>    <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: df2.unstack(level=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">   Java         Python       Scala</span><br><span class="line">        期中   期末     期中  期末    期中  期末</span><br><span class="line">张三     <span class="number">80</span>    <span class="number">146</span>     <span class="number">108</span>  <span class="number">84</span>      <span class="number">108</span>  <span class="number">85</span></span><br><span class="line">李四     <span class="number">139</span>   <span class="number">149</span>     <span class="number">136</span>  <span class="number">92</span>      <span class="number">66</span>   <span class="number">94</span></span><br><span class="line">王五     <span class="number">27</span>    <span class="number">109</span>     <span class="number">83</span>   <span class="number">4</span>       <span class="number">143</span>  <span class="number">90</span></span><br></pre></td></tr></table></figure><h1 id="4-聚合操作"><a href="#4-聚合操作" class="headerlink" title="4. 聚合操作"></a>4. 聚合操作</h1><ul><li>【注意】<ul><li>需要指定axis</li><li>【小技巧】和<code>unstack()</code>相反，聚合的时候，<code>axis</code>等于哪一个，哪一个就保留</li></ul></li><li>所谓的聚合操作：平均数，方差，最大值，最小值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: df1</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>      <span class="number">7</span></span><br><span class="line">   期末    <span class="number">145</span>    <span class="number">29</span>       <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>       <span class="number">105</span></span><br><span class="line">   期末    <span class="number">136</span>    <span class="number">145</span>      <span class="number">92</span></span><br><span class="line">王五 期中    <span class="number">64</span>     <span class="number">17</span>       <span class="number">98</span></span><br><span class="line">   期末    <span class="number">40</span>     <span class="number">60</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求和操作</span></span><br><span class="line">In [<span class="number">38</span>]: df1.sum()</span><br><span class="line">Out[<span class="number">38</span>]:</span><br><span class="line">Java      <span class="number">487</span></span><br><span class="line">Python    <span class="number">482</span></span><br><span class="line">Scala     <span class="number">501</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#axis = 0 行，对行进行求和操作，行的数据就加到一起了，行就消失了</span></span><br><span class="line">In [<span class="number">39</span>]: df1.sum(axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">39</span>]:</span><br><span class="line">Java      <span class="number">487</span></span><br><span class="line">Python    <span class="number">482</span></span><br><span class="line">Scala     <span class="number">501</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: df1.sum(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line">张三  期中    <span class="number">173</span></span><br><span class="line">     期末    <span class="number">283</span></span><br><span class="line">李四  期中    <span class="number">272</span></span><br><span class="line">     期末    <span class="number">373</span></span><br><span class="line">王五  期中    <span class="number">179</span></span><br><span class="line">     期末    <span class="number">190</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求方差</span></span><br><span class="line">In [<span class="number">41</span>]: df1.std(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">41</span>]:</span><br><span class="line">张三  期中    <span class="number">77.597251</span></span><br><span class="line">     期末    <span class="number">59.374518</span></span><br><span class="line">李四  期中    <span class="number">12.423097</span></span><br><span class="line">     期末    <span class="number">28.360771</span></span><br><span class="line">王五  期中    <span class="number">40.673497</span></span><br><span class="line">     期末    <span class="number">25.166115</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pandas-Series_and_DataFrame</title>
      <link href="/Pandas/2018/10/29/1-Pandas-Series-and-DataFrame/"/>
      <url>/Pandas/2018/10/29/1-Pandas-Series-and-DataFrame/</url>
      
        <content type="html"><![CDATA[<h1 id="Pandas的数据结构"><a href="#Pandas的数据结构" class="headerlink" title="Pandas的数据结构"></a>Pandas的数据结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据分析三剑客</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h2 id="1-Series"><a href="#1-Series" class="headerlink" title="1. Series"></a>1. Series</h2><ul><li>Series是一种类似与一维数组的对象，由下面两部分组成：<ul><li>values:一组数组（ndarray类型）</li><li>index:相关的数据索引标签</li></ul></li></ul><h3 id="1-1-Series的创建"><a href="#1-1-Series的创建" class="headerlink" title="1.1 Series的创建"></a>1.1 Series的创建</h3><ul><li>两种创建方式：</li><li>（1）由列表或numpy数组创建<ul><li>默认索引为0到N-1的整数类型索引</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s = pd.Series([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)])</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: s</span><br><span class="line">Out[<span class="number">3</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过index指定索引</span></span><br><span class="line">In [<span class="number">4</span>]: s.index = list(<span class="string">'abcd'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: s</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: s1 = pd.Series([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>],index=list(<span class="string">'abcd'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: s1</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">a    zhangsan</span><br><span class="line">b        lisi</span><br><span class="line">c      wangwu</span><br><span class="line">d     zhaoliu</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Series只能存放一维数据</span></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: s2 = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size=<span class="number">5</span>),index=list(<span class="string">'abcde'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: s2</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">a    <span class="number">2</span></span><br><span class="line">b    <span class="number">7</span></span><br><span class="line">c    <span class="number">9</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">e    <span class="number">7</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><ul><li>（2）由字典创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: s3 = pd.Series(&#123;<span class="string">'zhangsan'</span>:<span class="number">23</span>,<span class="string">'lisi'</span>:<span class="number">22</span>,<span class="string">'wangwu'</span>:<span class="number">24</span>,<span class="string">'zhaoliu'</span>:<span class="number">21</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: s3</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">zhangsan    <span class="number">23</span></span><br><span class="line">lisi        <span class="number">22</span></span><br><span class="line">wangwu      <span class="number">24</span></span><br><span class="line">zhaoliu     <span class="number">21</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="1-2-Series的索引和切片"><a href="#1-2-Series的索引和切片" class="headerlink" title="1.2 Series的索引和切片"></a>1.2 Series的索引和切片</h3><ul><li>可以使用中括号取单个索引（此时返回的是元素类型），或者中括号里面一个列表取多个索引（此时返回的仍然是一个Series类型）。</li><li>显示索引：<ul><li>使用index中的元素作为索引值</li><li>使用<code>.loc[]</code> 推荐</li></ul></li><li>注意，此时是闭区间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: s4 = pd.Series(np.random.random(<span class="number">10</span>),index=list(<span class="string">'abcdefghij'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: s4</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">a    <span class="number">0.901201</span></span><br><span class="line">b    <span class="number">0.026940</span></span><br><span class="line">c    <span class="number">0.596118</span></span><br><span class="line">d    <span class="number">0.732741</span></span><br><span class="line">e    <span class="number">0.050395</span></span><br><span class="line">f    <span class="number">0.550084</span></span><br><span class="line">g    <span class="number">0.390146</span></span><br><span class="line">h    <span class="number">0.592242</span></span><br><span class="line">i    <span class="number">0.724512</span></span><br><span class="line">j    <span class="number">0.585712</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用index中的元素索引</span></span><br><span class="line">In [<span class="number">16</span>]: s4[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">0.9012012103671466</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示索引</span></span><br><span class="line">In [<span class="number">17</span>]: s4.loc[<span class="string">'a'</span>:<span class="string">'d'</span>]</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">a    <span class="number">0.901201</span></span><br><span class="line">b    <span class="number">0.026940</span></span><br><span class="line">c    <span class="number">0.596118</span></span><br><span class="line">d    <span class="number">0.732741</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过Series默认索引序号也可</span></span><br><span class="line">In [<span class="number">18</span>]: s4[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">0.026939806463515903</span></span><br></pre></td></tr></table></figure><ul><li>隐式索引：<ul><li>使用整数作为索引值</li><li>使用<code>.ilco[]</code>推荐</li></ul></li><li>注意：此时是半开区间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: s4.iloc[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">a    <span class="number">0.901201</span></span><br><span class="line">b    <span class="number">0.026940</span></span><br><span class="line">c    <span class="number">0.596118</span></span><br><span class="line">d    <span class="number">0.732741</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="1-3-Series的基本概念"><a href="#1-3-Series的基本概念" class="headerlink" title="1.3 Series的基本概念"></a>1.3 Series的基本概念</h3><ul><li>可以把Series看成一个定长的有序字典</li><li>可以通过shape，size，index，values等得到series的属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Series.values就是一个ndarray</span></span><br><span class="line">In [<span class="number">20</span>]: display(s4.shape,s4.size,s4.index,s4.values)</span><br><span class="line">(<span class="number">10</span>,)</span><br><span class="line"><span class="number">10</span></span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line">array([<span class="number">0.90120121</span>, <span class="number">0.02693981</span>, <span class="number">0.59611828</span>, <span class="number">0.73274146</span>, <span class="number">0.05039477</span>,</span><br><span class="line">       <span class="number">0.55008443</span>, <span class="number">0.39014647</span>, <span class="number">0.59224205</span>, <span class="number">0.72451164</span>, <span class="number">0.58571199</span>])</span><br></pre></td></tr></table></figure><ul><li>可以通过<code>head()</code>,<code>tail()</code>快速查看Series对象的样式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看Series前几行</span></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: df = pd.read_excel(<span class="string">'D:\myProject\Python\Jupyter\pydata\people.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: type(df)</span><br><span class="line">Out[<span class="number">24</span>]: pandas.core.frame.DataFrame</span><br><span class="line"><span class="comment">#通过列索引获得age数据</span></span><br><span class="line">In [<span class="number">25</span>]: age = df[<span class="string">'age'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: type(age)</span><br><span class="line">Out[<span class="number">26</span>]: pandas.core.series.Series</span><br><span class="line"><span class="comment">#利用head()获得前几行数据</span></span><br><span class="line">In [<span class="number">27</span>]: age.head(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">43</span></span><br><span class="line"><span class="number">1</span>    <span class="number">29</span></span><br><span class="line"><span class="number">2</span>    <span class="number">25</span></span><br><span class="line"><span class="number">3</span>    <span class="number">50</span></span><br><span class="line"><span class="number">4</span>    <span class="number">48</span></span><br><span class="line">Name: age, dtype: int64</span><br><span class="line"><span class="comment">#利用tail()获得后几行数据</span></span><br><span class="line">In [<span class="number">28</span>]: age.tail(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line"><span class="number">495</span>    <span class="number">24</span></span><br><span class="line"><span class="number">496</span>    <span class="number">30</span></span><br><span class="line"><span class="number">497</span>    <span class="number">57</span></span><br><span class="line"><span class="number">498</span>    <span class="number">39</span></span><br><span class="line"><span class="number">499</span>    <span class="number">42</span></span><br><span class="line">Name: age, dtype: int64</span><br></pre></td></tr></table></figure><ul><li>可以使用<code>pd.isnull()</code>,<code>pd.notnull()</code>，或自带<code>isnull()</code>，<code>notnull()</code>函数检测缺失数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: s5 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="keyword">None</span>,np.nan])</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: s5</span><br><span class="line">Out[<span class="number">30</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测缺失数据</span></span><br><span class="line">In [<span class="number">31</span>]: s5.isnull()</span><br><span class="line">Out[<span class="number">31</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: s6 = s5.notnull()</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: s6</span><br><span class="line">Out[<span class="number">33</span>]:</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#notnull相当于过滤，将为false的过滤掉</span></span><br><span class="line">In [<span class="number">34</span>]: s5[s6]</span><br><span class="line">Out[<span class="number">34</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><ul><li>Series对象本身及其实例都有一个name属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#name在DateFrame中用于区分,在DateFrame中是指其列名</span></span><br><span class="line">In [<span class="number">36</span>]: s5.name = <span class="string">'Test'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: s5</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line">Name: Test, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: df</span><br><span class="line">Out[<span class="number">38</span>]:</span><br><span class="line">    name   city  age  height  weight</span><br><span class="line"><span class="number">0</span>     危琳    兴城市   <span class="number">43</span>     <span class="number">164</span>     <span class="number">156</span></span><br><span class="line"><span class="number">1</span>    颛春梅    潜江县   <span class="number">29</span>     <span class="number">181</span>     <span class="number">114</span></span><br><span class="line"><span class="number">2</span>     韶璐    深圳县   <span class="number">25</span>     <span class="number">170</span>     <span class="number">149</span></span><br><span class="line"><span class="number">3</span>     父想    大冶县   <span class="number">50</span>     <span class="number">172</span>     <span class="number">138</span></span><br><span class="line"><span class="number">4</span>    逄建国     彬县   <span class="number">48</span>     <span class="number">169</span>     <span class="number">110</span></span><br><span class="line"><span class="number">5</span>     车静    宁德县   <span class="number">56</span>     <span class="number">177</span>     <span class="number">119</span></span><br><span class="line"><span class="number">6</span>    俟玉梅     莉县   <span class="number">47</span>     <span class="number">176</span>     <span class="number">125</span></span><br><span class="line"><span class="number">7</span>     岳博    通辽县   <span class="number">51</span>     <span class="number">162</span>     <span class="number">118</span></span><br><span class="line"><span class="number">8</span>     璩柳     建县   <span class="number">31</span>     <span class="number">189</span>     <span class="number">154</span></span><br><span class="line"><span class="number">9</span>     空龙    西宁县   <span class="number">23</span>     <span class="number">179</span>     <span class="number">150</span></span><br><span class="line"><span class="number">10</span>    濮婷     文县   <span class="number">50</span>     <span class="number">172</span>     <span class="number">121</span></span><br><span class="line"><span class="number">11</span>    勾婷    武汉县   <span class="number">50</span>     <span class="number">184</span>     <span class="number">141</span></span><br><span class="line"><span class="number">12</span>    苍萍     凯市   <span class="number">27</span>     <span class="number">174</span>     <span class="number">120</span></span><br><span class="line"><span class="number">13</span>    邰帆    上海县   <span class="number">45</span>     <span class="number">174</span>     <span class="number">151</span></span><br><span class="line"><span class="number">14</span>    东红     华县   <span class="number">30</span>     <span class="number">166</span>     <span class="number">123</span></span><br><span class="line"><span class="number">15</span>    孙文     华县   <span class="number">50</span>     <span class="number">169</span>     <span class="number">110</span></span><br><span class="line"><span class="number">16</span>    松飞     华县   <span class="number">57</span>     <span class="number">174</span>     <span class="number">116</span></span><br><span class="line"><span class="number">17</span>    水琳     阳县   <span class="number">36</span>     <span class="number">163</span>     <span class="number">142</span></span><br><span class="line"><span class="number">18</span>    简平    辽阳市   <span class="number">57</span>     <span class="number">181</span>     <span class="number">110</span></span><br><span class="line"><span class="number">19</span>    慕雪    海口市   <span class="number">22</span>     <span class="number">177</span>     <span class="number">150</span></span><br><span class="line"><span class="number">20</span>    籍凯     杰县   <span class="number">52</span>     <span class="number">175</span>     <span class="number">133</span></span><br><span class="line"><span class="number">21</span>    阎洋     敏县   <span class="number">46</span>     <span class="number">180</span>     <span class="number">107</span></span><br><span class="line"><span class="number">22</span>    良文    六安县   <span class="number">59</span>     <span class="number">169</span>     <span class="number">114</span></span><br><span class="line"><span class="number">23</span>   师金凤     宁市   <span class="number">20</span>     <span class="number">173</span>     <span class="number">149</span></span><br><span class="line"><span class="number">24</span>   马婷婷     晶县   <span class="number">40</span>     <span class="number">174</span>     <span class="number">145</span></span><br><span class="line"><span class="number">25</span>    红莉    昆明市   <span class="number">49</span>     <span class="number">175</span>     <span class="number">106</span></span><br><span class="line"><span class="number">26</span>   弘玉英    郑州县   <span class="number">54</span>     <span class="number">160</span>     <span class="number">117</span></span><br><span class="line"><span class="number">27</span>    包芳  呼和浩特县   <span class="number">22</span>     <span class="number">188</span>     <span class="number">136</span></span><br><span class="line"><span class="number">28</span>   茹秀兰    贵阳县   <span class="number">39</span>     <span class="number">168</span>     <span class="number">136</span></span><br><span class="line"><span class="number">29</span>    充英     红市   <span class="number">35</span>     <span class="number">189</span>     <span class="number">125</span></span><br><span class="line">..   ...    ...  ...     ...     ...</span><br><span class="line"><span class="number">470</span>  于雪梅     晨市   <span class="number">47</span>     <span class="number">189</span>     <span class="number">141</span></span><br><span class="line"><span class="number">471</span>   宇柳    沈阳县   <span class="number">24</span>     <span class="number">164</span>     <span class="number">140</span></span><br><span class="line"><span class="number">472</span>   孙宁   哈尔滨县   <span class="number">23</span>     <span class="number">180</span>     <span class="number">132</span></span><br><span class="line"><span class="number">473</span>   柯龙     鹏县   <span class="number">57</span>     <span class="number">171</span>     <span class="number">158</span></span><br><span class="line"><span class="number">474</span>  宰红霞    西安县   <span class="number">34</span>     <span class="number">183</span>     <span class="number">154</span></span><br><span class="line"><span class="number">475</span>  夏玉英    邯郸县   <span class="number">58</span>     <span class="number">176</span>     <span class="number">103</span></span><br><span class="line"><span class="number">476</span>   郎杰    合山市   <span class="number">50</span>     <span class="number">165</span>     <span class="number">112</span></span><br><span class="line"><span class="number">477</span>   蒯玉    南昌县   <span class="number">51</span>     <span class="number">167</span>     <span class="number">148</span></span><br><span class="line"><span class="number">478</span>   虞勇    合肥市   <span class="number">53</span>     <span class="number">160</span>     <span class="number">144</span></span><br><span class="line"><span class="number">479</span>   习雷     静市   <span class="number">40</span>     <span class="number">163</span>     <span class="number">132</span></span><br><span class="line"><span class="number">480</span>   邢建     超市   <span class="number">40</span>     <span class="number">182</span>     <span class="number">105</span></span><br><span class="line"><span class="number">481</span>   燕华    玉珍县   <span class="number">50</span>     <span class="number">161</span>     <span class="number">146</span></span><br><span class="line"><span class="number">482</span>   伯彬     凯市   <span class="number">47</span>     <span class="number">177</span>     <span class="number">129</span></span><br><span class="line"><span class="number">483</span>  尹婷婷    太原县   <span class="number">52</span>     <span class="number">168</span>     <span class="number">144</span></span><br><span class="line"><span class="number">484</span>  粱建军    北京县   <span class="number">55</span>     <span class="number">179</span>     <span class="number">134</span></span><br><span class="line"><span class="number">485</span>   后娜     飞县   <span class="number">21</span>     <span class="number">180</span>     <span class="number">148</span></span><br><span class="line"><span class="number">486</span>   西亮     英县   <span class="number">45</span>     <span class="number">173</span>     <span class="number">136</span></span><br><span class="line"><span class="number">487</span>  荆淑珍   兴安盟市   <span class="number">52</span>     <span class="number">188</span>     <span class="number">118</span></span><br><span class="line"><span class="number">488</span>  驷淑华    嘉禾市   <span class="number">57</span>     <span class="number">166</span>     <span class="number">133</span></span><br><span class="line"><span class="number">489</span>   孙萍    昆明县   <span class="number">57</span>     <span class="number">160</span>     <span class="number">103</span></span><br><span class="line"><span class="number">490</span>  邬秀兰    澳门市   <span class="number">45</span>     <span class="number">176</span>     <span class="number">135</span></span><br><span class="line"><span class="number">491</span>   璩林    淮安县   <span class="number">42</span>     <span class="number">166</span>     <span class="number">101</span></span><br><span class="line"><span class="number">492</span>   葛英    北京县   <span class="number">28</span>     <span class="number">183</span>     <span class="number">139</span></span><br><span class="line"><span class="number">493</span>   农瑞     健市   <span class="number">53</span>     <span class="number">171</span>     <span class="number">139</span></span><br><span class="line"><span class="number">494</span>   安雷    秀梅县   <span class="number">49</span>     <span class="number">184</span>     <span class="number">158</span></span><br><span class="line"><span class="number">495</span>   涂玲     兵县   <span class="number">24</span>     <span class="number">168</span>     <span class="number">124</span></span><br><span class="line"><span class="number">496</span>  于建平     洋市   <span class="number">30</span>     <span class="number">175</span>     <span class="number">137</span></span><br><span class="line"><span class="number">497</span>  彭凤英    桂花市   <span class="number">57</span>     <span class="number">170</span>     <span class="number">119</span></span><br><span class="line"><span class="number">498</span>   干阳     帅县   <span class="number">39</span>     <span class="number">173</span>     <span class="number">149</span></span><br><span class="line"><span class="number">499</span>   雷俊    柳州县   <span class="number">42</span>     <span class="number">175</span>     <span class="number">116</span></span><br><span class="line"></span><br><span class="line">[<span class="number">500</span> rows x <span class="number">5</span> columns]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: df.head(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">39</span>]:</span><br><span class="line">  name city  age  height  weight</span><br><span class="line"><span class="number">0</span>   危琳  兴城市   <span class="number">43</span>     <span class="number">164</span>     <span class="number">156</span></span><br><span class="line"><span class="number">1</span>  颛春梅  潜江县   <span class="number">29</span>     <span class="number">181</span>     <span class="number">114</span></span><br><span class="line"><span class="number">2</span>   韶璐  深圳县   <span class="number">25</span>     <span class="number">170</span>     <span class="number">149</span></span><br><span class="line"><span class="number">3</span>   父想  大冶县   <span class="number">50</span>     <span class="number">172</span>     <span class="number">138</span></span><br><span class="line"><span class="number">4</span>  逄建国   彬县   <span class="number">48</span>     <span class="number">169</span>     <span class="number">110</span></span><br></pre></td></tr></table></figure><ul><li>Series之间进行运算<ul><li>在Series中自动对齐不同索引的数据</li><li>如果索引不对应，则补NaN</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: s1 = pd.Series([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: s2 = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Series相加时，是将其索引值相同的进行相加</span></span><br><span class="line">In [<span class="number">42</span>]: s1 + s2</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">a    <span class="number">3.0</span></span><br><span class="line">b    <span class="number">7.0</span></span><br><span class="line">c    NaN</span><br><span class="line">d    NaN</span><br><span class="line">e    NaN</span><br><span class="line">f    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><ul><li>注意：想要保留所有的index，则需要使用<code>.add()</code>函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: s1.add(s2,fill_value=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">43</span>]:</span><br><span class="line">a    <span class="number">3.0</span></span><br><span class="line">b    <span class="number">7.0</span></span><br><span class="line">c    <span class="number">6.0</span></span><br><span class="line">d    <span class="number">8.0</span></span><br><span class="line">e    <span class="number">5.0</span></span><br><span class="line">f    <span class="number">7.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h2 id="2-DataFrame"><a href="#2-DataFrame" class="headerlink" title="2. DataFrame"></a>2. DataFrame</h2><ul><li>DataFrame是一个【表格型】的数据结构，可以看做是【由Series组成的字典】（共用同一索引）。DataFrame由按一定顺序排列的多列数据组成。设计初衷是将Series的使用场景从一维拓展到多维。DataFrame既有行索引，也有列索引。<ul><li>行索引：index</li><li>列索引：columns</li><li>值：values（numpy的二维数组）</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">101</span>]: df.head(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">101</span>]:</span><br><span class="line">  name city  age  height  weight</span><br><span class="line"><span class="number">0</span>   危琳  兴城市   <span class="number">43</span>     <span class="number">164</span>     <span class="number">156</span></span><br><span class="line"><span class="number">1</span>  颛春梅  潜江县   <span class="number">29</span>     <span class="number">181</span>     <span class="number">114</span></span><br><span class="line"><span class="number">2</span>   韶璐  深圳县   <span class="number">25</span>     <span class="number">170</span>     <span class="number">149</span></span><br><span class="line"><span class="number">3</span>   父想  大冶县   <span class="number">50</span>     <span class="number">172</span>     <span class="number">138</span></span><br><span class="line"><span class="number">4</span>  逄建国   彬县   <span class="number">48</span>     <span class="number">169</span>     <span class="number">110</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: display(df.index,df.columns,df.values,df.values.shape)</span><br><span class="line">Int64Index([  <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">4</span>,   <span class="number">5</span>,   <span class="number">6</span>,   <span class="number">7</span>,   <span class="number">8</span>,   <span class="number">9</span>,</span><br><span class="line">            ...</span><br><span class="line">            <span class="number">490</span>, <span class="number">491</span>, <span class="number">492</span>, <span class="number">493</span>, <span class="number">494</span>, <span class="number">495</span>, <span class="number">496</span>, <span class="number">497</span>, <span class="number">498</span>, <span class="number">499</span>],</span><br><span class="line">           dtype=<span class="string">'int64'</span>, length=<span class="number">500</span>)</span><br><span class="line">Index([<span class="string">'name'</span>, <span class="string">'city'</span>, <span class="string">'age'</span>, <span class="string">'height'</span>, <span class="string">'weight'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line">array([[<span class="string">'危琳'</span>, <span class="string">'兴城市'</span>, <span class="number">43</span>, <span class="number">164</span>, <span class="number">156</span>],</span><br><span class="line">       [<span class="string">'颛春梅'</span>, <span class="string">'潜江县'</span>, <span class="number">29</span>, <span class="number">181</span>, <span class="number">114</span>],</span><br><span class="line">       [<span class="string">'韶璐'</span>, <span class="string">'深圳县'</span>, <span class="number">25</span>, <span class="number">170</span>, <span class="number">149</span>],</span><br><span class="line">       ...,</span><br><span class="line">       [<span class="string">'彭凤英'</span>, <span class="string">'桂花市'</span>, <span class="number">57</span>, <span class="number">170</span>, <span class="number">119</span>],</span><br><span class="line">       [<span class="string">'干阳'</span>, <span class="string">'帅县'</span>, <span class="number">39</span>, <span class="number">173</span>, <span class="number">149</span>],</span><br><span class="line">       [<span class="string">'雷俊'</span>, <span class="string">'柳州县'</span>, <span class="number">42</span>, <span class="number">175</span>, <span class="number">116</span>]], dtype=object)</span><br><span class="line">(<span class="number">500</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="2-1-DataFrame的创建"><a href="#2-1-DataFrame的创建" class="headerlink" title="2.1 DataFrame的创建"></a>2.1 DataFrame的创建</h3><ul><li>最常用的方法是传递一个字典来创建。DataFrame以字典的键作为每一【列】的名称，以字典的值（一个数组）作为每一列。此外，DataFrame会自动加上每一行的索引（和Series一样）。</li><li>同Series一样，若传入的列与字典的键不匹配，则相应的值为NaN。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: df = pd.DataFrame(&#123;<span class="string">'name'</span>:[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>],</span><br><span class="line">    ...: <span class="string">'age'</span>: np.random.randint(<span class="number">20</span>,<span class="number">26</span>,size=<span class="number">4</span>),</span><br><span class="line">    ...: <span class="string">'sex'</span>:[<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'女'</span>,<span class="string">'男'</span>]&#125;,index= list(<span class="string">'ABCD'</span>),</span><br><span class="line">    ...: columns = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: df</span><br><span class="line">Out[<span class="number">49</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">25</span>   男</span><br><span class="line">B      lisi   <span class="number">20</span>   女</span><br><span class="line">C    wangwu   <span class="number">24</span>   女</span><br><span class="line">D   zhaoliu   <span class="number">25</span>   男</span><br></pre></td></tr></table></figure><ul><li>DataFrame的属性：values、columns、index、shape</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">50</span>]: df.shape</span><br><span class="line">Out[<span class="number">50</span>]: (<span class="number">4</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#练习</span><br><span class="line">根据以下考试成绩表，创建一个DataFrame,命名为df：</span><br><span class="line">      张三  李四</span><br><span class="line">语文   150   0</span><br><span class="line">数学   150   0</span><br><span class="line">英语   150   0</span><br><span class="line">理综   300   0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">51</span>]: df = pd.DataFrame(&#123;<span class="string">'张三'</span>:[<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">300</span>],<span class="string">'李四'</span>:[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]&#125;,index=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,</span><br><span class="line">    ...: <span class="string">'理综'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: df</span><br><span class="line">Out[<span class="number">52</span>]:</span><br><span class="line">     张三  李四</span><br><span class="line">语文  <span class="number">150</span>   <span class="number">0</span></span><br><span class="line">数学  <span class="number">150</span>   <span class="number">0</span></span><br><span class="line">英语  <span class="number">150</span>   <span class="number">0</span></span><br><span class="line">理综  <span class="number">300</span>   <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-2-DataFrame的索引"><a href="#2-2-DataFrame的索引" class="headerlink" title="2.2 DataFrame的索引"></a>2.2 DataFrame的索引</h3><ul><li>1.对列进行索引<ul><li>通过类似字典的方式</li><li>通过属性的方式</li></ul></li><li>可以将DataFrame的列获取为一个Series。返回的Series拥有原DataFrame相同的索引，且name属性也已经设置好了，就是相应的列名。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">53</span>]: df = pd.DataFrame(&#123;<span class="string">'name'</span>:[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>],</span><br><span class="line">    ...:                    <span class="string">'age'</span>: np.random.randint(<span class="number">20</span>,<span class="number">26</span>,size=<span class="number">4</span>),</span><br><span class="line">    ...:                    <span class="string">'sex'</span>:[<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'女'</span>,<span class="string">'男'</span>]&#125;,index= list(<span class="string">'ABCD'</span>),</span><br><span class="line">    ...:                   columns = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: df</span><br><span class="line">Out[<span class="number">54</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">20</span>   男</span><br><span class="line">B      lisi   <span class="number">25</span>   女</span><br><span class="line">C    wangwu   <span class="number">22</span>   女</span><br><span class="line">D   zhaoliu   <span class="number">21</span>   男</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#t通过字典的方式对列进行索引，返回一个Series</span></span><br><span class="line">In [<span class="number">55</span>]: name = df[<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: display(type(name),name)</span><br><span class="line">pandas.core.series.Series</span><br><span class="line">A    zhangsan</span><br><span class="line">B        lisi</span><br><span class="line">C      wangwu</span><br><span class="line">D     zhaoliu</span><br><span class="line">Name: name, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过属性的方式对列进行索引,返回一个Series</span></span><br><span class="line">In [<span class="number">57</span>]: age = df.age</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: display(type(age),age)</span><br><span class="line">pandas.core.series.Series</span><br><span class="line">A    <span class="number">20</span></span><br><span class="line">B    <span class="number">25</span></span><br><span class="line">C    <span class="number">22</span></span><br><span class="line">D    <span class="number">21</span></span><br><span class="line">Name: age, dtype: int32</span><br></pre></td></tr></table></figure><ul><li>2.对行进行索引<ul><li>使用<code>.ix[]</code>来进行行索引</li><li>使用<code>.loc[]</code>加index来进行行索引</li><li>使用<code>.iloc[]</code>加整数来进行行索引</li></ul></li><li>同样返回一个Series，index为原来的columns。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对行的检索，返回值还是Series</span></span><br><span class="line">In [<span class="number">59</span>]: df.loc[<span class="string">'A'</span>]</span><br><span class="line">Out[<span class="number">59</span>]:</span><br><span class="line">name    zhangsan</span><br><span class="line">age           <span class="number">20</span></span><br><span class="line">sex            男</span><br><span class="line">Name: A, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检索多行返回的数据是DataFrame</span></span><br><span class="line">In [<span class="number">61</span>]: df.loc[[<span class="string">'A'</span>,<span class="string">'B'</span>]]</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">20</span>   男</span><br><span class="line">B      lisi   <span class="number">25</span>   女</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对行进行切片索引</span></span><br><span class="line">In [<span class="number">62</span>]: df.loc[<span class="string">'A'</span>:<span class="string">'C'</span>]</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">20</span>   男</span><br><span class="line">B      lisi   <span class="number">25</span>   女</span><br><span class="line">C    wangwu   <span class="number">22</span>   女</span><br></pre></td></tr></table></figure><ul><li>3.对元素索引的方法<ul><li>使用列索引</li><li>使用行索引（iloc[3,1]相当于两个参数；iloc[[3,3]]里面的[3,3]看做一个参数）</li><li>使用values属性（二维numpy数组）</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用列索引</span></span><br><span class="line">In [<span class="number">63</span>]: df[<span class="string">'name'</span>][<span class="string">'B'</span>]</span><br><span class="line">Out[<span class="number">63</span>]: <span class="string">'lisi'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用行索引</span></span><br><span class="line">In [<span class="number">64</span>]: df.loc[<span class="string">'C'</span>][<span class="string">'age'</span>]</span><br><span class="line">Out[<span class="number">64</span>]: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: df.iloc[<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">65</span>]: <span class="string">'zhaoliu'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: df.values[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">66</span>]: <span class="number">20</span></span><br></pre></td></tr></table></figure><p>【注意】直接使用中括号时：</p><ul><li>索引表示的是列索引</li><li>切片表示的是行切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: df[<span class="string">'name'</span>]</span><br><span class="line">Out[<span class="number">67</span>]:</span><br><span class="line">A    zhangsan</span><br><span class="line">B        lisi</span><br><span class="line">C      wangwu</span><br><span class="line">D     zhaoliu</span><br><span class="line">Name: name, dtype: object</span><br><span class="line"></span><br><span class="line"><span class="comment">#对列使用切片，只显示列名</span></span><br><span class="line">In [<span class="number">68</span>]: df[<span class="string">'name'</span>:<span class="string">'sex'</span>]</span><br><span class="line">Out[<span class="number">68</span>]:</span><br><span class="line">Empty DataFrame</span><br><span class="line">Columns: [name, age, sex]</span><br><span class="line">Index: []</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: df[<span class="string">'A'</span>:<span class="string">'C'</span>]</span><br><span class="line">Out[<span class="number">69</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">20</span>   男</span><br><span class="line">B      lisi   <span class="number">25</span>   女</span><br><span class="line">C    wangwu   <span class="number">22</span>   女</span><br></pre></td></tr></table></figure><h2 id="3-DataFrame的运算"><a href="#3-DataFrame的运算" class="headerlink" title="3. DataFrame的运算"></a>3. DataFrame的运算</h2><h3 id="3-1-DataFrame之间的运算"><a href="#3-1-DataFrame之间的运算" class="headerlink" title="3.1 DataFrame之间的运算"></a>3.1 DataFrame之间的运算</h3><ul><li>同Series一样：<ul><li>在运算中自动对齐不同索引的数据</li><li>如果索引不对应，则补NaN</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建DataFrame df1 不同人员的各科目成绩，月考一</span></span><br><span class="line">In [<span class="number">70</span>]: df1 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">4</span>,<span class="number">4</span>)),</span><br><span class="line">    ...:                    index=[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>],</span><br><span class="line">    ...:                    columns=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,<span class="string">'理综'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: df1</span><br><span class="line">Out[<span class="number">71</span>]:</span><br><span class="line">           语文   数学  英语   理综</span><br><span class="line">zhangsan  <span class="number">138</span>  <span class="number">101</span>  <span class="number">26</span>  <span class="number">146</span></span><br><span class="line">lisi       <span class="number">39</span>   <span class="number">45</span>  <span class="number">26</span>   <span class="number">59</span></span><br><span class="line">wangwu    <span class="number">143</span>   <span class="number">75</span>  <span class="number">10</span>   <span class="number">98</span></span><br><span class="line">zhaoliu   <span class="number">117</span>    <span class="number">7</span>  <span class="number">19</span>    <span class="number">8</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建DataFrame df2 不同人员的各科目成绩，月考二</span></span><br><span class="line"><span class="comment">#有新生转入</span></span><br><span class="line">In [<span class="number">72</span>]: df2 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">4</span>)),</span><br><span class="line">    ...:                    index=[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>,<span class="string">'tianqi'</span>],</span><br><span class="line">    ...:                    columns=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,<span class="string">'理综'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: df2</span><br><span class="line">Out[<span class="number">73</span>]:</span><br><span class="line">           语文   数学   英语   理综</span><br><span class="line">zhangsan   <span class="number">51</span>   <span class="number">16</span>    <span class="number">3</span>  <span class="number">147</span></span><br><span class="line">lisi       <span class="number">19</span>   <span class="number">22</span>   <span class="number">70</span>   <span class="number">85</span></span><br><span class="line">wangwu     <span class="number">83</span>  <span class="number">106</span>   <span class="number">79</span>  <span class="number">101</span></span><br><span class="line">zhaoliu   <span class="number">132</span>    <span class="number">9</span>  <span class="number">135</span>   <span class="number">29</span></span><br><span class="line">tianqi    <span class="number">106</span>  <span class="number">120</span>    <span class="number">2</span>   <span class="number">89</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: df1 + df2</span><br><span class="line">Out[<span class="number">75</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi       <span class="number">58.0</span>   <span class="number">67.0</span>   <span class="number">96.0</span>  <span class="number">144.0</span></span><br><span class="line">tianqi      NaN    NaN    NaN    NaN</span><br><span class="line">wangwu    <span class="number">226.0</span>  <span class="number">181.0</span>   <span class="number">89.0</span>  <span class="number">199.0</span></span><br><span class="line">zhangsan  <span class="number">189.0</span>  <span class="number">117.0</span>   <span class="number">29.0</span>  <span class="number">293.0</span></span><br><span class="line">zhaoliu   <span class="number">249.0</span>   <span class="number">16.0</span>  <span class="number">154.0</span>   <span class="number">37.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: df3 = df1.add(df2,fill_value=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: df3</span><br><span class="line">Out[<span class="number">77</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi       <span class="number">58.0</span>   <span class="number">67.0</span>   <span class="number">96.0</span>  <span class="number">144.0</span></span><br><span class="line">tianqi    <span class="number">106.0</span>  <span class="number">120.0</span>    <span class="number">2.0</span>   <span class="number">89.0</span></span><br><span class="line">wangwu    <span class="number">226.0</span>  <span class="number">181.0</span>   <span class="number">89.0</span>  <span class="number">199.0</span></span><br><span class="line">zhangsan  <span class="number">189.0</span>  <span class="number">117.0</span>   <span class="number">29.0</span>  <span class="number">293.0</span></span><br><span class="line">zhaoliu   <span class="number">249.0</span>   <span class="number">16.0</span>  <span class="number">154.0</span>   <span class="number">37.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">78</span>]: df4 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">3</span>)),</span><br><span class="line">    ...:                    index=[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>,<span class="string">'tianqi'</span>],</span><br><span class="line">    ...:                    columns=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: df4</span><br><span class="line">Out[<span class="number">79</span>]:</span><br><span class="line">           语文   数学  英语</span><br><span class="line">zhangsan   <span class="number">33</span>  <span class="number">134</span>  <span class="number">71</span></span><br><span class="line">lisi      <span class="number">144</span>    <span class="number">0</span>  <span class="number">28</span></span><br><span class="line">wangwu     <span class="number">15</span>  <span class="number">140</span>  <span class="number">72</span></span><br><span class="line">zhaoliu     <span class="number">5</span>  <span class="number">140</span>  <span class="number">20</span></span><br><span class="line">tianqi     <span class="number">46</span>   <span class="number">36</span>  <span class="number">40</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: df1.add(df4)</span><br><span class="line">Out[<span class="number">80</span>]:</span><br><span class="line">             数学  理综    英语     语文</span><br><span class="line">lisi       <span class="number">45.0</span> NaN  <span class="number">54.0</span>  <span class="number">183.0</span></span><br><span class="line">tianqi      NaN NaN   NaN    NaN</span><br><span class="line">wangwu    <span class="number">215.0</span> NaN  <span class="number">82.0</span>  <span class="number">158.0</span></span><br><span class="line">zhangsan  <span class="number">235.0</span> NaN  <span class="number">97.0</span>  <span class="number">171.0</span></span><br><span class="line">zhaoliu   <span class="number">147.0</span> NaN  <span class="number">39.0</span>  <span class="number">122.0</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Series与DataFrame之间的运算"><a href="#3-2-Series与DataFrame之间的运算" class="headerlink" title="3.2 Series与DataFrame之间的运算"></a>3.2 Series与DataFrame之间的运算</h3><ul><li>使用Python操作符：以行位单位操作（参数必须是行），对所有行都有效。（类似与numpy中二维数组与一维数组的运算，但可能出现NaN）</li><li>使用pandas操作函数：<ul><li>axis=0：以列为单位操作（参数必须是列），对所有列都有效。</li><li>axis=1：以行位单位操作（参数必须是行），对所有行都有效。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">81</span>]: s1 = df3[<span class="string">'语文'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: s1</span><br><span class="line">Out[<span class="number">82</span>]:</span><br><span class="line">lisi         <span class="number">58.0</span></span><br><span class="line">tianqi      <span class="number">106.0</span></span><br><span class="line">wangwu      <span class="number">226.0</span></span><br><span class="line">zhangsan    <span class="number">189.0</span></span><br><span class="line">zhaoliu     <span class="number">249.0</span></span><br><span class="line">Name: 语文, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">83</span>]: df3 + s1</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">          lisi  tianqi  wangwu  zhangsan  zhaoliu  数学  理综  英语  语文</span><br><span class="line">lisi       NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br><span class="line">tianqi     NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br><span class="line">wangwu     NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br><span class="line">zhangsan   NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br><span class="line">zhaoliu    NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: display(df3.columns,s1.index)</span><br><span class="line">Index([<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'理综'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line">Index([<span class="string">'lisi'</span>, <span class="string">'tianqi'</span>, <span class="string">'wangwu'</span>, <span class="string">'zhangsan'</span>, <span class="string">'zhaoliu'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">85</span>]: s2 = df3.loc[<span class="string">'lisi'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: s2</span><br><span class="line">Out[<span class="number">86</span>]:</span><br><span class="line">语文     <span class="number">58.0</span></span><br><span class="line">数学     <span class="number">67.0</span></span><br><span class="line">英语     <span class="number">96.0</span></span><br><span class="line">理综    <span class="number">144.0</span></span><br><span class="line">Name: lisi, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">87</span>]: df3 + s2</span><br><span class="line">Out[<span class="number">87</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi      <span class="number">116.0</span>  <span class="number">134.0</span>  <span class="number">192.0</span>  <span class="number">288.0</span></span><br><span class="line">tianqi    <span class="number">164.0</span>  <span class="number">187.0</span>   <span class="number">98.0</span>  <span class="number">233.0</span></span><br><span class="line">wangwu    <span class="number">284.0</span>  <span class="number">248.0</span>  <span class="number">185.0</span>  <span class="number">343.0</span></span><br><span class="line">zhangsan  <span class="number">247.0</span>  <span class="number">184.0</span>  <span class="number">125.0</span>  <span class="number">437.0</span></span><br><span class="line">zhaoliu   <span class="number">307.0</span>   <span class="number">83.0</span>  <span class="number">250.0</span>  <span class="number">181.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">88</span>]: display(df3.columns,s2.index)</span><br><span class="line">Index([<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'理综'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line">Index([<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'理综'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axis=<span class="number">0</span>：以列为单位操作（参数必须是列），对所有列都有效。</span><br><span class="line">axis=<span class="number">1</span>：以行位单位操作（参数必须是行），对所有行都有效。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">89</span>]: ss = df3.语文</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: display(df3,ss)</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi       <span class="number">58.0</span>   <span class="number">67.0</span>   <span class="number">96.0</span>  <span class="number">144.0</span></span><br><span class="line">tianqi    <span class="number">106.0</span>  <span class="number">120.0</span>    <span class="number">2.0</span>   <span class="number">89.0</span></span><br><span class="line">wangwu    <span class="number">226.0</span>  <span class="number">181.0</span>   <span class="number">89.0</span>  <span class="number">199.0</span></span><br><span class="line">zhangsan  <span class="number">189.0</span>  <span class="number">117.0</span>   <span class="number">29.0</span>  <span class="number">293.0</span></span><br><span class="line">zhaoliu   <span class="number">249.0</span>   <span class="number">16.0</span>  <span class="number">154.0</span>   <span class="number">37.0</span></span><br><span class="line">lisi         <span class="number">58.0</span></span><br><span class="line">tianqi      <span class="number">106.0</span></span><br><span class="line">wangwu      <span class="number">226.0</span></span><br><span class="line">zhangsan    <span class="number">189.0</span></span><br><span class="line">zhaoliu     <span class="number">249.0</span></span><br><span class="line">Name: 语文, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index/0代表行索引</span></span><br><span class="line">In [<span class="number">91</span>]: n1 = df3.add(ss,axis=<span class="string">'index'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: n2 = df3.add(ss,axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: n2</span><br><span class="line">Out[<span class="number">93</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi      <span class="number">116.0</span>  <span class="number">125.0</span>  <span class="number">154.0</span>  <span class="number">202.0</span></span><br><span class="line">tianqi    <span class="number">212.0</span>  <span class="number">226.0</span>  <span class="number">108.0</span>  <span class="number">195.0</span></span><br><span class="line">wangwu    <span class="number">452.0</span>  <span class="number">407.0</span>  <span class="number">315.0</span>  <span class="number">425.0</span></span><br><span class="line">zhangsan  <span class="number">378.0</span>  <span class="number">306.0</span>  <span class="number">218.0</span>  <span class="number">482.0</span></span><br><span class="line">zhaoliu   <span class="number">498.0</span>  <span class="number">265.0</span>  <span class="number">403.0</span>  <span class="number">286.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">94</span>]: ss1 = df3.loc[<span class="string">'zhangsan'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: display(df3,ss1)</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi       <span class="number">58.0</span>   <span class="number">67.0</span>   <span class="number">96.0</span>  <span class="number">144.0</span></span><br><span class="line">tianqi    <span class="number">106.0</span>  <span class="number">120.0</span>    <span class="number">2.0</span>   <span class="number">89.0</span></span><br><span class="line">wangwu    <span class="number">226.0</span>  <span class="number">181.0</span>   <span class="number">89.0</span>  <span class="number">199.0</span></span><br><span class="line">zhangsan  <span class="number">189.0</span>  <span class="number">117.0</span>   <span class="number">29.0</span>  <span class="number">293.0</span></span><br><span class="line">zhaoliu   <span class="number">249.0</span>   <span class="number">16.0</span>  <span class="number">154.0</span>   <span class="number">37.0</span></span><br><span class="line">语文    <span class="number">189.0</span></span><br><span class="line">数学    <span class="number">117.0</span></span><br><span class="line">英语     <span class="number">29.0</span></span><br><span class="line">理综    <span class="number">293.0</span></span><br><span class="line">Name: zhangsan, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">96</span>]: n3 = df3.add(ss1,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: n3</span><br><span class="line">Out[<span class="number">97</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi      <span class="number">247.0</span>  <span class="number">184.0</span>  <span class="number">125.0</span>  <span class="number">437.0</span></span><br><span class="line">tianqi    <span class="number">295.0</span>  <span class="number">237.0</span>   <span class="number">31.0</span>  <span class="number">382.0</span></span><br><span class="line">wangwu    <span class="number">415.0</span>  <span class="number">298.0</span>  <span class="number">118.0</span>  <span class="number">492.0</span></span><br><span class="line">zhangsan  <span class="number">378.0</span>  <span class="number">234.0</span>   <span class="number">58.0</span>  <span class="number">586.0</span></span><br><span class="line">zhaoliu   <span class="number">438.0</span>  <span class="number">133.0</span>  <span class="number">183.0</span>  <span class="number">330.0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Numpy基本用法</title>
      <link href="/Python/2018/10/26/Numpy%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/Python/2018/10/26/Numpy%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Numpy基本用法"><a href="#一、Numpy基本用法" class="headerlink" title="一、Numpy基本用法"></a>一、Numpy基本用法</h1><p><code>NumPy是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。Numpy内部解除了Python的PIL(全局解释器锁),运算效率极好,是大量机器学习框架的基础库!</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入numpy库，并查看numpy库版本</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: np.__version__</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'1.14.3'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用numpy+matplotlib处理图片</span></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: cat = plt.imread(<span class="string">'D:\myProject\Python\Jupyter\image\cat.jpg'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: type(cat)</span><br><span class="line">Out[<span class="number">9</span>]: numpy.ndarray</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: cat1 = cat <span class="number">-50</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#图片是一个三维数组，长、宽、颜色</span></span><br><span class="line">In [<span class="number">11</span>]: cat.shape</span><br><span class="line">Out[<span class="number">11</span>]: (<span class="number">333</span>, <span class="number">500</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: plt.imshow(cat1)</span><br><span class="line">Out[<span class="number">12</span>]: &lt;matplotlib.image.AxesImage at <span class="number">0x222924b0320</span>&gt;</span><br><span class="line">In [<span class="number">13</span>]: plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/cat1.png" alt=""></p><h1 id="二、Numpy创建数组"><a href="#二、Numpy创建数组" class="headerlink" title="二、Numpy创建数组"></a>二、Numpy创建数组</h1><h2 id="1-使用np-array-由python-list创建"><a href="#1-使用np-array-由python-list创建" class="headerlink" title="1.使用np.array()由python list创建"></a>1.使用np.array()由python list创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#创建列表</span></span><br><span class="line">In [<span class="number">15</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">#将列表转换为数组</span></span><br><span class="line">In [<span class="number">16</span>]: b = np.array(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: b</span><br><span class="line">Out[<span class="number">17</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="2-使用np的routines函数创建"><a href="#2-使用np的routines函数创建" class="headerlink" title="2.使用np的routines函数创建"></a>2.使用np的routines函数创建</h2><h3 id="2-1-np-ones"><a href="#2-1-np-ones" class="headerlink" title="2.1 np.ones()"></a>2.1 np.ones()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、np.ones(shape, dtype=None, order='C')</span></span><br><span class="line">In [<span class="number">18</span>]: np.ones(shape = (<span class="number">10</span>,<span class="number">8</span>),dtype= int)</span><br><span class="line">Out[<span class="number">18</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: ones = np.ones(shape=(<span class="number">100</span>,<span class="number">90</span>,<span class="number">4</span>),dtype=int)</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: plt.imshow(ones)</span><br><span class="line">    ...: plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_13_0.png" alt=""></p><h3 id="2-2-zeros"><a href="#2-2-zeros" class="headerlink" title="2.2 zeros()"></a>2.2 zeros()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、zeros(shape, dtype=float, order='C')</span></span><br><span class="line">In [<span class="number">21</span>]: np.zeros((<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-3-np-full"><a href="#2-3-np-full" class="headerlink" title="2.3 np.full()"></a>2.3 np.full()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、 np.full(shape, fill_value, dtype=None, order='C')</span></span><br><span class="line">In [<span class="number">22</span>]: np.full((<span class="number">10</span>,<span class="number">10</span>),fill_value=<span class="number">20</span>)</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">array([[<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-4-np-eye"><a href="#2-4-np-eye" class="headerlink" title="2.4 np.eye()"></a>2.4 np.eye()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4、np.eye(N, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C')</span></span><br><span class="line"><span class="comment">#对角线位1，其他位置位0</span></span><br><span class="line">In [<span class="number">23</span>]: np.eye(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-5-np-linspace"><a href="#2-5-np-linspace" class="headerlink" title="2.5 np.linspace()"></a>2.5 np.linspace()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5、np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line"><span class="comment">#lin = linear 线性</span></span><br><span class="line">In [<span class="number">24</span>]: np.linspace(<span class="number">1</span>,<span class="number">100</span>,<span class="number">20</span>)</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">array([  <span class="number">1.</span>        ,   <span class="number">6.21052632</span>,  <span class="number">11.42105263</span>,  <span class="number">16.63157895</span>,</span><br><span class="line">        <span class="number">21.84210526</span>,  <span class="number">27.05263158</span>,  <span class="number">32.26315789</span>,  <span class="number">37.47368421</span>,</span><br><span class="line">        <span class="number">42.68421053</span>,  <span class="number">47.89473684</span>,  <span class="number">53.10526316</span>,  <span class="number">58.31578947</span>,</span><br><span class="line">        <span class="number">63.52631579</span>,  <span class="number">68.73684211</span>,  <span class="number">73.94736842</span>,  <span class="number">79.15789474</span>,</span><br><span class="line">        <span class="number">84.36842105</span>,  <span class="number">89.57894737</span>,  <span class="number">94.78947368</span>, <span class="number">100.</span>        ])</span><br></pre></td></tr></table></figure><h3 id="2-6-arange"><a href="#2-6-arange" class="headerlink" title="2.6 arange()"></a>2.6 arange()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6、arange([start,] stop[, step,], dtype=None)</span></span><br><span class="line">In [<span class="number">25</span>]: np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">25</span>]: array([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure><h3 id="2-7-randint"><a href="#2-7-randint" class="headerlink" title="2.7 randint()"></a>2.7 randint()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7、randint(low, high=None, size=None, dtype='l')</span></span><br><span class="line">In [<span class="number">26</span>]: np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size = <span class="number">10</span>)</span><br><span class="line">Out[<span class="number">26</span>]: array([<span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>])</span><br></pre></td></tr></table></figure><h3 id="2-8-randn-正太分布"><a href="#2-8-randn-正太分布" class="headerlink" title="2.8 randn()  正太分布"></a>2.8 randn()  正太分布</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8、randn(d0, d1, ..., dn)  正太分布</span></span><br><span class="line">In [<span class="number">27</span>]: np.random.randn(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">array([[ <span class="number">1.05035386</span>,  <span class="number">0.77231903</span>, <span class="number">-0.33446991</span>, <span class="number">-0.54562315</span>, <span class="number">-0.84341866</span>],</span><br><span class="line">       [ <span class="number">0.6616944</span> ,  <span class="number">0.89325969</span>, <span class="number">-0.89042489</span>,  <span class="number">1.61227272</span>, <span class="number">-0.05136764</span>],</span><br><span class="line">       [<span class="number">-0.5346068</span> , <span class="number">-2.39236557</span>, <span class="number">-0.54563468</span>, <span class="number">-1.07850467</span>,  <span class="number">0.56603284</span>],</span><br><span class="line">       [<span class="number">-0.33361988</span>,  <span class="number">1.11445864</span>, <span class="number">-0.11636709</span>,  <span class="number">0.57361067</span>,  <span class="number">0.80099792</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-9-normal-正太分布"><a href="#2-9-normal-正太分布" class="headerlink" title="2.9 normal() 正太分布"></a>2.9 normal() 正太分布</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9、normal(loc=0.0, scale=1.0, size=None) 正太分布</span></span><br><span class="line">In [<span class="number">28</span>]: np.random.normal(loc=<span class="number">170</span>,scale=<span class="number">1</span>,size=<span class="number">20</span>)</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">array([<span class="number">168.56872023</span>, <span class="number">168.30641964</span>, <span class="number">169.98891802</span>, <span class="number">168.6781631</span> ,</span><br><span class="line">       <span class="number">169.63611345</span>, <span class="number">167.81502056</span>, <span class="number">169.69833366</span>, <span class="number">169.05166886</span>,</span><br><span class="line">       <span class="number">170.96688262</span>, <span class="number">168.30677654</span>, <span class="number">170.15970816</span>, <span class="number">169.59783795</span>,</span><br><span class="line">       <span class="number">170.77979873</span>, <span class="number">170.20138558</span>, <span class="number">169.75464312</span>, <span class="number">172.16309013</span>,</span><br><span class="line">       <span class="number">169.37900208</span>, <span class="number">171.23951841</span>, <span class="number">169.7903996</span> , <span class="number">168.62081606</span>])</span><br></pre></td></tr></table></figure><h3 id="2-10-random-sample-生成0到1的随机数"><a href="#2-10-random-sample-生成0到1的随机数" class="headerlink" title="2.10 random_sample() 生成0到1的随机数"></a>2.10 random_sample() 生成0到1的随机数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10、random_sample(size=None) 生成0到1的随机数</span></span><br><span class="line"><span class="comment">#np.random.random(size=20)</span></span><br><span class="line">In [<span class="number">29</span>]: r = np.random.random(size=(<span class="number">200</span>,<span class="number">100</span>,<span class="number">4</span>)) <span class="comment">#生成一张图片</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: plt.imshow(r)</span><br><span class="line">Out[<span class="number">30</span>]: &lt;matplotlib.image.AxesImage at <span class="number">0x22293b60dd8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_23_0.png" alt=""></p><h1 id="三、Numpy查看数组属性"><a href="#三、Numpy查看数组属性" class="headerlink" title="三、Numpy查看数组属性"></a>三、Numpy查看数组属性</h1><h2 id="1-数组元素个数"><a href="#1-数组元素个数" class="headerlink" title="1.数组元素个数"></a>1.数组元素个数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: b</span><br><span class="line">Out[<span class="number">33</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: b.size</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="2-数组形状"><a href="#2-数组形状" class="headerlink" title="2.数组形状"></a>2.数组形状</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: b.shape</span><br><span class="line">Out[<span class="number">35</span>]: (<span class="number">5</span>,)</span><br></pre></td></tr></table></figure><h2 id="3-数组维度"><a href="#3-数组维度" class="headerlink" title="3.数组维度"></a>3.数组维度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: b.ndim</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-数组元素类型"><a href="#4-数组元素类型" class="headerlink" title="4.数组元素类型"></a>4.数组元素类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: b.dtype</span><br><span class="line">Out[<span class="number">37</span>]: dtype(<span class="string">'int32'</span>)</span><br></pre></td></tr></table></figure><h1 id="四、数组的基本操作"><a href="#四、数组的基本操作" class="headerlink" title="四、数组的基本操作"></a>四、数组的基本操作</h1><h2 id="1-索引"><a href="#1-索引" class="headerlink" title="1.索引"></a>1.索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: array1 = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,(<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: array1</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line">array([[<span class="number">85</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">92</span>],</span><br><span class="line">       [<span class="number">42</span>, <span class="number">49</span>, <span class="number">76</span>, <span class="number">85</span>],</span><br><span class="line">       [<span class="number">42</span>,  <span class="number">1</span>, <span class="number">80</span>, <span class="number">99</span>],</span><br><span class="line">       [<span class="number">33</span>, <span class="number">91</span>, <span class="number">74</span>, <span class="number">95</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: array1[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">41</span>]: <span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="2-切片"><a href="#2-切片" class="headerlink" title="2.切片"></a>2.切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切片时，左闭右开</span></span><br><span class="line">In [<span class="number">42</span>]: array1[<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">array([[<span class="number">76</span>, <span class="number">85</span>],</span><br><span class="line">       [<span class="number">80</span>, <span class="number">99</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: array2 = np.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: array2</span><br><span class="line">Out[<span class="number">44</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将数组反转</span></span><br><span class="line">In [<span class="number">45</span>]: array2[::<span class="number">-1</span>]</span><br><span class="line">Out[<span class="number">45</span>]: array([<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过两个：：进行切片</span></span><br><span class="line">In [<span class="number">46</span>]: print(array2[::<span class="number">2</span>])</span><br><span class="line">[<span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: print(array2[::<span class="number">-2</span>])</span><br><span class="line">[<span class="number">9</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="3-变形"><a href="#3-变形" class="headerlink" title="3.变形"></a>3.变形</h2><ul><li>使用reshape函数，注意参数用tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: n = np.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: n</span><br><span class="line">Out[<span class="number">50</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: n.shape</span><br><span class="line">Out[<span class="number">51</span>]: (<span class="number">10</span>,)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用reshape函数进行变形</span></span><br><span class="line">In [<span class="number">52</span>]: n.reshape((<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line">Out[<span class="number">52</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: n1 = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: n1</span><br><span class="line">Out[<span class="number">54</span>]:</span><br><span class="line">array([[[<span class="number">48</span>,  <span class="number">8</span>,  <span class="number">2</span>, <span class="number">35</span>, <span class="number">65</span>],</span><br><span class="line">        [<span class="number">81</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">76</span>],</span><br><span class="line">        [<span class="number">94</span>, <span class="number">65</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">78</span>],</span><br><span class="line">        [<span class="number">48</span>, <span class="number">57</span>,  <span class="number">7</span>,  <span class="number">3</span>, <span class="number">63</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">56</span>, <span class="number">27</span>,  <span class="number">4</span>, <span class="number">21</span>, <span class="number">28</span>],</span><br><span class="line">        [<span class="number">92</span>, <span class="number">10</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">82</span>],</span><br><span class="line">        [<span class="number">88</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">76</span>, <span class="number">99</span>],</span><br><span class="line">        [<span class="number">49</span>,  <span class="number">6</span>, <span class="number">39</span>, <span class="number">21</span>, <span class="number">50</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">84</span>, <span class="number">87</span>, <span class="number">65</span>, <span class="number">15</span>, <span class="number">52</span>],</span><br><span class="line">        [<span class="number">94</span>, <span class="number">44</span>, <span class="number">40</span>,  <span class="number">2</span>, <span class="number">94</span>],</span><br><span class="line">        [ <span class="number">7</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">18</span>, <span class="number">94</span>],</span><br><span class="line">        [<span class="number">94</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">54</span>,  <span class="number">6</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: n1.shape</span><br><span class="line">Out[<span class="number">55</span>]: (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: n1.reshape(<span class="number">3</span>*<span class="number">4</span>*<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">56</span>]:</span><br><span class="line">array([<span class="number">48</span>,  <span class="number">8</span>,  <span class="number">2</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">76</span>, <span class="number">94</span>, <span class="number">65</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">78</span>, <span class="number">48</span>, <span class="number">57</span>,</span><br><span class="line">        <span class="number">7</span>,  <span class="number">3</span>, <span class="number">63</span>, <span class="number">56</span>, <span class="number">27</span>,  <span class="number">4</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">92</span>, <span class="number">10</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">82</span>, <span class="number">88</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">76</span>,</span><br><span class="line">       <span class="number">99</span>, <span class="number">49</span>,  <span class="number">6</span>, <span class="number">39</span>, <span class="number">21</span>, <span class="number">50</span>, <span class="number">84</span>, <span class="number">87</span>, <span class="number">65</span>, <span class="number">15</span>, <span class="number">52</span>, <span class="number">94</span>, <span class="number">44</span>, <span class="number">40</span>,  <span class="number">2</span>, <span class="number">94</span>,  <span class="number">7</span>,</span><br><span class="line">       <span class="number">90</span>, <span class="number">78</span>, <span class="number">18</span>, <span class="number">94</span>, <span class="number">94</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">54</span>,  <span class="number">6</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用负数直接转换成一维数组</span></span><br><span class="line">In [<span class="number">57</span>]: n1.reshape(<span class="number">-1</span>)</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line">array([<span class="number">48</span>,  <span class="number">8</span>,  <span class="number">2</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">76</span>, <span class="number">94</span>, <span class="number">65</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">78</span>, <span class="number">48</span>, <span class="number">57</span>,</span><br><span class="line">        <span class="number">7</span>,  <span class="number">3</span>, <span class="number">63</span>, <span class="number">56</span>, <span class="number">27</span>,  <span class="number">4</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">92</span>, <span class="number">10</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">82</span>, <span class="number">88</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">76</span>,</span><br><span class="line">       <span class="number">99</span>, <span class="number">49</span>,  <span class="number">6</span>, <span class="number">39</span>, <span class="number">21</span>, <span class="number">50</span>, <span class="number">84</span>, <span class="number">87</span>, <span class="number">65</span>, <span class="number">15</span>, <span class="number">52</span>, <span class="number">94</span>, <span class="number">44</span>, <span class="number">40</span>,  <span class="number">2</span>, <span class="number">94</span>,  <span class="number">7</span>,</span><br><span class="line">       <span class="number">90</span>, <span class="number">78</span>, <span class="number">18</span>, <span class="number">94</span>, <span class="number">94</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">54</span>,  <span class="number">6</span>])</span><br></pre></td></tr></table></figure><h2 id="4-级联"><a href="#4-级联" class="headerlink" title="4.级联"></a>4.级联</h2><ul><li>np.concatenate()级联需要注意的点：<ul><li>1.级联的参数是列表：一定要加中括号或小括号</li><li>2.维度必须相同</li><li>3.形状相符</li><li>4.【重点】级联的方向默认是shape这个tuple的第一个值所代表的维度方向</li><li>5.可通过axis参数改变级联的方向</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: n1 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: n1</span><br><span class="line">Out[<span class="number">60</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment">#列级联</span></span><br><span class="line">In [<span class="number">61</span>]: np.concatenate((n1,n1),axis = <span class="number">0</span>)</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment">#行级联</span></span><br><span class="line">In [<span class="number">62</span>]: np.concatenate((n1,n1),axis = <span class="number">1</span>)</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><h3 id="np-hstack与np-vstack"><a href="#np-hstack与np-vstack" class="headerlink" title="np.hstack与np.vstack"></a>np.hstack与np.vstack</h3><ul><li>水平级联与垂直级联，处理自己。进行维度的变更</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: n2 = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: n2</span><br><span class="line">Out[<span class="number">64</span>]: array([<span class="number">73</span>, <span class="number">65</span>, <span class="number">92</span>, <span class="number">23</span>, <span class="number">32</span>, <span class="number">47</span>, <span class="number">78</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">37</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vertical 垂直</span></span><br><span class="line">In [<span class="number">65</span>]: n3 = np.vstack(n2) </span><br><span class="line">                            </span><br><span class="line">In [<span class="number">66</span>]: print(n3.shape)    </span><br><span class="line">(<span class="number">10</span>, <span class="number">1</span>)                     </span><br><span class="line">                            </span><br><span class="line">In [<span class="number">67</span>]: n3                 </span><br><span class="line">Out[<span class="number">67</span>]:                    </span><br><span class="line">array([[<span class="number">73</span>],                </span><br><span class="line">       [<span class="number">65</span>],                </span><br><span class="line">       [<span class="number">92</span>],                </span><br><span class="line">       [<span class="number">23</span>],                </span><br><span class="line">       [<span class="number">32</span>],                </span><br><span class="line">       [<span class="number">47</span>],                </span><br><span class="line">       [<span class="number">78</span>],                </span><br><span class="line">       [<span class="number">83</span>],                </span><br><span class="line">       [<span class="number">97</span>],                </span><br><span class="line">       [<span class="number">37</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 水平</span></span><br><span class="line">In [<span class="number">68</span>]: n4 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: n4</span><br><span class="line">Out[<span class="number">69</span>]: array([list([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), list([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])], dtype=object)</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: np.hstack(n4)</span><br><span class="line">Out[<span class="number">70</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">71</span>]: np.hstack(n3)</span><br><span class="line">Out[<span class="number">71</span>]: array([<span class="number">73</span>, <span class="number">65</span>, <span class="number">92</span>, <span class="number">23</span>, <span class="number">32</span>, <span class="number">47</span>, <span class="number">78</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">37</span>])</span><br></pre></td></tr></table></figure><h2 id="5-切分"><a href="#5-切分" class="headerlink" title="5.切分"></a>5.切分</h2><ul><li>与级联类似，常用函数：<ul><li>np.split</li><li>np.vsplit</li><li>np.hsplit</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">72</span>]: n5 = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: n5</span><br><span class="line">Out[<span class="number">73</span>]:</span><br><span class="line">array([[<span class="number">122</span>, <span class="number">102</span>,  <span class="number">37</span>,  <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>],</span><br><span class="line">       [ <span class="number">48</span>,  <span class="number">84</span>,  <span class="number">27</span>, <span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">       [ <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>],</span><br><span class="line">       [ <span class="number">96</span>,  <span class="number">23</span>,  <span class="number">72</span>,  <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">       [<span class="number">120</span>,  <span class="number">31</span>, <span class="number">104</span>, <span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: np.split(n5,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">Out[<span class="number">74</span>]:</span><br><span class="line">[array([[<span class="number">122</span>, <span class="number">102</span>,  <span class="number">37</span>,  <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>]]),</span><br><span class="line"> array([[ <span class="number">48</span>,  <span class="number">84</span>,  <span class="number">27</span>, <span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">        [ <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>]]),</span><br><span class="line"> array([[ <span class="number">96</span>,  <span class="number">23</span>,  <span class="number">72</span>,  <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">        [<span class="number">120</span>,  <span class="number">31</span>, <span class="number">104</span>, <span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#水平切分，即按行进行切分</span></span><br><span class="line">In [<span class="number">75</span>]: np.split(n5,(<span class="number">1</span>,<span class="number">3</span>),axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">75</span>]:</span><br><span class="line">[array([[<span class="number">122</span>],</span><br><span class="line">        [ <span class="number">48</span>],</span><br><span class="line">        [ <span class="number">17</span>],</span><br><span class="line">        [ <span class="number">96</span>],</span><br><span class="line">        [<span class="number">120</span>]]), array([[<span class="number">102</span>,  <span class="number">37</span>],</span><br><span class="line">        [ <span class="number">84</span>,  <span class="number">27</span>],</span><br><span class="line">        [<span class="number">125</span>, <span class="number">142</span>],</span><br><span class="line">        [ <span class="number">23</span>,  <span class="number">72</span>],</span><br><span class="line">        [ <span class="number">31</span>, <span class="number">104</span>]]), array([[ <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>],</span><br><span class="line">        [<span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">        [<span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>],</span><br><span class="line">        [ <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">        [<span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: np.split(n5,(<span class="number">1</span>,<span class="number">3</span>))[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">76</span>]:</span><br><span class="line">array([[ <span class="number">48</span>,  <span class="number">84</span>,  <span class="number">27</span>, <span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">       [ <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">81</span>]: cat.shape</span><br><span class="line">Out[<span class="number">81</span>]: (<span class="number">333</span>, <span class="number">500</span>, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">In [<span class="number">77</span>]: <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: cat1 = np.split(cat,(<span class="number">100</span>,<span class="number">200</span>))[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: plt.imshow(cat1)</span><br><span class="line">Out[<span class="number">79</span>]: &lt;matplotlib.image.AxesImage at <span class="number">0x22293e9b978</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_24_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#垂直切分</span></span><br><span class="line">In [<span class="number">82</span>]: np.vsplit(n5,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">Out[<span class="number">82</span>]:</span><br><span class="line">[array([[<span class="number">122</span>, <span class="number">102</span>,  <span class="number">37</span>,  <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>]]),</span><br><span class="line"> array([[ <span class="number">48</span>,  <span class="number">84</span>,  <span class="number">27</span>, <span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">        [ <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>]]),</span><br><span class="line"> array([[ <span class="number">96</span>,  <span class="number">23</span>,  <span class="number">72</span>,  <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">        [<span class="number">120</span>,  <span class="number">31</span>, <span class="number">104</span>, <span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#水平切分</span></span><br><span class="line">In [<span class="number">83</span>]: np.hsplit(n5,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">[array([[<span class="number">122</span>],</span><br><span class="line">        [ <span class="number">48</span>],</span><br><span class="line">        [ <span class="number">17</span>],</span><br><span class="line">        [ <span class="number">96</span>],</span><br><span class="line">        [<span class="number">120</span>]]), array([[<span class="number">102</span>,  <span class="number">37</span>],</span><br><span class="line">        [ <span class="number">84</span>,  <span class="number">27</span>],</span><br><span class="line">        [<span class="number">125</span>, <span class="number">142</span>],</span><br><span class="line">        [ <span class="number">23</span>,  <span class="number">72</span>],</span><br><span class="line">        [ <span class="number">31</span>, <span class="number">104</span>]]), array([[ <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>],</span><br><span class="line">        [<span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">        [<span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>],</span><br><span class="line">        [ <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">        [<span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])]</span><br></pre></td></tr></table></figure><h2 id="6-副本"><a href="#6-副本" class="headerlink" title="6.副本"></a>6.副本</h2><ul><li>所有赋值运算不会为ndarray的任何元素创建副本，对赋值后的对象的操作也对原来的对象生效。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: a = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: n = np.array(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: n</span><br><span class="line">Out[<span class="number">86</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">87</span>]: n[<span class="number">2</span>] = <span class="number">512</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: n</span><br><span class="line">Out[<span class="number">88</span>]: array([  <span class="number">0</span>,   <span class="number">1</span>, <span class="number">512</span>,   <span class="number">3</span>,   <span class="number">4</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当数据是ndarray,用=赋值，内存没有改变</span></span><br><span class="line">In [<span class="number">89</span>]: n2 = n</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: n2[<span class="number">2</span>] = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">91</span>]: display(n,n2)</span><br><span class="line">array([   <span class="number">0</span>,    <span class="number">1</span>, <span class="number">1024</span>,    <span class="number">3</span>,    <span class="number">4</span>])</span><br><span class="line">array([   <span class="number">0</span>,    <span class="number">1</span>, <span class="number">1024</span>,    <span class="number">3</span>,    <span class="number">4</span>])</span><br></pre></td></tr></table></figure><ul><li>使用copy()函数创建副本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">92</span>]: n3 = n.copy()</span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: n3</span><br><span class="line">Out[<span class="number">93</span>]: array([   <span class="number">0</span>,    <span class="number">1</span>, <span class="number">1024</span>,    <span class="number">3</span>,    <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: n3[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: display(n,n3)</span><br><span class="line">array([   <span class="number">0</span>,    <span class="number">1</span>, <span class="number">1024</span>,    <span class="number">3</span>,    <span class="number">4</span>])</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h1 id="五、Numpy计算"><a href="#五、Numpy计算" class="headerlink" title="五、Numpy计算"></a>五、Numpy计算</h1><h2 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h2><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/student_data.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 条件判断</span></span><br><span class="line">In [<span class="number">97</span>]: stus_score = np.array([[<span class="number">80</span>,<span class="number">88</span>],[<span class="number">82</span>,<span class="number">81</span>],[<span class="number">84</span>,<span class="number">75</span>],[<span class="number">86</span>,<span class="number">83</span>],[<span class="number">75</span>,<span class="number">81</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: stus_score &gt; <span class="number">80</span></span><br><span class="line">Out[<span class="number">98</span>]:</span><br><span class="line">array([[<span class="keyword">False</span>,  <span class="keyword">True</span>],</span><br><span class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>],</span><br><span class="line">       [ <span class="keyword">True</span>, <span class="keyword">False</span>],</span><br><span class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>],</span><br><span class="line">       [<span class="keyword">False</span>,  <span class="keyword">True</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三目运算（如果数值小于80，替换为0，如果大于80，替换为90）</span></span><br><span class="line">In [<span class="number">100</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: np.where(stus_score &lt; <span class="number">80</span>, <span class="number">0</span>, <span class="number">90</span>)</span><br><span class="line">Out[<span class="number">101</span>]:</span><br><span class="line">array([[<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">       [<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">       [<span class="number">90</span>,  <span class="number">0</span>],</span><br><span class="line">       [<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">       [ <span class="number">0</span>, <span class="number">90</span>]])</span><br></pre></td></tr></table></figure><h2 id="统计运算"><a href="#统计运算" class="headerlink" title="统计运算"></a>统计运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴最大值amax(参数1: 数组; 参数2: axis=0/1; 0表示列1表示行)</span></span><br><span class="line">stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"><span class="comment"># 求每一列的最大值(0表示列)</span></span><br><span class="line">In [<span class="number">106</span>]: print(<span class="string">"每一行的最大值为:"</span>)</span><br><span class="line">每一行的最大值为:</span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: print(<span class="string">"每一列的最大值为:"</span>)</span><br><span class="line">     ...: result = np.amax(stus_score, axis=<span class="number">0</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...: print(<span class="string">"每一行的最大值为:"</span>)</span><br><span class="line">     ...: result = np.amax(stus_score, axis=<span class="number">1</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">每一列的最大值为:</span><br><span class="line">[<span class="number">86</span> <span class="number">88</span>]</span><br><span class="line">每一行的最大值为:</span><br><span class="line">[<span class="number">88</span> <span class="number">82</span> <span class="number">84</span> <span class="number">86</span> <span class="number">81</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴最大值amax(参数1: 数组; 参数2: axis=0/1/2;分别对应各个维度)</span></span><br><span class="line">In [<span class="number">108</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: n = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: n</span><br><span class="line">Out[<span class="number">110</span>]:</span><br><span class="line">array([[[ <span class="number">91</span>,  <span class="number">45</span>,  <span class="number">10</span>,  <span class="number">51</span>],</span><br><span class="line">        [<span class="number">102</span>,  <span class="number">88</span>, <span class="number">129</span>, <span class="number">100</span>],</span><br><span class="line">        [<span class="number">148</span>,  <span class="number">72</span>,  <span class="number">52</span>, <span class="number">114</span>],</span><br><span class="line">        [ <span class="number">99</span>,   <span class="number">5</span>,  <span class="number">67</span>,  <span class="number">26</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">23</span>, <span class="number">102</span>, <span class="number">125</span>, <span class="number">116</span>],</span><br><span class="line">        [<span class="number">140</span>,  <span class="number">61</span>, <span class="number">107</span>,  <span class="number">15</span>],</span><br><span class="line">        [ <span class="number">39</span>, <span class="number">125</span>, <span class="number">139</span>,  <span class="number">38</span>],</span><br><span class="line">        [ <span class="number">95</span>, <span class="number">148</span>, <span class="number">100</span>, <span class="number">109</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">92</span>,  <span class="number">68</span>, <span class="number">140</span>,  <span class="number">75</span>],</span><br><span class="line">        [ <span class="number">49</span>, <span class="number">113</span>,  <span class="number">68</span>,  <span class="number">70</span>],</span><br><span class="line">        [<span class="number">149</span>, <span class="number">107</span>,  <span class="number">78</span>,  <span class="number">69</span>],</span><br><span class="line">        [<span class="number">120</span>, <span class="number">109</span>,  <span class="number">27</span>, <span class="number">138</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">126</span>,  <span class="number">79</span>, <span class="number">113</span>,  <span class="number">89</span>],</span><br><span class="line">        [ <span class="number">29</span>, <span class="number">126</span>,   <span class="number">3</span>,  <span class="number">90</span>],</span><br><span class="line">        [ <span class="number">40</span>,  <span class="number">23</span>,  <span class="number">20</span>,  <span class="number">14</span>],</span><br><span class="line">        [ <span class="number">72</span>,  <span class="number">38</span>,  <span class="number">99</span>,  <span class="number">55</span>]]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">111</span>]: n.max(axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">111</span>]:</span><br><span class="line">array([[<span class="number">126</span>, <span class="number">102</span>, <span class="number">140</span>, <span class="number">116</span>],</span><br><span class="line">       [<span class="number">140</span>, <span class="number">126</span>, <span class="number">129</span>, <span class="number">100</span>],</span><br><span class="line">       [<span class="number">149</span>, <span class="number">125</span>, <span class="number">139</span>, <span class="number">114</span>],</span><br><span class="line">       [<span class="number">120</span>, <span class="number">148</span>, <span class="number">100</span>, <span class="number">138</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: n.max(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">112</span>]:</span><br><span class="line">array([[<span class="number">148</span>,  <span class="number">88</span>, <span class="number">129</span>, <span class="number">114</span>],</span><br><span class="line">       [<span class="number">140</span>, <span class="number">148</span>, <span class="number">139</span>, <span class="number">116</span>],</span><br><span class="line">       [<span class="number">149</span>, <span class="number">113</span>, <span class="number">140</span>, <span class="number">138</span>],</span><br><span class="line">       [<span class="number">126</span>, <span class="number">126</span>, <span class="number">113</span>,  <span class="number">90</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: n.max(axis=<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">113</span>]:</span><br><span class="line">array([[ <span class="number">91</span>, <span class="number">129</span>, <span class="number">148</span>,  <span class="number">99</span>],</span><br><span class="line">       [<span class="number">125</span>, <span class="number">140</span>, <span class="number">139</span>, <span class="number">148</span>],</span><br><span class="line">       [<span class="number">140</span>, <span class="number">113</span>, <span class="number">149</span>, <span class="number">138</span>],</span><br><span class="line">       [<span class="number">126</span>, <span class="number">126</span>,  <span class="number">40</span>,  <span class="number">99</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴最小值amin</span></span><br><span class="line">In [<span class="number">114</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"><span class="comment"># 求每一行的最小值(0表示列)</span></span><br><span class="line">In [<span class="number">115</span>]: print(<span class="string">"每一列的最小值为:"</span>)</span><br><span class="line">     ...: result = np.amin(stus_score, axis=<span class="number">0</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...: <span class="comment"># 求每一行的最小值(1表示行)</span></span><br><span class="line">     ...: print(<span class="string">"每一行的最小值为:"</span>)</span><br><span class="line">     ...: result = np.amin(stus_score, axis=<span class="number">1</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">每一列的最小值为:</span><br><span class="line">[<span class="number">75</span> <span class="number">75</span>]</span><br><span class="line">每一行的最小值为:</span><br><span class="line">[<span class="number">80</span> <span class="number">81</span> <span class="number">75</span> <span class="number">83</span> <span class="number">75</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴平均值mean</span></span><br><span class="line">In [<span class="number">116</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line">In [<span class="number">117</span>]: <span class="comment"># 求每一行的平均值(0表示列)</span></span><br><span class="line">     ...: print(<span class="string">"每一列的平均值:"</span>)</span><br><span class="line">     ...: result = np.mean(stus_score, axis=<span class="number">0</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...: <span class="comment"># 求每一行的平均值(1表示行)</span></span><br><span class="line">     ...: print(<span class="string">"每一行的平均值:"</span>)</span><br><span class="line">     ...: result = np.mean(stus_score, axis=<span class="number">1</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">每一列的平均值:</span><br><span class="line">[<span class="number">81.4</span> <span class="number">81.6</span>]</span><br><span class="line">每一行的平均值:</span><br><span class="line">[<span class="number">84.</span>  <span class="number">81.5</span> <span class="number">79.5</span> <span class="number">84.5</span> <span class="number">78.</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方差std</span></span><br><span class="line">In [<span class="number">118</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: <span class="comment"># 求每一行的方差(0表示列)</span></span><br><span class="line">     ...: print(<span class="string">"每一列的方差:"</span>)</span><br><span class="line">     ...: result = np.std(stus_score, axis=<span class="number">0</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...: <span class="comment"># 求每一行的方差(1表示行)</span></span><br><span class="line">     ...: print(<span class="string">"每一行的方差:"</span>)</span><br><span class="line">     ...: result = np.std(stus_score, axis=<span class="number">1</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">每一列的方差:</span><br><span class="line">[<span class="number">3.77359245</span> <span class="number">4.1761226</span> ]</span><br><span class="line">每一行的方差:</span><br><span class="line">[<span class="number">4.</span>  <span class="number">0.5</span> <span class="number">4.5</span> <span class="number">1.5</span> <span class="number">3.</span> ]</span><br></pre></td></tr></table></figure><h2 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组与数的运算</span></span><br><span class="line">In [<span class="number">120</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">122</span>]: print(<span class="string">"加之前："</span>)</span><br><span class="line">     ...: print(stus_score)</span><br><span class="line">     ...:</span><br><span class="line">     ...: <span class="comment">#为所有平时成绩都加5分</span></span><br><span class="line">     ...: stus_score[:,<span class="number">0</span>]=stus_score[:,<span class="number">0</span>]+<span class="number">5</span></span><br><span class="line">     ...: print(<span class="string">"加之后："</span>)</span><br><span class="line">     ...: print(stus_score)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">加之前：</span><br><span class="line">[[<span class="number">80</span> <span class="number">88</span>]</span><br><span class="line"> [<span class="number">82</span> <span class="number">81</span>]</span><br><span class="line"> [<span class="number">84</span> <span class="number">75</span>]</span><br><span class="line"> [<span class="number">86</span> <span class="number">83</span>]</span><br><span class="line"> [<span class="number">75</span> <span class="number">81</span>]]</span><br><span class="line">加之后：</span><br><span class="line">[[<span class="number">85</span> <span class="number">88</span>]</span><br><span class="line"> [<span class="number">87</span> <span class="number">81</span>]</span><br><span class="line"> [<span class="number">89</span> <span class="number">75</span>]</span><br><span class="line"> [<span class="number">91</span> <span class="number">83</span>]</span><br><span class="line"> [<span class="number">80</span> <span class="number">81</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组也支持加减乘除运算</span></span><br><span class="line">In [<span class="number">123</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">     ...: b = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">     ...: c = a + b</span><br><span class="line">     ...: d = a - b</span><br><span class="line">     ...: e = a * b</span><br><span class="line">     ...: f = a / b</span><br><span class="line">     ...: print(<span class="string">"a+b="</span>,c)</span><br><span class="line">     ...: print(<span class="string">"a-b="</span>,d)</span><br><span class="line">     ...: print(<span class="string">"a*b="</span>,e)</span><br><span class="line">     ...: print(<span class="string">"a/b="</span>,f)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">a+b= [<span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span>]</span><br><span class="line">a-b= [ <span class="number">-9</span> <span class="number">-18</span> <span class="number">-27</span> <span class="number">-36</span>]</span><br><span class="line">a*b= [ <span class="number">10</span>  <span class="number">40</span>  <span class="number">90</span> <span class="number">160</span>]</span><br><span class="line">a/b= [<span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span>]</span><br></pre></td></tr></table></figure><h2 id="矩阵运算np-dot"><a href="#矩阵运算np-dot" class="headerlink" title="矩阵运算np.dot()"></a>矩阵运算np.dot()</h2><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/根据权重计算成绩.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算规则(计算学生总成绩)</span></span><br><span class="line"><span class="comment">#（M行，N列）*（N行，Z列）=（M行，Z列）</span></span><br><span class="line">In [<span class="number">125</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line">     ...: <span class="comment">#平时成绩占40%,期末成绩占60%,计算结果</span></span><br><span class="line">     ...: q = np.array([[<span class="number">0.4</span>],[<span class="number">0.6</span>]])</span><br><span class="line">     ...: result = np.dot(stus_score,q)</span><br><span class="line">     ...: print(<span class="string">"最终结果为："</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">最终结果为：</span><br><span class="line">[[<span class="number">84.8</span>]</span><br><span class="line"> [<span class="number">81.4</span>]</span><br><span class="line"> [<span class="number">78.6</span>]</span><br><span class="line"> [<span class="number">84.2</span>]</span><br><span class="line"> [<span class="number">78.6</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵拼接</span></span><br><span class="line"><span class="comment">## 矩阵垂直拼接</span></span><br><span class="line">In [<span class="number">127</span>]: print(<span class="string">"v1为:"</span>)</span><br><span class="line">     ...: v1 = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">     ...:       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">     ...: print(v1)</span><br><span class="line">     ...: print(<span class="string">"v2为:"</span>)</span><br><span class="line">     ...: v2 = [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">     ...:       [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]</span><br><span class="line">     ...: print(v2)</span><br><span class="line">     ...:</span><br><span class="line">v1为:</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">v2为:</span><br><span class="line">[[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>], [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直拼接</span></span><br><span class="line">In [<span class="number">128</span>]: result = np.vstack((v1, v2))</span><br><span class="line">     ...: print(<span class="string">"v1和v2垂直拼接的结果为"</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">v1和v2垂直拼接的结果为</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵水平拼接</span></span><br><span class="line">In [<span class="number">129</span>]: print(<span class="string">"v1为:"</span>)</span><br><span class="line">     ...: v1 = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">     ...:       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">     ...: print(v1)</span><br><span class="line">     ...: print(<span class="string">"v2为:"</span>)</span><br><span class="line">     ...: v2 = [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">     ...:       [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]</span><br><span class="line">     ...: print(v2)</span><br><span class="line">     ...:</span><br><span class="line">v1为:</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">v2为:</span><br><span class="line">[[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>], [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直拼接</span></span><br><span class="line">In [<span class="number">130</span>]: result = np.hstack((v1, v2))</span><br><span class="line">     ...: print(<span class="string">"v1和v2水平拼接的结果为"</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">v1和v2水平拼接的结果为</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]</span><br></pre></td></tr></table></figure><h2 id="矩阵的广播"><a href="#矩阵的广播" class="headerlink" title="矩阵的广播"></a>矩阵的广播</h2><ul><li>ndarray广播的两条规则：<ul><li>规则一：为缺失的维度补1</li><li>规则二：假定缺失元素用已有值填充</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例1：m = np.ones((2,3)) a = np.arange(3)求m+a</span></span><br><span class="line">In [<span class="number">131</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: m = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">     ...: a = np.arange(<span class="number">3</span>)</span><br><span class="line">     ...: display(m,a)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#numpy广播，维度不同，自动补全</span></span><br><span class="line">In [<span class="number">133</span>]: m + a</span><br><span class="line">Out[<span class="number">133</span>]:</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例2：a = np.arange(3).reshape((3,1)) b = np.arange(3) 求a+b</span></span><br><span class="line">In [<span class="number">134</span>]: a = np.arange(<span class="number">3</span>).reshape((<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line">     ...: b = np.arange(<span class="number">3</span>)</span><br><span class="line">     ...: display(a,b)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">array([[<span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>]])</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">135</span>]: a + b</span><br><span class="line">Out[<span class="number">135</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><h1 id="六、排序"><a href="#六、排序" class="headerlink" title="六、排序"></a>六、排序</h1><h2 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h2><ul><li>np.sort()与ndarray.sort()，区别:<ul><li>np.sort()不改变输入</li><li>ndarray.sort()本地处理，不占用空间，改变输入</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">136</span>]: n1 = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: n1</span><br><span class="line">Out[<span class="number">137</span>]:</span><br><span class="line">array([ <span class="number">80</span>,  <span class="number">11</span>,  <span class="number">31</span>,  <span class="number">68</span>,  <span class="number">83</span>,  <span class="number">73</span>,  <span class="number">42</span>,   <span class="number">6</span>,  <span class="number">40</span>, <span class="number">125</span>, <span class="number">147</span>, <span class="number">147</span>,  <span class="number">88</span>,</span><br><span class="line">       <span class="number">117</span>,  <span class="number">85</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: n2 = n1.sort()</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: display(n1,n2)</span><br><span class="line">array([  <span class="number">6</span>,  <span class="number">11</span>,  <span class="number">31</span>,  <span class="number">40</span>,  <span class="number">42</span>,  <span class="number">68</span>,  <span class="number">73</span>,  <span class="number">80</span>,  <span class="number">83</span>,  <span class="number">85</span>,  <span class="number">88</span>, <span class="number">117</span>, <span class="number">125</span>,</span><br><span class="line">       <span class="number">147</span>, <span class="number">147</span>])</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">140</span>]: n3 = np.sort(n1)</span><br><span class="line">     ...: display(n1,n3)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">array([  <span class="number">6</span>,  <span class="number">11</span>,  <span class="number">31</span>,  <span class="number">40</span>,  <span class="number">42</span>,  <span class="number">68</span>,  <span class="number">73</span>,  <span class="number">80</span>,  <span class="number">83</span>,  <span class="number">85</span>,  <span class="number">88</span>, <span class="number">117</span>, <span class="number">125</span>,</span><br><span class="line">       <span class="number">147</span>, <span class="number">147</span>])</span><br><span class="line">array([  <span class="number">6</span>,  <span class="number">11</span>,  <span class="number">31</span>,  <span class="number">40</span>,  <span class="number">42</span>,  <span class="number">68</span>,  <span class="number">73</span>,  <span class="number">80</span>,  <span class="number">83</span>,  <span class="number">85</span>,  <span class="number">88</span>, <span class="number">117</span>, <span class="number">125</span>,</span><br><span class="line">       <span class="number">147</span>, <span class="number">147</span>])</span><br></pre></td></tr></table></figure><h2 id="2-部分排序"><a href="#2-部分排序" class="headerlink" title="2.部分排序"></a>2.部分排序</h2><ul><li>np.partition(a,k)<ul><li>当k为正时：我们想要得到最小的k个数</li><li>当k为负时：我们想要得到最大的k个数</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">141</span>]: n4 = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: n4</span><br><span class="line">Out[<span class="number">142</span>]:</span><br><span class="line">array([ <span class="number">37</span>,  <span class="number">74</span>,  <span class="number">41</span>,  <span class="number">53</span>,  <span class="number">31</span>,  <span class="number">11</span>,  <span class="number">23</span>, <span class="number">108</span>,  <span class="number">12</span>, <span class="number">128</span>,  <span class="number">27</span>,  <span class="number">88</span>,  <span class="number">74</span>,</span><br><span class="line">       <span class="number">114</span>,  <span class="number">97</span>, <span class="number">127</span>,  <span class="number">60</span>,  <span class="number">47</span>, <span class="number">130</span>, <span class="number">135</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">143</span>]: np.partition(n4,<span class="number">-5</span>)</span><br><span class="line">Out[<span class="number">143</span>]:</span><br><span class="line">array([ <span class="number">37</span>,  <span class="number">12</span>,  <span class="number">41</span>,  <span class="number">27</span>,  <span class="number">31</span>,  <span class="number">11</span>,  <span class="number">23</span>,  <span class="number">47</span>,  <span class="number">74</span>,  <span class="number">60</span>,  <span class="number">53</span>,  <span class="number">74</span>,  <span class="number">88</span>,</span><br><span class="line">        <span class="number">97</span>, <span class="number">108</span>, <span class="number">114</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">130</span>, <span class="number">135</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">144</span>]: np.partition(n4,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">144</span>]:</span><br><span class="line">array([ <span class="number">12</span>,  <span class="number">23</span>,  <span class="number">11</span>,  <span class="number">27</span>,  <span class="number">31</span>,  <span class="number">37</span>,  <span class="number">41</span>,  <span class="number">47</span>, <span class="number">108</span>,  <span class="number">74</span>,  <span class="number">53</span>,  <span class="number">88</span>,  <span class="number">74</span>,</span><br><span class="line">       <span class="number">114</span>,  <span class="number">97</span>, <span class="number">127</span>,  <span class="number">60</span>, <span class="number">128</span>, <span class="number">130</span>, <span class="number">135</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取数组中最大的k个数</span></span><br><span class="line">In [<span class="number">145</span>]: np.partition(n4,<span class="number">-2</span>)[<span class="number">-2</span>:]</span><br><span class="line">Out[<span class="number">145</span>]: array([<span class="number">130</span>, <span class="number">135</span>])</span><br></pre></td></tr></table></figure><h2 id="numpy案例"><a href="#numpy案例" class="headerlink" title="numpy案例"></a>numpy案例</h2><ul><li>使用numpy将图片进行翻转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dianxin = plt.imread(<span class="string">'./image/dianxin.jpg'</span>)</span><br><span class="line">plt.imshow(dianxin)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f47d25630&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_110_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将图片在竖直方向翻转</span></span><br><span class="line">dianxin1 = dianxin[::<span class="number">-1</span>]</span><br><span class="line">plt.imshow(dianxin1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f47b61278&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_111_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在水平方向翻转</span></span><br><span class="line">dianxin2 = dianxin[::,::<span class="number">-1</span>]</span><br><span class="line">plt.imshow(dianxin2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f48df3320&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_112_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 即在水平方向翻转又在垂直方向翻转</span></span><br><span class="line">dianxin3 = dianxin[::<span class="number">-1</span>,::<span class="number">-1</span>]</span><br><span class="line">plt.imshow(dianxin3)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f48e60a20&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_113_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改变图片颜色</span></span><br><span class="line">dianxin4 = dianxin[::,::,<span class="number">-2</span>]</span><br><span class="line">plt.imshow(dianxin4)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f47bb9400&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_114_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改图片，是图片模糊</span></span><br><span class="line">dianxin5 = dianxin[::<span class="number">3</span>,::<span class="number">3</span>]</span><br><span class="line">plt.imshow(dianxin5)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f47d3fd68&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_115_1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python数据分析 </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jupyter_notebook</title>
      <link href="/Python/2018/10/26/Jupyter-notebook/"/>
      <url>/Python/2018/10/26/Jupyter-notebook/</url>
      
        <content type="html"><![CDATA[<h1 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h1><ul><li>notebook是Jupyter项目的重要组件之一，它是一个代码、文本（有标记或无标记）、数据可视化或其它输出的交互式文档。Jupyter Notebook需要与内核互动，内核是Jupyter与其它编程语言的交互编程协议。Python的Jupyter内核是使用IPython。要启动Jupyter，在命令行中输入<code>jupyter notebook</code>:</li></ul><h2 id="一、IPython帮助文档"><a href="#一、IPython帮助文档" class="headerlink" title="一、IPython帮助文档"></a>一、IPython帮助文档</h2><h3 id="使用help"><a href="#使用help" class="headerlink" title="使用help()"></a>使用help()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用help()</span></span><br><span class="line"><span class="comment">## 通过以下命令获得帮助文档</span></span><br><span class="line"><span class="comment">#或者输入help（）执行程序再输入要查看的相应方法名</span></span><br><span class="line">In [<span class="number">1</span>]: help(len)</span><br><span class="line">Help on built-<span class="keyword">in</span> function len <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">len(obj, /)</span><br><span class="line">    Return the number of items <span class="keyword">in</span> a container.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: help(type)</span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">type</span> <span class="title">in</span> <span class="title">module</span> <span class="title">builtins</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">type</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">type</span><span class="params">(object_or_name, bases, dict)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">type</span><span class="params">(object)</span> -&gt; the object's type</span></span><br><span class="line"><span class="class"> |  type(name, bases, dict) -&gt; a new type</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  Methods defined here:</span></span><br><span class="line"> |</span><br><span class="line"> |  __call__(self, /, *args, **kwargs)</span><br><span class="line"> |      Call self <span class="keyword">as</span> a function.</span><br><span class="line"> |</span><br><span class="line"> |  __delattr__(self, name, /)</span><br><span class="line"> |      Implement delattr(self, name).</span><br><span class="line"> |</span><br><span class="line"> |  __dir__(...)</span><br><span class="line"> |      __dir__() -&gt; list</span><br><span class="line"> |      specialized __dir__ implementation <span class="keyword">for</span> types</span><br><span class="line"> |</span><br><span class="line"> |  __getattribute__(self, name, /)</span><br><span class="line"> |      Return getattr(self, name).</span><br><span class="line"> |</span><br><span class="line"> |  __init__(self, /, *args, **kwargs)</span><br><span class="line"> |      Initialize self.  See help(type(self)) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |</span><br><span class="line"> |  __instancecheck__(...)</span><br><span class="line"> |      __instancecheck__() -&gt; bool</span><br><span class="line"> |      check <span class="keyword">if</span> an object <span class="keyword">is</span> an instance</span><br><span class="line"> |</span><br><span class="line"> |  __new__(*args, **kwargs)</span><br><span class="line"> |      Create <span class="keyword">and</span> <span class="keyword">return</span> a new object.  See help(type) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |</span><br><span class="line"> |  __prepare__(...)</span><br><span class="line"> |      __prepare__() -&gt; dict</span><br><span class="line"> |      used to create the namespace <span class="keyword">for</span> the <span class="class"><span class="keyword">class</span> <span class="title">statement</span></span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__repr__</span><span class="params">(self, /)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">Return</span> <span class="title">repr</span><span class="params">(self)</span>.</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__setattr__</span><span class="params">(self, name, value, /)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">Implement</span> <span class="title">setattr</span><span class="params">(self, name, value)</span>.</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__sizeof__</span><span class="params">(...)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">__sizeof__</span><span class="params">()</span> -&gt; int</span></span><br><span class="line"><span class="class"> |      return memory consumption of the type object</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  __subclasscheck__(...)</span></span><br><span class="line"><span class="class"> |      __subclasscheck__() -&gt; bool</span></span><br><span class="line"><span class="class"> |      check if a class is a subclass</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  __subclasses__(...)</span></span><br><span class="line"><span class="class"> |      __subclasses__() -&gt; list of immediate subclasses</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  mro(...)</span></span><br><span class="line"><span class="class"> |      mro() -&gt; list</span></span><br><span class="line"><span class="class"> |      return a type's method resolution order</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  ----------------------------------------------------------------------</span></span><br><span class="line"><span class="class"> |  Data descriptors defined here:</span></span><br><span class="line"> |</span><br><span class="line"> |  __abstractmethods__</span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |</span><br><span class="line"> |  __text_signature__</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data <span class="keyword">and</span> other attributes defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __base__ = &lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;</span></span><br><span class="line"><span class="class"> |      <span class="title">The</span> <span class="title">most</span> <span class="title">base</span> <span class="title">type</span></span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"> |  __bases__ = (&lt;class 'object'&gt;,)</span><br><span class="line"> |</span><br><span class="line"> |  __basicsize__ = <span class="number">864</span></span><br><span class="line"> |</span><br><span class="line"> |  __dictoffset__ = <span class="number">264</span></span><br><span class="line"> |</span><br><span class="line"> |  __flags__ = <span class="number">-2146675712</span></span><br><span class="line"> |</span><br><span class="line"> |  __itemsize__ = <span class="number">40</span></span><br><span class="line"> |</span><br><span class="line"> |  __mro__ = (&lt;class 'type'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"> |</span><br><span class="line"> |  __weakrefoffset__ = <span class="number">368</span></span><br></pre></td></tr></table></figure><h3 id="使用？"><a href="#使用？" class="headerlink" title="使用？"></a>使用？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用？</span></span><br><span class="line">In [4]: len?</span><br><span class="line">Signature: len(obj, /)</span><br><span class="line">Docstring: Return the number of items <span class="keyword">in</span> a container.</span><br><span class="line">Type:      builtin_function_or_method</span><br></pre></td></tr></table></figure><h3 id="自省"><a href="#自省" class="headerlink" title="自省??"></a>自省??</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算1到100的数之和</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        sum += i</span><br><span class="line">    print(<span class="string">'sum = %d'</span> % sum)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_number??</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Signature: add_number(n)</span><br><span class="line">Source:   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算1到100的数之和</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        sum += i</span><br><span class="line">    print(<span class="string">'sum = %d'</span> % sum)</span><br><span class="line">File:      d:\myproject\python\jupyter\&lt;ipython-input<span class="number">-20</span>-ad8522950c02&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure><h3 id="tab自动补全"><a href="#tab自动补全" class="headerlink" title="tab自动补全"></a>tab自动补全</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/tab.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sc</span><br></pre></td></tr></table></figure><h2 id="二、IPython魔法指令"><a href="#二、IPython魔法指令" class="headerlink" title="二、IPython魔法指令"></a>二、IPython魔法指令</h2><h3 id="1、运行外部Python文件"><a href="#1、运行外部Python文件" class="headerlink" title="1、运行外部Python文件"></a>1、运行外部Python文件</h3><ul><li>%run *.py运行外部文件（默认是在当前目录）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建一个ipython_test.py文件，内容如下：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x + y) / z</span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">c = <span class="number">7.5</span></span><br><span class="line">result = f(a, b, c)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: %run ipython_test.py</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: result</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">1.4666666666666666</span></span><br><span class="line">In [<span class="number">10</span>]: a</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="2、加载外部python文件"><a href="#2、加载外部python文件" class="headerlink" title="2、加载外部python文件"></a>2、加载外部python文件</h3><ul><li>%load *.py加载外部文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: %load ipython_test.py</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="comment"># %load ipython_test.py</span></span><br><span class="line">    ...: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    ...:     <span class="keyword">return</span> (x + y) / z</span><br><span class="line">    ...: a = <span class="number">5</span></span><br><span class="line">    ...: b = <span class="number">6</span></span><br><span class="line">    ...: c = <span class="number">7.5</span></span><br><span class="line">    ...: result = f(a, b, c)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: result</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1.4666666666666666</span></span><br></pre></td></tr></table></figure><h3 id="3、运行计时"><a href="#3、运行计时" class="headerlink" title="3、运行计时"></a>3、运行计时</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>)]</span><br><span class="line">    ...: b = np.array(a)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算程序运行时间</span></span><br><span class="line">In [<span class="number">16</span>]: %time b * b</span><br><span class="line">Wall time: <span class="number">1</span> ms</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">array([   <span class="number">1</span>,    <span class="number">4</span>,    <span class="number">9</span>,   <span class="number">16</span>,   <span class="number">25</span>,   <span class="number">36</span>,   <span class="number">49</span>,   <span class="number">64</span>,   <span class="number">81</span>,  <span class="number">100</span>,  <span class="number">121</span>,</span><br><span class="line">        <span class="number">144</span>,  <span class="number">169</span>,  <span class="number">196</span>,  <span class="number">225</span>,  <span class="number">256</span>,  <span class="number">289</span>,  <span class="number">324</span>,  <span class="number">361</span>,  <span class="number">400</span>,  <span class="number">441</span>,  <span class="number">484</span>,</span><br><span class="line">        <span class="number">529</span>,  <span class="number">576</span>,  <span class="number">625</span>,  <span class="number">676</span>,  <span class="number">729</span>,  <span class="number">784</span>,  <span class="number">841</span>,  <span class="number">900</span>,  <span class="number">961</span>, <span class="number">1024</span>, <span class="number">1089</span>,</span><br><span class="line">       <span class="number">1156</span>, <span class="number">1225</span>, <span class="number">1296</span>, <span class="number">1369</span>, <span class="number">1444</span>, <span class="number">1521</span>, <span class="number">1600</span>, <span class="number">1681</span>, <span class="number">1764</span>, <span class="number">1849</span>, <span class="number">1936</span>,</span><br><span class="line">       <span class="number">2025</span>, <span class="number">2116</span>, <span class="number">2209</span>, <span class="number">2304</span>, <span class="number">2401</span>, <span class="number">2500</span>, <span class="number">2601</span>, <span class="number">2704</span>, <span class="number">2809</span>, <span class="number">2916</span>, <span class="number">3025</span>,</span><br><span class="line">       <span class="number">3136</span>, <span class="number">3249</span>, <span class="number">3364</span>, <span class="number">3481</span>, <span class="number">3600</span>, <span class="number">3721</span>, <span class="number">3844</span>, <span class="number">3969</span>, <span class="number">4096</span>, <span class="number">4225</span>, <span class="number">4356</span>,</span><br><span class="line">       <span class="number">4489</span>, <span class="number">4624</span>, <span class="number">4761</span>, <span class="number">4900</span>, <span class="number">5041</span>, <span class="number">5184</span>, <span class="number">5329</span>, <span class="number">5476</span>, <span class="number">5625</span>, <span class="number">5776</span>, <span class="number">5929</span>,</span><br><span class="line">       <span class="number">6084</span>, <span class="number">6241</span>, <span class="number">6400</span>, <span class="number">6561</span>, <span class="number">6724</span>, <span class="number">6889</span>, <span class="number">7056</span>, <span class="number">7225</span>, <span class="number">7396</span>, <span class="number">7569</span>, <span class="number">7744</span>,</span><br><span class="line">       <span class="number">7921</span>, <span class="number">8100</span>, <span class="number">8281</span>, <span class="number">8464</span>, <span class="number">8649</span>, <span class="number">8836</span>, <span class="number">9025</span>, <span class="number">9216</span>, <span class="number">9409</span>, <span class="number">9604</span>, <span class="number">9801</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算平均运行时间</span></span><br><span class="line">In [<span class="number">17</span>]: %timeit b * b</span><br><span class="line"><span class="number">678</span> ns ± <span class="number">118</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br></pre></td></tr></table></figure><h3 id="4、查看当前会话中的所有函数与变量"><a href="#4、查看当前会话中的所有函数与变量" class="headerlink" title="4、查看当前会话中的所有函数与变量"></a>4、查看当前会话中的所有函数与变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前会话中的所有变量与函数名称：</span></span><br><span class="line">In [<span class="number">18</span>]: %who</span><br><span class="line">a        add_number      b       c       f       np      result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前会话中的所有变量与函数名称的详细信息：</span></span><br><span class="line">In [<span class="number">19</span>]: %whos</span><br><span class="line">Variable     Type        Data/Info</span><br><span class="line">----------------------------------</span><br><span class="line">a            list        n=<span class="number">99</span></span><br><span class="line">add_number   function    &lt;function add_number at <span class="number">0x000002DBBF818D08</span>&gt;</span><br><span class="line">b            ndarray     <span class="number">99</span>: <span class="number">99</span> elems, type `int32`, <span class="number">396</span> bytes</span><br><span class="line">c            float       <span class="number">7.5</span></span><br><span class="line">f            function    &lt;function f at <span class="number">0x000002DBBF818BF8</span>&gt;</span><br><span class="line">np           module      &lt;module <span class="string">'numpy'</span> <span class="keyword">from</span> <span class="string">'F:\&lt;...&gt;ges\\numpy\\__init__.py'</span>&gt;</span><br><span class="line">result       float       <span class="number">1.4666666666666666</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回一个字符串列表，列表中的元素是当前会话中的所有变量和函数名：</span></span><br><span class="line">In [<span class="number">20</span>]: %who_ls</span><br><span class="line">Out[<span class="number">20</span>]: [<span class="string">'a'</span>, <span class="string">'add_number'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'np'</span>, <span class="string">'result'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: !ls</span><br><span class="line">douban_movie.csv</span><br><span class="line">emp.csv</span><br><span class="line">image</span><br><span class="line">ipython_test.py</span><br><span class="line">Jupyter Notebook.ipynb</span><br><span class="line">Numpy.ipynb</span><br><span class="line">Pandas绗旇��</span><br><span class="line">pydata</span><br><span class="line">Python楂樼骇鐗规��.ipynb</span><br><span class="line">Python鍑芥暟寮忕紪绋�.ipynb</span><br><span class="line">Python鍩虹��.ipynb</span><br><span class="line">Python鍩虹��-鍑芥暟.ipynb</span><br><span class="line">Python鍩虹��闆嗗悎.ipynb</span><br><span class="line">Python鍩虹��鍒楄〃.ipynb</span><br><span class="line">Python鍩虹��鍏冪粍.ipynb</span><br><span class="line">Python鍩虹��瀛楀吀.ipynb</span><br><span class="line">Python缁冧範棰�.ipynb</span><br><span class="line">tram.csv</span><br><span class="line">trans_result.xlsx</span><br><span class="line">Untitled.ipynb</span><br><span class="line">Untitled1.ipynb</span><br></pre></td></tr></table></figure><h3 id="5、列出所有魔法"><a href="#5、列出所有魔法" class="headerlink" title="5、列出所有魔法"></a>5、列出所有魔法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: %lsmagic</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">Available line magics:</span><br><span class="line">%alias  %alias_magic  %autocall  %autoindent  %automagic  %bookmark  %cd  %cls  %colors  %config  %copy  %cpaste  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %notebook  %page  %paste  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode</span><br><span class="line"></span><br><span class="line">Available cell magics:</span><br><span class="line">%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex</span><br><span class="line">%%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile</span><br><span class="line"></span><br><span class="line">Automagic <span class="keyword">is</span> ON, % prefix IS NOT needed <span class="keyword">for</span> line magics.</span><br></pre></td></tr></table></figure><h2 id="三、notebook快捷键"><a href="#三、notebook快捷键" class="headerlink" title="三、notebook快捷键"></a>三、notebook快捷键</h2><h3 id="1、命令模式"><a href="#1、命令模式" class="headerlink" title="1、命令模式"></a>1、命令模式</h3><ul><li>Enter:转入编辑模式</li><li>Shift-Enter:运行本单元，选中下个单元</li><li>Ctrl-Enter:运行本单元，选中下个单元</li><li>Alt-Enter:运行本单元，在下面插入一个单元</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2、Python解释器</title>
      <link href="/Python/2018/10/25/2%E3%80%81Python%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
      <url>/Python/2018/10/25/2%E3%80%81Python%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h1><ul><li>Linux/Unix的系统上，Python解释器通常被安装在/usr/local/bin/python3.x这样的有效路径（目录）里。</li><li>我们可以将路径/usr/local/bin添加到您的Linux/Unix操作系统的环境变量中，这样您就可通过shell 终端输入下面的命令来启动 Python 。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.x</span><br></pre></td></tr></table></figure><ul><li>在Windows系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在C:\Python36下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set path=%path%;C:\python36</span><br></pre></td></tr></table></figure><hr><h2 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h2><ul><li>我们可以在命令提示符中输入“Python”命令来启动Python解释器：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><ul><li>执行以上命令后，出现如下窗口信息：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.3</span> |Anaconda custom (<span class="number">64</span>-bit)| (default, Oct <span class="number">15</span> <span class="number">2017</span>, <span class="number">03</span>:<span class="number">27</span>:<span class="number">45</span>)</span><br><span class="line"><span class="number">1900</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>在python提示符中输入以下语句，然后按回车键查看运行效果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello Python!'</span>)</span><br></pre></td></tr></table></figure><ul><li>以上命令执行结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure><ul><li>当键入一个多行结构时，续行是必须的，我们可以看如下if语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>the_world_is_flat = <span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> the_world_is_flat:</span><br><span class="line"><span class="meta">... </span>   print(<span class="string">'Be careful not to fall off!'</span>)</span><br><span class="line">...</span><br><span class="line">Be careful <span class="keyword">not</span> to fall off!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h2><ul><li>将如下代码拷贝至hello.py文件中：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello Python!'</span>)</span><br></pre></td></tr></table></figure><ul><li>通过以下命令执行该脚本：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><ul><li>输出结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure><ul><li>在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以向SHELL脚本一样可直接执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3.6</span></span><br></pre></td></tr></table></figure><ul><li>然后修改脚本权限，使其有执行权限，命令如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">755</span> hello.py</span><br></pre></td></tr></table></figure><ul><li>执行以下命令：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.py</span><br></pre></td></tr></table></figure><ul><li>输出结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1、基本数据类型</title>
      <link href="/Python/2018/10/24/1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/Python/2018/10/24/1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>python的六个标准内置对象  <ul><li>数字             1234,3.1415,3+4j,Deciaml,Fraction</li><li>字符串           ‘spam’,”guido’s”</li><li>列表              [1,[2,’three’],4]</li><li>元组              (1,’spam’,4,’U’)</li><li>字典              {‘food’:’spam’,’taste’:’yum’}</li><li>集合              set(‘abc’),{‘a’,’b’,’c’}</li></ul></li></ul><h2 id="Numbers（数字）"><a href="#Numbers（数字）" class="headerlink" title="Numbers（数字）"></a>Numbers（数字）</h2><p>Python 3支持int、float、bool、complex（复数）。</p><ul><li>数值类型的赋值和计算都是很直观的，就像大多数语言一样。内置的type()函数可以用来查询变量所指的对象类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d = <span class="number">20</span>,<span class="number">5.5</span>,<span class="keyword">True</span>,<span class="number">3</span>+<span class="number">4j</span></span><br><span class="line">print(type(a),type(b),type(c),type(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt; &lt;<span class="title">class</span> '<span class="title">float</span>'&gt; &lt;<span class="title">class</span> '<span class="title">bool</span>'&gt; &lt;<span class="title">class</span> '<span class="title">complex</span>'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数值运算：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = 4+5     #加法</span><br><span class="line">b = 4.3-2   #减法</span><br><span class="line">c = 3*7     #乘法</span><br><span class="line">d = 2/4     #除法，得到一个浮点数</span><br><span class="line">e = 2//4    #除法，得到一个整数</span><br><span class="line">f = 17%3    #取余</span><br><span class="line">g = 2**5    #乘方</span><br><span class="line">print(a,b,c,d,e,f,g)</span><br><span class="line">9 2.3 21 0.5 0 2 32</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。</li><li>4、在混合计算时，Pyhton会把整型转换成为浮点数。</li></ul><hr><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><ul><li>Python中的字符串str用单引号(‘ ‘)或双引号(“ “)括起来，同时使用反斜杠()转义特殊字符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Yes,he doesn\'t'</span></span><br><span class="line">print(s,type(s),len(s))</span><br><span class="line">Yes,he doesn<span class="string">'t &lt;class '</span>st<span class="string">r'&gt; 14</span></span><br></pre></td></tr></table></figure><ul><li>如果不想让反斜杠发生转义，可以在字符串前面加r,表示原始字符串：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'C:\some\name'</span>)</span><br><span class="line">C:\some</span><br><span class="line">ame</span><br><span class="line">print(<span class="string">r'C:\some\name'</span>)</span><br><span class="line">C:\some\name</span><br></pre></td></tr></table></figure><p>另外，反斜杠可以作为换行符，表示下一行是上一行的延续。还可以使用”””…”””或者’’’…’’’跨越多行。</p><ul><li>字符串可以使用 + 运算符串连接在一起，或者用 * 运算符重复：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'str'</span>+<span class="string">'ing'</span>,<span class="string">'my'</span>*<span class="number">3</span>)</span><br><span class="line">string mymymy</span><br></pre></td></tr></table></figure><p>Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少。</p><ul><li>注意，没有单独的字符类型，一个字符就是长度为1的字符串。 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'Python'</span></span><br><span class="line">print(word[<span class="number">0</span>],word[<span class="number">5</span>])</span><br><span class="line">P n</span><br><span class="line"></span><br><span class="line">print(word[<span class="number">-1</span>],word[<span class="number">-6</span>])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><p>还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量[头下标:尾下标]。</p><ul><li>截取的范围是前闭后开的，并且两个索引都可以省略： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'ilovepython'</span></span><br><span class="line">a = word[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">b = word[:]</span><br><span class="line">c = word[<span class="number">5</span>:]</span><br><span class="line">d = word[<span class="number">-10</span>:<span class="number">-6</span>]</span><br><span class="line">print(a,b,c,d)</span><br><span class="line">love ilovepython python love</span><br></pre></td></tr></table></figure><p>与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。<br> <strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><hr><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><ul><li>列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'him'</span>,<span class="number">25</span>,<span class="number">100</span>,<span class="string">'her'</span>]</span><br><span class="line">print(a)</span><br><span class="line">[<span class="string">'him'</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="string">'her'</span>]</span><br></pre></td></tr></table></figure><p>和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。详细的在这里就不赘述了。</p><ul><li>列表还支持串联操作，使用+操作符： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a + [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure><ul><li>与Python字符串不一样的是，列表中的元素是可以改变的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line">a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>]=[]    <span class="comment">#删除</span></span><br><span class="line">a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>List内置类很多方法，例如append()、pop()等等，在后面会讲到。<br> <strong>注意:</strong></p><ul><li>1、List写在中括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><hr><h2 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple(元组)"></a>Tuple(元组)</h2><p>元组（Tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。</p><ul><li>元组中的元素类型也可以不相同：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1992</span>,<span class="number">2018</span>,<span class="string">'physics'</span>,<span class="string">'math'</span>)</span><br><span class="line">print(a,type(a),len(a))</span><br><span class="line">(<span class="number">1992</span>, <span class="number">2018</span>, <span class="string">'physics'</span>, <span class="string">'math'</span>) &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt; 4</span></span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片。</p><ul><li>其实，可以把字符串看做一种特殊的元组：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(tup[<span class="number">0</span>],tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">tup[<span class="number">0</span>]= <span class="number">11</span>      <span class="comment">#修改元组元素的操作是非法的(不可修改)</span></span><br><span class="line"><span class="number">1</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><ul><li>构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()       <span class="comment">#空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,)    <span class="comment">#一个元组，需要在元素后面添加逗号</span></span><br><span class="line">print(tup1,tup2)</span><br><span class="line">() (<span class="number">20</span>,)</span><br></pre></td></tr></table></figure><ul><li>另外，元组也支持用+操作符：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup1,tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(tup1+tup2)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li>string、list和tuple都属于sequence(序列)。</li></ul><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法和列表一样。</li><li>3、注意构造包含0或1个元素的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><hr><h2 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a>Sets（集合）</h2><ul><li>集合（set）是一个无序不重复元素的集。</li><li><code>基本功能是进行成员关系测试和消除重复元素。</code></li><li>可以使用大括号或者set()函数创建set集合，注意：创建一个空集合必须用set()而不是 { }，因为{ }是用来创建一个空字典。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;<span class="string">'Tom'</span>,<span class="string">'Jim'</span>,<span class="string">'Mary'</span>,<span class="string">'Tom'</span>,<span class="string">'Jack'</span>,<span class="string">'Rose'</span>&#125;</span><br><span class="line">print(student)      <span class="comment">#重复的元素被自动去掉</span></span><br><span class="line">&#123;<span class="string">'Tom'</span>, <span class="string">'Rose'</span>, <span class="string">'Mary'</span>, <span class="string">'Jack'</span>, <span class="string">'Jim'</span>&#125;</span><br><span class="line"><span class="string">'Rose'</span> <span class="keyword">in</span> student   <span class="comment">#membership testing(成员测试)</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">a</span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line"></span><br><span class="line">a - b   <span class="comment">#a和b的差集</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line"></span><br><span class="line">a | b   <span class="comment">#a和b的并集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line"></span><br><span class="line">a &amp; b   <span class="comment">#a和b的交集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line">a ^ b   <span class="comment">#a和b中不同时存在的元素</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Dictionaries（字典）"><a href="#Dictionaries（字典）" class="headerlink" title="Dictionaries（字典）"></a>Dictionaries（字典）</h2><ul><li>字典（dictionaries）是Python中另一个非常有用的内置数据类型。</li><li>字典是一种映射类型（mapping type），它是一个无序的键：值对集合。</li><li>关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。</li><li>在同一个字典中，关键字还必须互不相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&#125;           <span class="comment">#创建空字典</span></span><br><span class="line">tel = &#123;<span class="string">'Jack'</span>:<span class="number">1557</span>,<span class="string">'Tom'</span>:<span class="number">1320</span>,<span class="string">'Rose'</span>:<span class="number">1886</span>&#125;</span><br><span class="line">tel</span><br><span class="line">&#123;<span class="string">'Jack'</span>: <span class="number">1557</span>, <span class="string">'Rose'</span>: <span class="number">1886</span>, <span class="string">'Tom'</span>: <span class="number">1320</span>&#125;</span><br><span class="line"></span><br><span class="line">tel[<span class="string">'Jack'</span>]        <span class="comment">#主要的操作：通过key查询</span></span><br><span class="line"><span class="number">1557</span></span><br><span class="line"><span class="keyword">del</span> tel[<span class="string">'Rose'</span>]     <span class="comment">#删除一个键值对</span></span><br><span class="line">tel[<span class="string">'Mary'</span>] = <span class="number">4127</span>  <span class="comment">#添加一个键值对</span></span><br><span class="line">tel</span><br><span class="line">&#123;<span class="string">'Jack'</span>: <span class="number">1557</span>, <span class="string">'Mary'</span>: <span class="number">4127</span>, <span class="string">'Tom'</span>: <span class="number">1320</span>&#125;</span><br><span class="line"></span><br><span class="line">list(tel.keys())    <span class="comment">#返回所有key组成的list</span></span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Tom'</span>, <span class="string">'Mary'</span>]</span><br><span class="line"></span><br><span class="line">sorted(tel.keys())  <span class="comment">#按key排序</span></span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Mary'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">'Tom'</span> <span class="keyword">in</span> tel        <span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">'Mary'</span> <span class="keyword">not</span> <span class="keyword">in</span> tel   <span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li>构造函数dict()直接从键值对sequence中构建字典，当然也可以进行推到，如下 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict([(<span class="string">'sape'</span>,<span class="number">4139</span>),(<span class="string">'guido'</span>,<span class="number">4127</span>),(<span class="string">'jack'</span>,<span class="number">4098</span>)])</span><br><span class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;x:x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"></span><br><span class="line">dict(sape=<span class="number">4139</span>,guido=<span class="number">4127</span>,jack=<span class="number">4098</span>)</span><br><span class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</li></ul><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用{ }。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spark安装及入门</title>
      <link href="/Spark/2018/03/30/1-spark%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%A5%E9%97%A8/"/>
      <url>/Spark/2018/03/30/1-spark%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-学习目标"><a href="#1-学习目标" class="headerlink" title="1. 学习目标"></a>1. 学习目标</h1><ul><li>目标1：熟悉Spark相关概念</li><li>目标2：搭建一个Spark集群</li><li>目标3：编写简单的Spark应用程序</li></ul><h1 id="2-Spark概述"><a href="#2-Spark概述" class="headerlink" title="2. Spark概述"></a>2. Spark概述</h1><h2 id="2-1-spark是什么"><a href="#2-1-spark是什么" class="headerlink" title="2.1 spark是什么"></a>2.1 spark是什么</h2><ul><li>Spark是一种快速、通用、可扩展的大数据分析引擎，2009年诞生于加州大学伯克利分校AMPLab，2010年开源，2013年6月成为Apache孵化项目，2014年2月成为Apache顶级项目。目前，Spark生态系统已经发展成为一个包含多个子项目的集合，其中包含SparkSQL、Spark Streaming、GraphX、MLlib等子项目，Spark是基于内存计算的大数据并行计算框架。Spark基于内存计算，提高了在大数据环境下数据处理的实时性，同时保证了高容错性和高可伸缩性，允许用户将Spark部署在大量廉价硬件之上，形成集群。Spark得到了众多大数据公司的支持，这些公司包括Hortonworks、IBM、Intel、Cloudera、MapR、Pivotal、百度、阿里、腾讯、京东、携程、优酷土豆。当前百度的Spark已应用于凤巢、大搜索、直达号、百度大数据等业务；阿里利用GraphX构建了大规模的图计算和图挖掘系统，实现了很多生产系统的推荐算法；腾讯Spark集群达到8000台的规模，是当前已知的世界上最大的Spark集群。</li><li>Spark是一个开源的类似于Hadoop MapReduce的通用的并行计算框架，Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Spark中的Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。</li></ul><p><code>Spark是MapReduce的替代方案，而且兼容HDFS、Hive，可融入Hadoop的生态系统，以弥补MapReduce的不足。</code></p><h2 id="2-2-Spark特点"><a href="#2-2-Spark特点" class="headerlink" title="2.2 Spark特点"></a>2.2 Spark特点</h2><h3 id="2-2-1-块"><a href="#2-2-1-块" class="headerlink" title="2.2.1 块"></a>2.2.1 块</h3><ul><li>与Hadoop的MapReduce相比，Spark基于内存的运算要快100倍以上，基于硬盘的运算也要快10倍以上。Spark实现了高效的DAG执行引擎，可以通过基于内存来高效处理数据流。<ul><li>spark任务中间结果数据可以不落地，直接保存在内存中</li><li>在MapReduce任务中，如果当前有100task，对应的会产生100个进程去运行（MapReduce是以进程的方式去运行任务）</li><li>在spark任务中，如果当前有100个task，对应它只需要开启100个线程去运行（spark是以线程的方式运行任务）</li></ul></li></ul><h3 id="2-2-2-易用"><a href="#2-2-2-易用" class="headerlink" title="2.2.2 易用"></a>2.2.2 易用</h3><ul><li>Spark支持Java、Python和Scala的API，还支持超过80种高级算法，使用户可以快速构建不同的应用。而且Spark支持交互式的Python和Scala的shell，可以非常方便地在这些shell中使用Spark集群来验证解决问题的方法。</li></ul><h3 id="2-2-3-通用"><a href="#2-2-3-通用" class="headerlink" title="2.2.3 通用"></a>2.2.3 通用</h3><ul><li>Spark提供了统一的解决方案。Spark可以用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）。这些不同类型的处理都可以在同一个应用中无缝使用。Spark统一的解决方案非常具有吸引力，毕竟任何公司都想用统一的平台去处理遇到的问题，减少开发和维护的人力成本和部署平台的物力成本。</li></ul><h3 id="2-2-4-兼容性"><a href="#2-2-4-兼容性" class="headerlink" title="2.2.4 兼容性"></a>2.2.4 兼容性</h3><ul><li>Spark可以非常方便地与其他的开源产品进行融合。比如，Spark可以使用Hadoop的YARN和Apache Mesos作为它的资源管理和调度器，并且可以处理所有Hadoop支持的数据，包括HDFS、HBase和Cassandra等。这对于已经部署Hadoop集群的用户特别重要，因为不需要做任何数据迁移就可以使用Spark的强大处理能力。Spark也可以不依赖于第三方的资源管理和调度器，它实现了Standalone作为其内置的资源管理和调度框架，这样进一步降低了Spark的使用门槛，使得所有人都可以非常容易地部署和使用Spark。此外，Spark还提供了在EC2上部署Standalone的Spark集群的工具。</li></ul><h1 id="3-Spark集群安装"><a href="#3-Spark集群安装" class="headerlink" title="3. Spark集群安装"></a>3. Spark集群安装</h1><ul><li>在这之前需要搭建好对应版本的hadoop集群</li><li>解压安装包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf spark-2.3.0-bin-hadoop2.7.tgz</span><br></pre></td></tr></table></figure><ul><li>配置环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export SPARK_HOME=/hadoop/apps/server/spark</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim spark-ecv.sh 修改文件（先把spark-env.sh.template重命名为spark-env.sh）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>配置java环境变量</span><br><span class="line">export JAVA_HOME=/hadoop/apps/server/jdk1.8.0_144</span><br><span class="line"><span class="meta">#</span>指定spark老大Master的IP</span><br><span class="line">export SPARK_MASTER_HOST=node-1</span><br><span class="line"><span class="meta">#</span>指定spark老大Master的端口</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"></span><br><span class="line">vim slaves 修改文件（先把slaves.template重命名为slaves）</span><br><span class="line"></span><br><span class="line">node-2 </span><br><span class="line">node-3</span><br></pre></td></tr></table></figure><ul><li>拷贝配置文件到其他主机<ul><li>通过scp命令将spark的安装目录拷贝到其他机器上</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp -r spark/ node-2:$PWD</span><br><span class="line">scp -r spark/ node-3:$PWD</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ul><li>启动spark</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在主节点上启动spark</span><br><span class="line"><span class="meta">$</span>SPARK_HOME/sbin/start-all.sh</span><br></pre></td></tr></table></figure><ul><li>停止spark</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在主节点上停止spark集群</span><br><span class="line"><span class="meta">$</span>SPARK_HOME/sbin/stop-all.sh</span><br></pre></td></tr></table></figure><ul><li>spark的web界面<ul><li>正常启动spark集群后，可以通过访问node-1:8080查看spark的web界面，查看相关信息。</li></ul></li></ul><h1 id="4-Spark-HA高可用集群"><a href="#4-Spark-HA高可用集群" class="headerlink" title="4. Spark HA高可用集群"></a>4. Spark HA高可用集群</h1><h2 id="4-1-高可用部署说明"><a href="#4-1-高可用部署说明" class="headerlink" title="4.1 高可用部署说明"></a>4.1 高可用部署说明</h2><ul><li>SparkStandalone集群是Master-Slaves架构的集群模式，和大部分的Master-Slaves结构集群一样，存在着Master单点故障的问题。如何解决这个单点故障的问题，Spark提供了两种方案：<ul><li>（1）基于文件系统的单点恢复(Single-NodeRecovery with Local File System)。<ul><li>主要用于开发或测试环境。当spark提供目录保存spark Application和worker的注册信息，并将他们的恢复状态写入该目录中，这时，一旦Master发生故障，就可以通过重新启动Master进程（sbin/start-master.sh），恢复已运行的spark Application和worker的注册信息。</li></ul></li><li>（2）基于zookeeper的StandbyMasters(Standby Masters with ZooKeeper)。<ul><li>用于生产模式。其基本原理是通过zookeeper来选举一个Master，其他的Master处于Standby状态。将spark集群连接到同一个ZooKeeper实例并启动多个Master，利用zookeeper提供的选举和状态保存功能，可以使一个Master被选举成活着的master，而其他Master处于Standby状态。如果现任Master死去，另一个Master会通过选举产生，并恢复到旧的Master状态，然后恢复调度。整个恢复过程可能要1-2分钟。</li></ul></li></ul></li></ul><h2 id="4-2-基于zookeeper的Spark-HA高可用集群部署"><a href="#4-2-基于zookeeper的Spark-HA高可用集群部署" class="headerlink" title="4.2 基于zookeeper的Spark HA高可用集群部署"></a>4.2 基于zookeeper的Spark HA高可用集群部署</h2><ul><li>该HA方案使用起来很简单，首先需要搭建一个zookeeper集群，然后启动zooKeeper集群，最后在不同节点上启动Master。具体配置如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) vim spark-env.sh</span><br><span class="line">注释掉export SPARK_MASTER_HOST=node-1</span><br><span class="line">(2) 在spark-env.sh添加SPARK_DAEMON_JAVA_OPTS，内容如下：</span><br><span class="line">export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER  -Dspark.deploy.zookeeper.url=node-1:2181,node-2:2181,node-3:2181  -Dspark.deploy.zookeeper.dir=/spark"</span><br></pre></td></tr></table></figure><p><strong><code>参数说明</code></strong></p><p><code>spark.deploy.recoveryMode</code>：恢复模式（Master重新启动的模式）                </p><p>​    有三种：(1)ZooKeeper(2) FileSystem (3)NONE</p><p><code>spark.deploy.zookeeper.url</code>：ZooKeeper的Server地址</p><p><code>spark.deploy.zookeeper.dir</code>：保存集群元数据信息的文件、目录。</p><p>​    包括Worker，Driver和Application。</p><p><code>注意：</code></p><ul><li>在普通模式下启动spark集群，只需要在主机上面执行start-all.sh 就可以了。</li><li>在高可用模式下启动spark集群，先需要在任意一台节点上启动start-all.sh命令。然后在另外一台节点上单独启动master。命令start-master.sh。</li></ul><h1 id="5-Spark角色介绍"><a href="#5-Spark角色介绍" class="headerlink" title="5. Spark角色介绍"></a>5. Spark角色介绍</h1><ul><li>Spark是基于内存计算的大数据并行计算框架。因为其基于内存计算，比Hadoop中MapReduce计算框架具有更高的实时性，同时保证了高效容错性和可伸缩性。从2009年诞生于AMPLab到现在已经成为Apache顶级开源项目，并成功应用于商业集群中，学习Spark就需要了解其架构。</li><li>Spark架构图如下：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-1.jpg" alt="spark-1"></p><ul><li><p>Spark架构使用了分布式计算中master-slave模型，master是集群中含有master进程的节点，slave是集群中含有worker进程的节点。</p><ul><li>Driver Program ：运⾏main函数并且新建SparkContext的程序。</li><li>Application：基于Spark的应用程序，包含了driver程序和集群上的executor。</li><li><p>Cluster Manager：指的是在集群上获取资源的外部服务。目前有三种类型</p><ul><li><p>（1）Standalone:spark原生的资源管理，由Master负责资源的分配</p></li><li><p>（2）ApacheMesos:与hadoop MR兼容性良好的一种资源调度框架</p></li><li><p>（3）HadoopYarn: 主要是指Yarn中的ResourceManager</p></li><li>Worker Node： 集群中任何可以运行Application代码的节点，在Standalone模式中指的是通过slaves文件配置的Worker节点，在Spark on Yarn模式下就是NodeManager节点</li><li>Executor：是在一个worker node上为某应⽤启动的⼀个进程，该进程负责运⾏行任务，并且负责将数据存在内存或者磁盘上。每个应⽤都有各自独立的executor。</li><li>Task ：被送到某个executor上的工作单元。</li></ul></li></ul></li></ul><h1 id="6-初识Spark程序"><a href="#6-初识Spark程序" class="headerlink" title="6. 初识Spark程序"></a>6. 初识Spark程序</h1><h2 id="6-1-执行第一个spark程序"><a href="#6-1-执行第一个spark程序" class="headerlink" title="6.1 执行第一个spark程序"></a>6.1 执行第一个spark程序</h2><ul><li>普通模式提交任务：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--class org.apache.spark.examples.JavaSparkPi \</span><br><span class="line">--master spark://node-1:7077 \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 1 \</span><br><span class="line">examples/jars/spark-examples_2.11-2.3.0.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><ul><li>该算法是利用蒙特·卡罗算法求圆周率PI，通过计算机模拟大量的随机数，最终会计算出比较精确的π。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-2.jpg" alt="spark-2"></p><h2 id="6-2-启动Spark-Shell"><a href="#6-2-启动Spark-Shell" class="headerlink" title="6.2 启动Spark-Shell"></a>6.2 启动Spark-Shell</h2><ul><li>spark-shell是Spark自带的交互式Shell程序，方便用户进行交互式编程，用户可以在该命令行下用scala编写spark程序。</li></ul><h3 id="6-2-1-运行spark-shell-–master-local-N-读取本地文件"><a href="#6-2-1-运行spark-shell-–master-local-N-读取本地文件" class="headerlink" title="6.2.1 运行spark-shell –master  local[N]读取本地文件"></a>6.2.1 运行spark-shell –master  local[N]读取本地文件</h3><ul><li><p>单机模式：通过本地N个线程跑任务，只运行一个SparkSubmit进程。</p></li><li><p>需求：读取本地文件，实现文件内的单词计数，本地文件words.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hello hadoop hadoop</span><br><span class="line">hello flume storm</span><br><span class="line">hello hadoop kafka storm</span><br><span class="line">spark spark sqoop</span><br><span class="line">hello storm spark</span><br><span class="line">hadoop hello flume</span><br></pre></td></tr></table></figure></li><li><p>运行spark-shell –master local[2]</p></li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-3.jpg" alt="spark-3"></p><ul><li>编写scala代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile("file:///home/hadoop/aa.txt").flatMap(_.sp)lit(" ")).map((_,1)).reduceByKey(_+_).collect</span><br></pre></td></tr></table></figure><p><code>代码说明：</code></p><p>sc：Spark-Shell中已经默认将SparkContext类初始化为对象sc。用户代码如果需要用到，则直接应用sc即可。</p><p>textFile:读取数据文件</p><p>flatMap:对文件中的每一行数据进行压平切分,这里按照空格分隔。</p><p>map:对出现的每一个单词记为1（word，1）</p><p>reduceByKey:对相同的单词出现的次数进行累加</p><p>collect:触发任务执行，收集结果数据。</p><ul><li>结果：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-4.jpg" alt="spark-4"></p><h3 id="6-2-2-运行spark-shell-–master-local-N-读取HDFS上数据"><a href="#6-2-2-运行spark-shell-–master-local-N-读取HDFS上数据" class="headerlink" title="6.2.2 运行spark-shell –master local[N] 读取HDFS上数据"></a>6.2.2 运行spark-shell –master local[N] 读取HDFS上数据</h3><ul><li><p>整合spark和HDFS，修改配置文件</p><ul><li>在spark-env.sh ，添加HADOOP_CONF_DIR配置，指明了hadoop的配置文件后，默认它就是使用的hdfs上的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_CONF_DIR=/hadoop/apps/server/hadoop-2.7.4/etc/hadoop</span><br></pre></td></tr></table></figure></li><li><p>重启启动HDFS、spark集群</p></li><li><p>向hdfs上传一个文件到hdfs://node-1:/wordcount/input/words.txt</p></li><li><p>在spark shell 中用scala语言编写spark程序</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(&quot;/wordcount/input/words.txt&quot;).flatMap(_.split(&quot; &quot;)).map((_,1)).reduceByKey(_+_).collect</span><br></pre></td></tr></table></figure><h3 id="6-2-3-运行spark-shell指定具体的master地址"><a href="#6-2-3-运行spark-shell指定具体的master地址" class="headerlink" title="6.2.3 运行spark-shell指定具体的master地址"></a>6.2.3 运行spark-shell指定具体的master地址</h3><ul><li>需求：spark-shell运行时指定具体的master地址，读取HDFS上的数据，做单词计数，然后将结果保存在HDFS上。</li><li>执行启动命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spark-shell \</span><br><span class="line">--master spark://node-1:7077 \</span><br><span class="line">--executor-memory 1g \</span><br><span class="line">--total-executor-cores 2</span><br></pre></td></tr></table></figure><p><strong><code>参数说明：</code></strong></p><p><code>--master spark://node-1:7077</code> 指定Master的地址</p><p><code>--executor-memory 1g</code> 指定每个worker可用内存为1g</p><p><code>--total-executor-cores 2</code> 指定整个集群使用的cup核数为2个</p><p><code>注意：</code>如果启动sparkshell时没有指定master地址，但是也可以正常启动spark shell和执行spark shell中的程序，其实是启动了spark的local模式，该模式仅在本机启动一个进程，没有与集群建立联系。</p><ul><li>编写scala代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile("/wordcount/input/words.txt").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).saveAsTextFile("/wordcount/output")</span><br></pre></td></tr></table></figure><p>saveAsTextFile:保存结果数据到文件中</p><ul><li>查看hdfs上结果</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-5.jpg" alt="spark-5"></p><h2 id="6-3-在IDEA中编写WordCount程序"><a href="#6-3-在IDEA中编写WordCount程序" class="headerlink" title="6.3 在IDEA中编写WordCount程序"></a>6.3 在IDEA中编写WordCount程序</h2><ul><li>spark-shell仅在测试和验证我们的程序时使用的较多，在生产环境中，通常会在IDEA中编写程序，然后打成jar包，最后提交到集群。最常用的是创建一个Maven项目，利用Maven来管理jar包的依赖。</li><li>创建一个项目</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-6.jpg" alt="spark-6"></p><ul><li>选择Maven项目，然后点击next</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-7.jpg" alt="spark-7"></p><ul><li>填写maven的GAV,然后点击next</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-8.jpg" alt="spark-8"></p><ul><li>填写项目名称，然后点击finish</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-9.jpg" alt="spark-9"></p><ul><li>创建好maven项目后，点击Enable Auto-Import</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-10.jpg" alt="spark-10"></p><ul><li>配置maven的pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hadoop.version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">hadoop.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main/scala<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>src/test/scala<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-dependencyfile<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>$&#123;project.build.directory&#125;/.scala_dependencies<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span><span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加src/main/scala和src/test/scala，与pom.xml中的配置保持一致</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-11.jpg" alt="spark-11"></p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-12.jpg" alt="spark-12"></p><ul><li>编写spark程序</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.test.spark</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//设置spark的配置文件信息</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WordCount"</span>)</span><br><span class="line">    <span class="comment">//构建sparkcontext上下文对象，它是程序的入口,所有计算的源头</span></span><br><span class="line">    <span class="keyword">val</span> sc: <span class="type">SparkContext</span> = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="comment">//读取文件</span></span><br><span class="line">    <span class="keyword">val</span> file: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(args(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对文件中每一行单词进行压平切分</span></span><br><span class="line">    <span class="keyword">val</span> words: <span class="type">RDD</span>[<span class="type">String</span>] = file.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">    <span class="comment">//对每一个单词计数为1 转化为(单词，1)</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOne: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map(x=&gt;(x,<span class="number">1</span>))</span><br><span class="line">    <span class="comment">//相同的单词进行汇总 前一个下划线表示累加数据，后一个下划线表示新数据</span></span><br><span class="line">    <span class="keyword">val</span> result: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOne.reduceByKey(_+_)</span><br><span class="line">    <span class="comment">//保存数据到HDFS</span></span><br><span class="line">    result.saveAsTextFile(args(<span class="number">1</span>))</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用maven打包<ul><li>点击idea右侧的Maven Project选项</li><li>点击Lifecycle,选择package，然后点击Run Maven Build</li></ul></li><li>选择编译成功的jar包，并将该jar上传到Spark集群中的某个节点上</li><li>首先启动hdfs和Spark集群</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动hdfs</span><br><span class="line"><span class="meta">$</span>HADOOP_HOME/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><ul><li>使用spark-submit命令提交Spark应用（注意参数的顺序）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--class com.itheima.spark.WordCount \</span><br><span class="line">--master spark://node-1:7077 \</span><br><span class="line">--executor-memory 1g \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">/home/hadoop/demoJar/sparkDay01-wordcount.jar \</span><br><span class="line">/wordcount/input/words.txt \</span><br><span class="line">/wordcount/spark_out</span><br></pre></td></tr></table></figure><p>这里通过spark-submit提交任务到集群上。用的是spark的Standalone模式<br>Standalone模式是Spark内部默认实现的一种集群管理模式，这种模式是通过集群中的Master来统一管理资源。</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
