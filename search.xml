<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Zookeeper集群搭建</title>
      <link href="/%E5%A4%A7%E6%95%B0%E6%8D%AE/2019/03/26/Zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE/2019/03/26/Zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper集群搭建"><a href="#Zookeeper集群搭建" class="headerlink" title="Zookeeper集群搭建"></a>Zookeeper集群搭建</h1><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><ul><li>检查集群时间是否同步，<a href="https://www.marsm.top/2018/02/24/Linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/" target="_blank" rel="noopener">时间同步参考</a></li><li><p>检测防火墙是否关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看防火墙状态</span><br><span class="line">service iptables status</span><br><span class="line">设置防火墙永久关闭</span><br><span class="line">chkconfig iptables off</span><br><span class="line">chkconfig iptables --list</span><br></pre></td></tr></table></figure></li><li><p>检测主机IP映射有没有配置</p></li><li>检查JDK是否安装：java -version</li></ul><h3 id="下载安装zookeeper"><a href="#下载安装zookeeper" class="headerlink" title="下载安装zookeeper"></a>下载安装zookeeper</h3><p>使用FTP工具导入安装包到集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.5.tar.gz</span><br><span class="line">mv zookeeper-3.4.5 zookeeper</span><br></pre></td></tr></table></figure></p><h3 id="修改环境变量（注意：3台zookeeper都需要修改）"><a href="#修改环境变量（注意：3台zookeeper都需要修改）" class="headerlink" title="修改环境变量（注意：3台zookeeper都需要修改）"></a>修改环境变量（注意：3台zookeeper都需要修改）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">export ZOOKEEPER_HOME=/home/hadoop/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="修改Zookeeper配置文件"><a href="#修改Zookeeper配置文件" class="headerlink" title="修改Zookeeper配置文件"></a>修改Zookeeper配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cd zookeeper/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vi zoo.cfg</span><br><span class="line">添加内容：</span><br><span class="line">dataDir=/root/apps/zookeeper/zkdata</span><br><span class="line">server.1=mini1:2888:3888     ## (心跳端口、选举端口)</span><br><span class="line">server.2=mini2:2888:3888</span><br><span class="line">server.3=mini3:2888:3888</span><br><span class="line">创建文件夹：</span><br><span class="line">cd /home/hadoop/zookeeper/</span><br><span class="line">mkdir zkdata</span><br><span class="line">在data文件夹下新建myid文件，myid的文件内容为：</span><br><span class="line">cd zkdata</span><br><span class="line">echo 1 &gt; myid</span><br></pre></td></tr></table></figure><h3 id="分发安装包到其他机器"><a href="#分发安装包到其他机器" class="headerlink" title="分发安装包到其他机器"></a>分发安装包到其他机器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /root/apps root@mini2:/root/</span><br><span class="line">scp -r /root/apps root@mini3:/root/</span><br></pre></td></tr></table></figure><h3 id="修改其他机器的配置文件"><a href="#修改其他机器的配置文件" class="headerlink" title="修改其他机器的配置文件"></a>修改其他机器的配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改myid文件</span><br><span class="line">到mini2上：修改myid为：2</span><br><span class="line">到mini3上：修改myid为：3</span><br></pre></td></tr></table></figure><h3 id="启动（每台机器）"><a href="#启动（每台机器）" class="headerlink" title="启动（每台机器）"></a>启动（每台机器）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">或者编写一个脚本来批量启动所有机器：</span><br><span class="line">#!/bin/bash</span><br><span class="line">usage=&quot;Usage: $0 (start|stop|status)&quot;</span><br><span class="line">if [ $# -lt 1 ]; then</span><br><span class="line">  echo $usage</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">behave=$1</span><br><span class="line"></span><br><span class="line">echo &quot;$behave zkServer cluster&quot;</span><br><span class="line"></span><br><span class="line">for host in 1 2 3</span><br><span class="line">do</span><br><span class="line">ssh node-$host &quot;source /etc/profile;/hadoop/apps/server/zookeeper/bin/zkServer.sh $behave&quot;</span><br><span class="line">sleep 2s</span><br><span class="line">done</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h3 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jps（查看进程）</span><br><span class="line">zkServer.sh status（查看集群状态，主从信息）</span><br></pre></td></tr></table></figure><p>如果启动不成功，可以观察zookeeper.out日志，查看错误信息进行排查</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pandas数据练习题</title>
      <link href="/Pandas/2019/03/13/Pandas%E6%95%B0%E6%8D%AE%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/Pandas/2019/03/13/Pandas%E6%95%B0%E6%8D%AE%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="了解数据"><a href="#了解数据" class="headerlink" title="了解数据"></a>了解数据</h1><h2 id="探索Chipotle快餐数据"><a href="#探索Chipotle快餐数据" class="headerlink" title="探索Chipotle快餐数据"></a>探索Chipotle快餐数据</h2><ul><li>将数据集存入一个名为chipo的数据框中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">chipo = pd.read_csv(<span class="string">'../pydata/chipotle.tsv'</span>,<span class="string">'\t'</span>)</span><br></pre></td></tr></table></figure><ul><li>查看前面10行内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chipo.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>order_id</th><th>quantity</th><th>item_name</th><th>choice_description</th><th>item_price</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>1</td><td>Chips   and Fresh Tomato Salsa</td><td>NaN</td><td>$2.39</td></tr><tr><td>1</td><td>1</td><td>1</td><td>Izze</td><td>[Clementine]</td><td>$3.39</td></tr><tr><td>2</td><td>1</td><td>1</td><td>Nantucket   Nectar</td><td>[Apple]</td><td>$3.39</td></tr><tr><td>3</td><td>1</td><td>1</td><td>Chips   and Tomatillo-Green Chili Salsa</td><td>NaN</td><td>$2.39</td></tr><tr><td>4</td><td>2</td><td>2</td><td>Chicken   Bowl</td><td>[Tomatillo-Red   Chili Salsa (Hot), [Black Beans…</td><td>$16.98</td></tr><tr><td>5</td><td>3</td><td>1</td><td>Chicken   Bowl</td><td>[Fresh   Tomato Salsa (Mild), [Rice, Cheese, Sou…</td><td>$10.98</td></tr><tr><td>6</td><td>3</td><td>1</td><td>Side   of Chips</td><td>NaN</td><td>$1.69</td></tr><tr><td>7</td><td>4</td><td>1</td><td>Steak   Burrito</td><td>[Tomatillo   Red Chili Salsa, [Fajita Vegetables…</td><td>$11.75</td></tr><tr><td>8</td><td>4</td><td>1</td><td>Steak   Soft Tacos</td><td>[Tomatillo   Green Chili Salsa, [Pinto Beans, Ch…</td><td>$9.25</td></tr><tr><td>9</td><td>5</td><td>1</td><td>Steak   Burrito</td><td>[Fresh   Tomato Salsa, [Rice, Black Beans, Pinto…</td><td>$9.25</td></tr></tbody></table><ul><li>数据集中有多少列（columns）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chipo.sheap[<span class="number">1</span>]</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>打印出全部的列名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chipo.columns</span><br><span class="line"></span><br><span class="line">Index([<span class="string">'order_id'</span>, <span class="string">'quantity'</span>, <span class="string">'item_name'</span>, <span class="string">'choice_description'</span>,</span><br><span class="line">       <span class="string">'item_price'</span>],</span><br><span class="line">      dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><ul><li>被下单数最多商品（item）是什么？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = chipot[[<span class="string">'item_name'</span>,<span class="string">'quantity'</span>]].groupby(by=<span class="string">'item_name'</span>,as_index=<span class="keyword">False</span>).agg(&#123;<span class="string">'quantity'</span>:<span class="string">'sum'</span>&#125;)</span><br><span class="line">c.sort_values(by=<span class="string">'quantity'</span>,ascending=<span class="keyword">False</span>).head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>item_name</th><th>quantity</th></tr></thead><tbody><tr><td>17</td><td>Chicken   Bowl</td><td>761</td></tr><tr><td>18</td><td>Chicken   Burrito</td><td>591</td></tr><tr><td>25</td><td>Chips   and Guacamole</td><td>506</td></tr><tr><td>39</td><td>Steak   Burrito</td><td>386</td></tr><tr><td>10</td><td>Canned   Soft Drink</td><td>351</td></tr></tbody></table><ul><li>在item_name这一列中，一共有多少种商品被下单</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chipot['item_name'].drop_duplicates().count()</span></span><br><span class="line"><span class="comment"># nunique() 返回对象中唯一元素的数据</span></span><br><span class="line">chipot[<span class="string">'item_name'</span>].nunique()</span><br><span class="line"></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><ul><li>在choice_description中，下单次数最多的商品是什么</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = chipot[[<span class="string">'choice_description'</span>,<span class="string">'quantity'</span>]].groupby(by=<span class="string">'choice_description'</span>,as_index=<span class="keyword">False</span>).agg(&#123;<span class="string">'quantity'</span>:<span class="string">'sum'</span>&#125;)</span><br><span class="line">c.sort_values(by=<span class="string">'quantity'</span>,ascending=<span class="keyword">False</span>).head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>choice_description</th><th>quantity</th></tr></thead><tbody><tr><td>15</td><td>[Diet Coke]</td><td>159</td></tr><tr><td>14</td><td>[Coke]</td><td>143</td></tr><tr><td>583</td><td>[Sprite]</td><td>89</td></tr><tr><td>256</td><td>[Fresh Tomato Salsa, [Rice, Black Beans, Chees…</td><td>49</td></tr><tr><td>257</td><td>[Fresh Tomato Salsa, [Rice, Black Beans, Chees…</td><td>42</td></tr></tbody></table><ul><li>一共有多少商品被下单</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chipot[<span class="string">'quantity'</span>].sum()</span><br><span class="line"></span><br><span class="line"><span class="number">4972</span></span><br></pre></td></tr></table></figure><ul><li>将item_price转换为浮点数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trans = <span class="keyword">lambda</span> x: float(x[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">chipot[<span class="string">'item_price'</span>] = chipot[<span class="string">'item_price'</span>].apply(trans)</span><br><span class="line">chipot.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>order_id</th><th>quantity</th><th>item_name</th><th>choice_description</th><th>item_price</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>1</td><td>Chips   and Fresh Tomato Salsa</td><td>NaN</td><td>2.39</td></tr><tr><td>1</td><td>1</td><td>1</td><td>Izze</td><td>[Clementine]</td><td>3.39</td></tr><tr><td>2</td><td>1</td><td>1</td><td>Nantucket   Nectar</td><td>[Apple]</td><td>3.39</td></tr><tr><td>3</td><td>1</td><td>1</td><td>Chips   and Tomatillo-Green Chili Salsa</td><td>NaN</td><td>2.39</td></tr><tr><td>4</td><td>2</td><td>2</td><td>Chicken   Bowl</td><td>[Tomatillo-Red   Chili Salsa (Hot), [Black Beans…</td><td>16.98</td></tr></tbody></table><ul><li>在该数据集对应的时期内，收入（revenue）是多少</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chipot[<span class="string">'sum_total'</span>] = chipot[<span class="string">'item_price'</span>] * chipot[<span class="string">'quantity'</span>]</span><br><span class="line">chipot[<span class="string">'sum_total'</span>].sum()</span><br><span class="line"></span><br><span class="line"><span class="number">39237.02</span></span><br></pre></td></tr></table></figure><ul><li>在该数据集对应的时期内，一共有多少订单</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chipot[<span class="string">'order_id'</span>].nunique()</span><br><span class="line"></span><br><span class="line"><span class="number">1834</span></span><br></pre></td></tr></table></figure><ul><li>每一单（order）对应的平均总价是多少</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chipot[[<span class="string">'order_id'</span>,<span class="string">'sum_total'</span>]].groupby(by=<span class="string">'order_id'</span>,as_index=<span class="keyword">False</span>).agg(&#123;<span class="string">'sum_total'</span>:<span class="string">'sum'</span>&#125;)[<span class="string">'sum_total'</span>].mean()</span><br></pre></td></tr></table></figure><ul><li>一共有多少种不同的商品被出售</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chipot[<span class="string">'item_name'</span>].nunique()</span><br><span class="line"></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><hr><h1 id="数据过滤与排序"><a href="#数据过滤与排序" class="headerlink" title="数据过滤与排序"></a>数据过滤与排序</h1><h2 id="探索2012欧洲杯数据"><a href="#探索2012欧洲杯数据" class="headerlink" title="探索2012欧洲杯数据"></a>探索2012欧洲杯数据</h2><ul><li>将数据集命名为euro12</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">euro12 = pd.read_csv(<span class="string">'../pydata/Euro2012.csv'</span>)</span><br><span class="line">euro12.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Team</th><th>Goals</th><th>Shots on target</th><th>Shots off target</th><th>Shooting Accuracy</th><th>% Goals-to-shots</th><th>Total shots (inc. Blocked)</th><th>Hit Woodwork</th><th>Penalty goals</th><th>Penalties not scored</th><th>…</th><th>Saves made</th><th>Saves-to-shots ratio</th><th>Fouls Won</th><th>Fouls Conceded</th><th>Offsides</th><th>Yellow Cards</th><th>Red Cards</th><th>Subs on</th><th>Subs off</th><th>Players Used</th></tr></thead><tbody><tr><td>0</td><td>Croatia</td><td>4</td><td>13</td><td>12</td><td>51.9%</td><td>16.0%</td><td>32</td><td>0</td><td>0</td><td>0</td><td>…</td><td>13</td><td>81.3%</td><td>41</td><td>62</td><td>2</td><td>9</td><td>0</td><td>9</td><td>9</td><td>16</td></tr><tr><td>1</td><td>Czech Republic</td><td>4</td><td>13</td><td>18</td><td>41.9%</td><td>12.9%</td><td>39</td><td>0</td><td>0</td><td>0</td><td>…</td><td>9</td><td>60.1%</td><td>53</td><td>73</td><td>8</td><td>7</td><td>0</td><td>11</td><td>11</td><td>19</td></tr><tr><td>2</td><td>Denmark</td><td>4</td><td>10</td><td>10</td><td>50.0%</td><td>20.0%</td><td>27</td><td>1</td><td>0</td><td>0</td><td>…</td><td>10</td><td>66.7%</td><td>25</td><td>38</td><td>8</td><td>4</td><td>0</td><td>7</td><td>7</td><td>15</td></tr><tr><td>3</td><td>England</td><td>5</td><td>11</td><td>18</td><td>50.0%</td><td>17.2%</td><td>40</td><td>0</td><td>0</td><td>0</td><td>…</td><td>22</td><td>88.1%</td><td>43</td><td>45</td><td>6</td><td>5</td><td>0</td><td>11</td><td>11</td><td>16</td></tr><tr><td>4</td><td>France</td><td>3</td><td>22</td><td>24</td><td>37.9%</td><td>6.5%</td><td>65</td><td>1</td><td>0</td><td>0</td><td>…</td><td>6</td><td>54.6%</td><td>36</td><td>51</td><td>5</td><td>6</td><td>0</td><td>11</td><td>11</td><td>19</td></tr></tbody></table><ul><li>只选取 Goals 这一列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">euro12[<span class="string">'Goals'</span>].head()</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2</span>    <span class="number">4</span></span><br><span class="line"><span class="number">3</span>    <span class="number">5</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3</span></span><br><span class="line">Name: Goals, dtype: int64</span><br></pre></td></tr></table></figure><ul><li><p>有多少球队参与了2012欧洲杯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">euro12.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></li><li><p>该数据集中一共有多少列(columns)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">euro12.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">35</span></span><br></pre></td></tr></table></figure></li><li><p>将数据集中的列Team, Yellow Cards和Red Cards单独存为一个名叫discipline的数据框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">discipline = euro12[[<span class="string">'Team'</span>,<span class="string">'Yellow Cards'</span>,<span class="string">'Red Cards'</span>]]</span><br><span class="line">discipline</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Team</th><th>Yellow Cards</th><th>Red Cards</th></tr></thead><tbody><tr><td>0</td><td>Croatia</td><td>9</td><td>0</td></tr><tr><td>1</td><td>Czech   Republic</td><td>7</td><td>0</td></tr><tr><td>2</td><td>Denmark</td><td>4</td><td>0</td></tr><tr><td>3</td><td>England</td><td>5</td><td>0</td></tr><tr><td>4</td><td>France</td><td>6</td><td>0</td></tr><tr><td>5</td><td>Germany</td><td>4</td><td>0</td></tr><tr><td>6</td><td>Greece</td><td>9</td><td>1</td></tr><tr><td>7</td><td>Italy</td><td>16</td><td>0</td></tr><tr><td>8</td><td>Netherlands</td><td>5</td><td>0</td></tr><tr><td>9</td><td>Poland</td><td>7</td><td>1</td></tr><tr><td>10</td><td>Portugal</td><td>12</td><td>0</td></tr><tr><td>11</td><td>Republic   of Ireland</td><td>6</td><td>1</td></tr><tr><td>12</td><td>Russia</td><td>6</td><td>0</td></tr><tr><td>13</td><td>Spain</td><td>11</td><td>0</td></tr><tr><td>14</td><td>Sweden</td><td>7</td><td>0</td></tr><tr><td>15</td><td>Ukraine</td><td>5</td><td>0</td></tr></tbody></table><ul><li>对数据框discipline按照先Red Cards再Yellow Cards进行排序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discipline.sort_values([<span class="string">'Red Cards'</span>,<span class="string">'Yellow Cards'</span>],ascending=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Team</th><th>Yellow Cards</th><th>Red Cards</th></tr></thead><tbody><tr><td>6</td><td>Greece</td><td>9</td><td>1</td></tr><tr><td>9</td><td>Poland</td><td>7</td><td>1</td></tr><tr><td>11</td><td>Republic   of Ireland</td><td>6</td><td>1</td></tr><tr><td>7</td><td>Italy</td><td>16</td><td>0</td></tr><tr><td>10</td><td>Portugal</td><td>12</td><td>0</td></tr><tr><td>13</td><td>Spain</td><td>11</td><td>0</td></tr><tr><td>0</td><td>Croatia</td><td>9</td><td>0</td></tr><tr><td>1</td><td>Czech   Republic</td><td>7</td><td>0</td></tr><tr><td>14</td><td>Sweden</td><td>7</td><td>0</td></tr><tr><td>4</td><td>France</td><td>6</td><td>0</td></tr><tr><td>12</td><td>Russia</td><td>6</td><td>0</td></tr><tr><td>3</td><td>England</td><td>5</td><td>0</td></tr><tr><td>8</td><td>Netherlands</td><td>5</td><td>0</td></tr><tr><td>15</td><td>Ukraine</td><td>5</td><td>0</td></tr><tr><td>2</td><td>Denmark</td><td>4</td><td>0</td></tr><tr><td>5</td><td>Germany</td><td>4</td><td>0</td></tr></tbody></table><ul><li><p>计算每个球队拿到的黄牌数的平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">discipline[<span class="string">'Yellow Cards'</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="number">7.4375</span></span><br></pre></td></tr></table></figure></li><li><p>找到进球数Goals超过6的球队数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12[euro12[<span class="string">'Goals'</span>] &gt; <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Team</th><th>Goals</th><th>Shots on target</th><th>Shots off target</th><th>Shooting Accuracy</th><th>% Goals-to-shots</th><th>Total shots (inc.   Blocked)</th><th>Hit Woodwork</th><th>Penalty goals</th><th>Penalties not   scored</th><th>…</th><th>Saves made</th><th>Saves-to-shots   ratio</th><th>Fouls Won</th><th>Fouls Conceded</th><th>Offsides</th><th>Yellow Cards</th><th>Red Cards</th><th>Subs on</th><th>Subs off</th><th>Players Used</th></tr></thead><tbody><tr><td>5</td><td>Germany</td><td>10</td><td>32</td><td>32</td><td>47.80%</td><td>15.60%</td><td>80</td><td>2</td><td>1</td><td>0</td><td>…</td><td>10</td><td>62.60%</td><td>63</td><td>49</td><td>12</td><td>4</td><td>0</td><td>15</td><td>15</td><td>17</td></tr><tr><td>13</td><td>Spain</td><td>12</td><td>42</td><td>33</td><td>55.90%</td><td>16.00%</td><td>100</td><td>0</td><td>1</td><td>0</td><td>…</td><td>15</td><td>93.80%</td><td>102</td><td>83</td><td>19</td><td>11</td><td>0</td><td>17</td><td>17</td><td>18</td></tr></tbody></table><ul><li>选取以字母G开头的球队数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12[euro12.Team.str.startswith(<span class="string">'G'</span>)]</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Team</th><th>Goals</th><th>Shots on target</th><th>Shots off target</th><th>Shooting Accuracy</th><th>% Goals-to-shots</th><th>Total shots (inc.   Blocked)</th><th>Hit Woodwork</th><th>Penalty goals</th><th>Penalties not   scored</th><th>…</th><th>Saves made</th><th>Saves-to-shots   ratio</th><th>Fouls Won</th><th>Fouls Conceded</th><th>Offsides</th><th>Yellow Cards</th><th>Red Cards</th><th>Subs on</th><th>Subs off</th><th>Players Used</th></tr></thead><tbody><tr><td>5</td><td>Germany</td><td>10</td><td>32</td><td>32</td><td>47.80%</td><td>15.60%</td><td>80</td><td>2</td><td>1</td><td>0</td><td>…</td><td>10</td><td>62.60%</td><td>63</td><td>49</td><td>12</td><td>4</td><td>0</td><td>15</td><td>15</td><td>17</td></tr><tr><td>6</td><td>Greece</td><td>5</td><td>8</td><td>18</td><td>30.70%</td><td>19.20%</td><td>32</td><td>1</td><td>1</td><td>1</td><td>…</td><td>13</td><td>65.10%</td><td>67</td><td>48</td><td>12</td><td>9</td><td>1</td><td>12</td><td>12</td><td>20</td></tr></tbody></table><ul><li>选取前7列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># euro12.iloc[:,:7]</span></span><br><span class="line">euro12.T[:<span class="number">7</span>].T</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Team</th><th>Goals</th><th>Shots on target</th><th>Shots off target</th><th>Shooting Accuracy</th><th>% Goals-to-shots</th><th>Total shots (inc.   Blocked)</th></tr></thead><tbody><tr><td>0</td><td>Croatia</td><td>4</td><td>13</td><td>12</td><td>51.90%</td><td>16.00%</td><td>32</td></tr><tr><td>1</td><td>Czech   Republic</td><td>4</td><td>13</td><td>18</td><td>41.90%</td><td>12.90%</td><td>39</td></tr><tr><td>2</td><td>Denmark</td><td>4</td><td>10</td><td>10</td><td>50.00%</td><td>20.00%</td><td>27</td></tr><tr><td>3</td><td>England</td><td>5</td><td>11</td><td>18</td><td>50.00%</td><td>17.20%</td><td>40</td></tr><tr><td>4</td><td>France</td><td>3</td><td>22</td><td>24</td><td>37.90%</td><td>6.50%</td><td>65</td></tr><tr><td>5</td><td>Germany</td><td>10</td><td>32</td><td>32</td><td>47.80%</td><td>15.60%</td><td>80</td></tr><tr><td>6</td><td>Greece</td><td>5</td><td>8</td><td>18</td><td>30.70%</td><td>19.20%</td><td>32</td></tr><tr><td>7</td><td>Italy</td><td>6</td><td>34</td><td>45</td><td>43.00%</td><td>7.50%</td><td>110</td></tr><tr><td>8</td><td>Netherlands</td><td>2</td><td>12</td><td>36</td><td>25.00%</td><td>4.10%</td><td>60</td></tr><tr><td>9</td><td>Poland</td><td>2</td><td>15</td><td>23</td><td>39.40%</td><td>5.20%</td><td>48</td></tr><tr><td>10</td><td>Portugal</td><td>6</td><td>22</td><td>42</td><td>34.30%</td><td>9.30%</td><td>82</td></tr><tr><td>11</td><td>Republic   of Ireland</td><td>1</td><td>7</td><td>12</td><td>36.80%</td><td>5.20%</td><td>28</td></tr><tr><td>12</td><td>Russia</td><td>5</td><td>9</td><td>31</td><td>22.50%</td><td>12.50%</td><td>59</td></tr><tr><td>13</td><td>Spain</td><td>12</td><td>42</td><td>33</td><td>55.90%</td><td>16.00%</td><td>100</td></tr><tr><td>14</td><td>Sweden</td><td>5</td><td>17</td><td>19</td><td>47.20%</td><td>13.80%</td><td>39</td></tr><tr><td>15</td><td>Ukraine</td><td>2</td><td>7</td><td>26</td><td>21.20%</td><td>6.00%</td><td>38</td></tr></tbody></table><ul><li>选取除了最后3列之外的全部列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12.iloc[:,:<span class="number">-3</span>]</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Team</th><th>Goals</th><th>Shots on target</th><th>Shots off target</th><th>Shooting Accuracy</th><th>% Goals-to-shots</th><th>Total shots (inc.   Blocked)</th><th>Hit Woodwork</th><th>Penalty goals</th><th>Penalties not   scored</th><th>…</th><th>Clean Sheets</th><th>Blocks</th><th>Goals conceded</th><th>Saves made</th><th>Saves-to-shots   ratio</th><th>Fouls Won</th><th>Fouls Conceded</th><th>Offsides</th><th>Yellow Cards</th><th>Red Cards</th></tr></thead><tbody><tr><td>0</td><td>Croatia</td><td>4</td><td>13</td><td>12</td><td>51.90%</td><td>16.00%</td><td>32</td><td>0</td><td>0</td><td>0</td><td>…</td><td>0</td><td>10</td><td>3</td><td>13</td><td>81.30%</td><td>41</td><td>62</td><td>2</td><td>9</td><td>0</td></tr><tr><td>1</td><td>Czech   Republic</td><td>4</td><td>13</td><td>18</td><td>41.90%</td><td>12.90%</td><td>39</td><td>0</td><td>0</td><td>0</td><td>…</td><td>1</td><td>10</td><td>6</td><td>9</td><td>60.10%</td><td>53</td><td>73</td><td>8</td><td>7</td><td>0</td></tr><tr><td>2</td><td>Denmark</td><td>4</td><td>10</td><td>10</td><td>50.00%</td><td>20.00%</td><td>27</td><td>1</td><td>0</td><td>0</td><td>…</td><td>1</td><td>10</td><td>5</td><td>10</td><td>66.70%</td><td>25</td><td>38</td><td>8</td><td>4</td><td>0</td></tr><tr><td>3</td><td>England</td><td>5</td><td>11</td><td>18</td><td>50.00%</td><td>17.20%</td><td>40</td><td>0</td><td>0</td><td>0</td><td>…</td><td>2</td><td>29</td><td>3</td><td>22</td><td>88.10%</td><td>43</td><td>45</td><td>6</td><td>5</td><td>0</td></tr><tr><td>4</td><td>France</td><td>3</td><td>22</td><td>24</td><td>37.90%</td><td>6.50%</td><td>65</td><td>1</td><td>0</td><td>0</td><td>…</td><td>1</td><td>7</td><td>5</td><td>6</td><td>54.60%</td><td>36</td><td>51</td><td>5</td><td>6</td><td>0</td></tr><tr><td>5</td><td>Germany</td><td>10</td><td>32</td><td>32</td><td>47.80%</td><td>15.60%</td><td>80</td><td>2</td><td>1</td><td>0</td><td>…</td><td>1</td><td>11</td><td>6</td><td>10</td><td>62.60%</td><td>63</td><td>49</td><td>12</td><td>4</td><td>0</td></tr><tr><td>6</td><td>Greece</td><td>5</td><td>8</td><td>18</td><td>30.70%</td><td>19.20%</td><td>32</td><td>1</td><td>1</td><td>1</td><td>…</td><td>1</td><td>23</td><td>7</td><td>13</td><td>65.10%</td><td>67</td><td>48</td><td>12</td><td>9</td><td>1</td></tr><tr><td>7</td><td>Italy</td><td>6</td><td>34</td><td>45</td><td>43.00%</td><td>7.50%</td><td>110</td><td>2</td><td>0</td><td>0</td><td>…</td><td>2</td><td>18</td><td>7</td><td>20</td><td>74.10%</td><td>101</td><td>89</td><td>16</td><td>16</td><td>0</td></tr><tr><td>8</td><td>Netherlands</td><td>2</td><td>12</td><td>36</td><td>25.00%</td><td>4.10%</td><td>60</td><td>2</td><td>0</td><td>0</td><td>…</td><td>0</td><td>9</td><td>5</td><td>12</td><td>70.60%</td><td>35</td><td>30</td><td>3</td><td>5</td><td>0</td></tr><tr><td>9</td><td>Poland</td><td>2</td><td>15</td><td>23</td><td>39.40%</td><td>5.20%</td><td>48</td><td>0</td><td>0</td><td>0</td><td>…</td><td>0</td><td>8</td><td>3</td><td>6</td><td>66.70%</td><td>48</td><td>56</td><td>3</td><td>7</td><td>1</td></tr><tr><td>10</td><td>Portugal</td><td>6</td><td>22</td><td>42</td><td>34.30%</td><td>9.30%</td><td>82</td><td>6</td><td>0</td><td>0</td><td>…</td><td>2</td><td>11</td><td>4</td><td>10</td><td>71.50%</td><td>73</td><td>90</td><td>10</td><td>12</td><td>0</td></tr><tr><td>11</td><td>Republic   of Ireland</td><td>1</td><td>7</td><td>12</td><td>36.80%</td><td>5.20%</td><td>28</td><td>0</td><td>0</td><td>0</td><td>…</td><td>0</td><td>23</td><td>9</td><td>17</td><td>65.40%</td><td>43</td><td>51</td><td>11</td><td>6</td><td>1</td></tr><tr><td>12</td><td>Russia</td><td>5</td><td>9</td><td>31</td><td>22.50%</td><td>12.50%</td><td>59</td><td>2</td><td>0</td><td>0</td><td>…</td><td>0</td><td>8</td><td>3</td><td>10</td><td>77.00%</td><td>34</td><td>43</td><td>4</td><td>6</td><td>0</td></tr><tr><td>13</td><td>Spain</td><td>12</td><td>42</td><td>33</td><td>55.90%</td><td>16.00%</td><td>100</td><td>0</td><td>1</td><td>0</td><td>…</td><td>5</td><td>8</td><td>1</td><td>15</td><td>93.80%</td><td>102</td><td>83</td><td>19</td><td>11</td><td>0</td></tr><tr><td>14</td><td>Sweden</td><td>5</td><td>17</td><td>19</td><td>47.20%</td><td>13.80%</td><td>39</td><td>3</td><td>0</td><td>0</td><td>…</td><td>1</td><td>12</td><td>5</td><td>8</td><td>61.60%</td><td>35</td><td>51</td><td>7</td><td>7</td><td>0</td></tr><tr><td>15</td><td>Ukraine</td><td>2</td><td>7</td><td>26</td><td>21.20%</td><td>6.00%</td><td>38</td><td>0</td><td>0</td><td>0</td><td>…</td><td>0</td><td>4</td><td>4</td><td>13</td><td>76.50%</td><td>48</td><td></td><td></td><td></td></tr></tbody></table><ul><li>找到英格兰(England)、意大利(Italy)和俄罗斯(Russia)的射正率(Shooting Accuracy)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12.loc[euro12.Team.isin([<span class="string">'England'</span>,<span class="string">'Italy'</span>,<span class="string">'Russia'</span>]),[<span class="string">'Team'</span>,<span class="string">'Shooting Accuracy'</span>]]</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Team</th><th>Shooting Accuracy</th></tr></thead><tbody><tr><td>3</td><td>England</td><td>50.00%</td></tr><tr><td>7</td><td>Italy</td><td>43.00%</td></tr><tr><td>12</td><td>Russia</td><td>22.50%</td></tr></tbody></table><hr><h1 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h1><h2 id="探索酒类消费数据"><a href="#探索酒类消费数据" class="headerlink" title="探索酒类消费数据"></a>探索酒类消费数据</h2><ul><li>将数据框命名为drinks</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">drinks = pd.read_csv(<span class="string">'../pydata/drinks.csv'</span>)</span><br><span class="line">drinks.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>country</th><th>beer_servings</th><th>spirit_servings</th><th>wine_servings</th><th>total_litres_of_pure_alcohol</th><th>continent</th></tr></thead><tbody><tr><td>0</td><td>Afghanistan</td><td>0</td><td>0</td><td>0</td><td>0</td><td>AS</td></tr><tr><td>1</td><td>Albania</td><td>89</td><td>132</td><td>54</td><td>4.9</td><td>EU</td></tr><tr><td>2</td><td>Algeria</td><td>25</td><td>0</td><td>14</td><td>0.7</td><td>AF</td></tr><tr><td>3</td><td>Andorra</td><td>245</td><td>138</td><td>312</td><td>12.4</td><td>EU</td></tr><tr><td>4</td><td>Angola</td><td>217</td><td>57</td><td>45</td><td>5.9</td><td>AF</td></tr></tbody></table><ul><li><p>哪个大陆(continent)平均消耗的啤酒(beer)更多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drinks.groupby(<span class="string">'continent'</span>).beer_servings.mean().sort_values(ascending=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">continent</span><br><span class="line">EU    <span class="number">193.777778</span></span><br><span class="line">SA    <span class="number">175.083333</span></span><br><span class="line">OC     <span class="number">89.687500</span></span><br><span class="line">AF     <span class="number">61.471698</span></span><br><span class="line">AS     <span class="number">37.045455</span></span><br><span class="line">Name: beer_servings, dtype: float64</span><br></pre></td></tr></table></figure></li><li><p>打印出每个大陆(continent)的红酒消耗(wine_servings)的描述性统计值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drinks.groupby(<span class="string">'continent'</span>).wine_servings.describe()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>count</th><th>mean</th><th>std</th><th>min</th><th>25%</th><th>50%</th><th>75%</th><th>max</th></tr></thead><tbody><tr><td>continent</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>AF</td><td>53</td><td>16.26415</td><td>38.84642</td><td>0</td><td>1</td><td>2</td><td>13</td><td>233</td></tr><tr><td>AS</td><td>44</td><td>9.068182</td><td>21.66703</td><td>0</td><td>0</td><td>1</td><td>8</td><td>123</td></tr><tr><td>EU</td><td>45</td><td>142.2222</td><td>97.42174</td><td>0</td><td>59</td><td>128</td><td>195</td><td>370</td></tr><tr><td>OC</td><td>16</td><td>35.625</td><td>64.55579</td><td>0</td><td>1</td><td>8.5</td><td>23.25</td><td>212</td></tr><tr><td>SA</td><td>12</td><td>62.41667</td><td>88.62019</td><td>1</td><td>3</td><td>12</td><td>98.5</td><td>221</td></tr></tbody></table><ul><li>打印出每个大陆每种酒类别的消耗平均值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drinks.groupby(<span class="string">'continent'</span>).mean()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>beer_servings</th><th>spirit_servings</th><th>wine_servings</th><th>total_litres_of_pure_alcohol</th></tr></thead><tbody><tr><td>continent</td><td></td><td></td><td></td><td></td></tr><tr><td>AF</td><td>61.4717</td><td>16.33962</td><td>16.26415</td><td>3.007547</td></tr><tr><td>AS</td><td>37.04546</td><td>60.84091</td><td>9.068182</td><td>2.170455</td></tr><tr><td>EU</td><td>193.7778</td><td>132.5556</td><td>142.2222</td><td>8.617778</td></tr><tr><td>OC</td><td>89.6875</td><td>58.4375</td><td>35.625</td><td>3.38125</td></tr><tr><td>SA</td><td>175.0833</td><td>114.75</td><td>62.41667</td><td>6.308333</td></tr></tbody></table><ul><li>打印出每个大陆每种酒类别的消耗中位数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drinks.groupby(<span class="string">'continent'</span>).median()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>beer_servings</th><th>spirit_servings</th><th>wine_servings</th><th>total_litres_of_pure_alcohol</th></tr></thead><tbody><tr><td>continent</td><td></td><td></td><td></td><td></td></tr><tr><td>AF</td><td>32.0</td><td>3.0</td><td>2.0</td><td>2.30</td></tr><tr><td>AS</td><td>17.5</td><td>16.0</td><td>1.0</td><td>1.20</td></tr><tr><td>EU</td><td>219.0</td><td>122.0</td><td>128.0</td><td>10.00</td></tr><tr><td>OC</td><td>52.5</td><td>37.0</td><td>8.5</td><td>1.75</td></tr><tr><td>SA</td><td>162.5</td><td>108.5</td><td>12.0</td><td>6.85</td></tr></tbody></table><ul><li>打印出每个大陆对spirit饮品消耗的平均值，最大值和最小值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drinks.groupby(<span class="string">'continent'</span>).agg(&#123;<span class="string">'spirit_servings'</span>:[<span class="string">'mean'</span>,<span class="string">'max'</span>,<span class="string">'min'</span>]&#125;)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>spirit_servings</th><th></th><th></th></tr></thead><tbody><tr><td></td><td>mean</td><td>max</td><td>min</td></tr><tr><td>continent</td><td></td><td></td><td></td></tr><tr><td>AF</td><td>16.33962</td><td>152</td><td>0</td></tr><tr><td>AS</td><td>60.84091</td><td>326</td><td>0</td></tr><tr><td>EU</td><td>132.5556</td><td>373</td><td>0</td></tr><tr><td>OC</td><td>58.4375</td><td>254</td><td>0</td></tr><tr><td>SA</td><td>114.75</td><td>302</td><td>25</td></tr></tbody></table><hr><h1 id="Apply函数"><a href="#Apply函数" class="headerlink" title="Apply函数"></a>Apply函数</h1><h2 id="探索1960-2014美国犯罪数据"><a href="#探索1960-2014美国犯罪数据" class="headerlink" title="探索1960-2014美国犯罪数据"></a>探索1960-2014美国犯罪数据</h2><ul><li>将数据框命名为crime</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">crime = pd.read_csv(<span class="string">'../pydata/US_Crime_Rates_1960_2014.csv'</span>)</span><br><span class="line">crime.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Unnamed: 0</th><th>Year</th><th>Population</th><th>Total</th><th>Violent</th><th>Property</th><th>Murder</th><th>Forcible_Rape</th><th>Robbery</th><th>Aggravated_assault</th><th>Burglary</th><th>Larceny_Theft</th><th>Vehicle_Theft</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1960</td><td>179323175</td><td>3384200</td><td>288460</td><td>3095700</td><td>9110</td><td>17190</td><td>107840</td><td>154320</td><td>912100</td><td>1855400</td><td>328200</td></tr><tr><td>1</td><td>1</td><td>1961</td><td>182992000</td><td>3488000</td><td>289390</td><td>3198600</td><td>8740</td><td>17220</td><td>106670</td><td>156760</td><td>949600</td><td>1913000</td><td>336000</td></tr><tr><td>2</td><td>2</td><td>1962</td><td>185771000</td><td>3752200</td><td>301510</td><td>3450700</td><td>8530</td><td>17550</td><td>110860</td><td>164570</td><td>994300</td><td>2089600</td><td>366800</td></tr><tr><td>3</td><td>3</td><td>1963</td><td>188483000</td><td>4109500</td><td>316970</td><td>3792500</td><td>8640</td><td>17650</td><td>116470</td><td>174210</td><td>1086400</td><td>2297800</td><td>408300</td></tr><tr><td>4</td><td>4</td><td>1964</td><td>191141000</td><td>4564600</td><td>364220</td><td>4200400</td><td>9360</td><td>21420</td><td>130390</td><td>203050</td><td>1213200</td><td>2514400</td><td>472800</td></tr></tbody></table><ul><li><p>每一列(column)的数据类型是什么样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">crime.dtypes</span><br><span class="line"></span><br><span class="line">Unnamed: <span class="number">0</span>            int64</span><br><span class="line">Year                  int64</span><br><span class="line">Population            int64</span><br><span class="line">Total                 int64</span><br><span class="line">Violent               int64</span><br><span class="line">Property              int64</span><br><span class="line">Murder                int64</span><br><span class="line">Forcible_Rape         int64</span><br><span class="line">Robbery               int64</span><br><span class="line">Aggravated_assault    int64</span><br><span class="line">Burglary              int64</span><br><span class="line">Larceny_Theft         int64</span><br><span class="line">Vehicle_Theft         int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></li><li><p>将Year的数据类型转换为 datetime64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">crime.Year = pd.to_datetime(crime.Year,format=<span class="string">'%Y'</span>)</span><br><span class="line">crime.dtypes</span><br><span class="line"></span><br><span class="line">Unnamed: <span class="number">0</span>                     int64</span><br><span class="line">Year                  datetime64[ns]</span><br><span class="line">Population                     int64</span><br><span class="line">Total                          int64</span><br><span class="line">Violent                        int64</span><br><span class="line">Property                       int64</span><br><span class="line">Murder                         int64</span><br><span class="line">Forcible_Rape                  int64</span><br><span class="line">Robbery                        int64</span><br><span class="line">Aggravated_assault             int64</span><br><span class="line">Burglary                       int64</span><br><span class="line">Larceny_Theft                  int64</span><br><span class="line">Vehicle_Theft                  int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></li><li><p>将列Year设置为数据框的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crime = crime.set_index(<span class="string">'Year'</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">crime.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Unnamed: 0</th><th>Population</th><th>Total</th><th>Violent</th><th>Property</th><th>Murder</th><th>Forcible_Rape</th><th>Robbery</th><th>Aggravated_assault</th><th>Burglary</th><th>Larceny_Theft</th><th>Vehicle_Theft</th></tr></thead><tbody><tr><td>Year</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1960/1/1</td><td>0</td><td>179323175</td><td>3384200</td><td>288460</td><td>3095700</td><td>9110</td><td>17190</td><td>107840</td><td>154320</td><td>912100</td><td>1855400</td><td>328200</td></tr><tr><td>1961/1/1</td><td>1</td><td>182992000</td><td>3488000</td><td>289390</td><td>3198600</td><td>8740</td><td>17220</td><td>106670</td><td>156760</td><td>949600</td><td>1913000</td><td>336000</td></tr><tr><td>1962/1/1</td><td>2</td><td>185771000</td><td>3752200</td><td>301510</td><td>3450700</td><td>8530</td><td>17550</td><td>110860</td><td>164570</td><td>994300</td><td>2089600</td><td>366800</td></tr><tr><td>1963/1/1</td><td>3</td><td>188483000</td><td>4109500</td><td>316970</td><td>3792500</td><td>8640</td><td>17650</td><td>116470</td><td>174210</td><td>1086400</td><td>2297800</td><td>408300</td></tr><tr><td>1964/1/1</td><td>4</td><td>191141000</td><td>4564600</td><td>364220</td><td>4200400</td><td>9360</td><td>21420</td><td>130390</td><td>203050</td><td>1213200</td><td>2514400</td><td>472800</td></tr></tbody></table><ul><li>删除名为Total的列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> crime[<span class="string">'Total'</span>]</span><br><span class="line">crime.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Unnamed: 0</th><th>Population</th><th>Violent</th><th>Property</th><th>Murder</th><th>Forcible_Rape</th><th>Robbery</th><th>Aggravated_assault</th><th>Burglary</th><th>Larceny_Theft</th><th>Vehicle_Theft</th></tr></thead><tbody><tr><td>Year</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1960/1/1</td><td>0</td><td>179323175</td><td>288460</td><td>3095700</td><td>9110</td><td>17190</td><td>107840</td><td>154320</td><td>912100</td><td>1855400</td><td>328200</td></tr><tr><td>1961/1/1</td><td>1</td><td>182992000</td><td>289390</td><td>3198600</td><td>8740</td><td>17220</td><td>106670</td><td>156760</td><td>949600</td><td>1913000</td><td>336000</td></tr><tr><td>1962/1/1</td><td>2</td><td>185771000</td><td>301510</td><td>3450700</td><td>8530</td><td>17550</td><td>110860</td><td>164570</td><td>994300</td><td>2089600</td><td>366800</td></tr><tr><td>1963/1/1</td><td>3</td><td>188483000</td><td>316970</td><td>3792500</td><td>8640</td><td>17650</td><td>116470</td><td>174210</td><td>1086400</td><td>2297800</td><td>408300</td></tr><tr><td>1964/1/1</td><td>4</td><td>191141000</td><td>364220</td><td>4200400</td><td>9360</td><td>21420</td><td>130390</td><td>203050</td><td>1213200</td><td>2514400</td><td>472800</td></tr></tbody></table><ul><li>按照Year对数据框进行分组并求和<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">crimes = crime.resample(<span class="string">'10AS'</span>).sum() <span class="comment"># resample a time series per decades</span></span><br><span class="line"><span class="comment"># 用resample去得到“Population”列的最大值</span></span><br><span class="line">population = crime.Population.resample(<span class="string">'10AS'</span>).max()</span><br><span class="line"><span class="comment"># 更新 "Population" </span></span><br><span class="line">crimes[<span class="string">'Population'</span>] = population</span><br><span class="line">crimes</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Unnamed: 0</th><th>Population</th><th>Violent</th><th>Property</th><th>Murder</th><th>Forcible_Rape</th><th>Robbery</th><th>Aggravated_assault</th><th>Burglary</th><th>Larceny_Theft</th><th>Vehicle_Theft</th></tr></thead><tbody><tr><td>Year</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1960/1/1</td><td>45</td><td>201385000</td><td>4134930</td><td>45160900</td><td>106180</td><td>236720</td><td>1633510</td><td>2158520</td><td>13321100</td><td>26547700</td><td>5292100</td></tr><tr><td>1970/1/1</td><td>145</td><td>220099000</td><td>9607930</td><td>91383800</td><td>192230</td><td>554570</td><td>4159020</td><td>4702120</td><td>28486000</td><td>53157800</td><td>9739900</td></tr><tr><td>1980/1/1</td><td>245</td><td>248239000</td><td>14074328</td><td>1.17E+08</td><td>206439</td><td>865639</td><td>5383109</td><td>7619130</td><td>33073494</td><td>72040253</td><td>11935411</td></tr><tr><td>1990/1/1</td><td>345</td><td>272690813</td><td>17527048</td><td>1.19E+08</td><td>211664</td><td>998827</td><td>5748930</td><td>10568963</td><td>26750015</td><td>77679366</td><td>14624418</td></tr><tr><td>2000/1/1</td><td>445</td><td>307006550</td><td>13968056</td><td>1.01E+08</td><td>163068</td><td>922499</td><td>4230366</td><td>8652124</td><td>21565176</td><td>67970291</td><td>11412834</td></tr><tr><td>2010/1/1</td><td>260</td><td>318857056</td><td>6072017</td><td>44095950</td><td>72867</td><td>421059</td><td>1749809</td><td>3764142</td><td>10125170</td><td>30401698</td><td>3569080</td></tr><tr><td>2020/1/1</td><td>0</td><td>NaN</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><ul><li>何时是美国历史上生存最危险的年代<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">crime.idxmax(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Unnamed: <span class="number">0</span>           <span class="number">2014</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Population           <span class="number">2014</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Violent              <span class="number">1992</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Property             <span class="number">1991</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Murder               <span class="number">1991</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Forcible_Rape        <span class="number">1992</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Robbery              <span class="number">1991</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Aggravated_assault   <span class="number">1993</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Burglary             <span class="number">1980</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Larceny_Theft        <span class="number">1991</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">Vehicle_Theft        <span class="number">1991</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">dtype: datetime64[ns]</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h1><h2 id="探索虚拟姓名数据"><a href="#探索虚拟姓名数据" class="headerlink" title="探索虚拟姓名数据"></a>探索虚拟姓名数据</h2><ul><li>按照如下的元数据内容创建数据框</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">raw_data_1 = &#123;</span><br><span class="line">        <span class="string">'subject_id'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>],</span><br><span class="line">        <span class="string">'first_name'</span>: [<span class="string">'Alex'</span>, <span class="string">'Amy'</span>, <span class="string">'Allen'</span>, <span class="string">'Alice'</span>, <span class="string">'Ayoung'</span>], </span><br><span class="line">        <span class="string">'last_name'</span>: [<span class="string">'Anderson'</span>, <span class="string">'Ackerman'</span>, <span class="string">'Ali'</span>, <span class="string">'Aoni'</span>, <span class="string">'Atiches'</span>]&#125;</span><br><span class="line"></span><br><span class="line">raw_data_2 = &#123;</span><br><span class="line">        <span class="string">'subject_id'</span>: [<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>],</span><br><span class="line">        <span class="string">'first_name'</span>: [<span class="string">'Billy'</span>, <span class="string">'Brian'</span>, <span class="string">'Bran'</span>, <span class="string">'Bryce'</span>, <span class="string">'Betty'</span>], </span><br><span class="line">        <span class="string">'last_name'</span>: [<span class="string">'Bonder'</span>, <span class="string">'Black'</span>, <span class="string">'Balwner'</span>, <span class="string">'Brice'</span>, <span class="string">'Btisan'</span>]&#125;</span><br><span class="line"></span><br><span class="line">raw_data_3 = &#123;</span><br><span class="line">        <span class="string">'subject_id'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>],</span><br><span class="line">        <span class="string">'test_id'</span>: [<span class="number">51</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">61</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">61</span>, <span class="number">16</span>]&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将上述的数据框分别命名为data1, data2, data3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data1 = pd.DataFrame(raw_data_1)</span><br><span class="line">data2 = pd.DataFrame(raw_data_2)</span><br><span class="line">data3 = pd.DataFrame(raw_data_3)</span><br></pre></td></tr></table></figure></li><li><p>将data1和data2两个数据框按照行的维度进行合并，命名为all_data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_data = pd.concat([data1,data2])</span><br><span class="line">all_data</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>subject_id</th><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>Alex</td><td>Anderson</td></tr><tr><td>1</td><td>2</td><td>Amy</td><td>Ackerman</td></tr><tr><td>2</td><td>3</td><td>Allen</td><td>Ali</td></tr><tr><td>3</td><td>4</td><td>Alice</td><td>Aoni</td></tr><tr><td>4</td><td>5</td><td>Ayoung</td><td>Atiches</td></tr><tr><td>0</td><td>4</td><td>Billy</td><td>Bonder</td></tr><tr><td>1</td><td>5</td><td>Brian</td><td>Black</td></tr><tr><td>2</td><td>6</td><td>Bran</td><td>Balwner</td></tr><tr><td>3</td><td>7</td><td>Bryce</td><td>Brice</td></tr><tr><td>4</td><td>8</td><td>Betty</td><td>Btisan</td></tr></tbody></table><ul><li>将data1和data2两个数据框按照列的维度进行合并，命名为all_data_col<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_data_col = pd.concat([data1,data2],axis=<span class="number">1</span>)</span><br><span class="line">all_data_col</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>subject_id</th><th>first_name</th><th>last_name</th><th>subject_id</th><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>Alex</td><td>Anderson</td><td>4</td><td>Billy</td><td>Bonder</td></tr><tr><td>1</td><td>2</td><td>Amy</td><td>Ackerman</td><td>5</td><td>Brian</td><td>Black</td></tr><tr><td>2</td><td>3</td><td>Allen</td><td>Ali</td><td>6</td><td>Bran</td><td>Balwner</td></tr><tr><td>3</td><td>4</td><td>Alice</td><td>Aoni</td><td>7</td><td>Bryce</td><td>Brice</td></tr><tr><td>4</td><td>5</td><td>Ayoung</td><td>Atiches</td><td>8</td><td>Betty</td><td>Btisan</td></tr></tbody></table><ul><li>打印data3</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data3</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>subject_id</th><th>test_id</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>51</td></tr><tr><td>1</td><td>2</td><td>15</td></tr><tr><td>2</td><td>3</td><td>15</td></tr><tr><td>3</td><td>4</td><td>61</td></tr><tr><td>4</td><td>5</td><td>16</td></tr><tr><td>5</td><td>7</td><td>14</td></tr><tr><td>6</td><td>8</td><td>15</td></tr><tr><td>7</td><td>9</td><td>1</td></tr><tr><td>8</td><td>10</td><td>61</td></tr><tr><td>9</td><td>11</td><td>16</td></tr></tbody></table><ul><li>按照subject_id的值对all_data和data3作合并<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(all_data,data3,on=<span class="string">'subject_id'</span>,how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>subject_id</th><th>first_name</th><th>last_name</th><th>test_id</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>Alex</td><td>Anderson</td><td>51</td></tr><tr><td>1</td><td>2</td><td>Amy</td><td>Ackerman</td><td>15</td></tr><tr><td>2</td><td>3</td><td>Allen</td><td>Ali</td><td>15</td></tr><tr><td>3</td><td>4</td><td>Alice</td><td>Aoni</td><td>61</td></tr><tr><td>4</td><td>4</td><td>Billy</td><td>Bonder</td><td>61</td></tr><tr><td>5</td><td>5</td><td>Ayoung</td><td>Atiches</td><td>16</td></tr><tr><td>6</td><td>5</td><td>Brian</td><td>Black</td><td>16</td></tr><tr><td>7</td><td>6</td><td>Bran</td><td>Balwner</td><td>NaN</td></tr><tr><td>8</td><td>7</td><td>Bryce</td><td>Brice</td><td>14</td></tr><tr><td>9</td><td>8</td><td>Betty</td><td>Btisan</td><td>15</td></tr><tr><td>10</td><td>9</td><td>NaN</td><td>NaN</td><td>1</td></tr><tr><td>11</td><td>10</td><td>NaN</td><td>NaN</td><td>61</td></tr><tr><td>12</td><td>11</td><td>NaN</td><td>NaN</td><td>16</td></tr></tbody></table><ul><li>对data1和data2按照subject_id作连接<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(data1,data2,on=<span class="string">'subject_id'</span>)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>subject_id</th><th>first_name_x</th><th>last_name_x</th><th>first_name_y</th><th>last_name_y</th></tr></thead><tbody><tr><td>0</td><td>4</td><td>Alice</td><td>Aoni</td><td>Billy</td><td>Bonder</td></tr><tr><td>1</td><td>5</td><td>Ayoung</td><td>Atiches</td><td>Brian</td><td>Black</td></tr></tbody></table><ul><li>找到 data1 和 data2 合并之后的所有匹配结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(data1,data2,on=<span class="string">'subject_id'</span>,how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>subject_id</th><th>first_name_x</th><th>last_name_x</th><th>first_name_y</th><th>last_name_y</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>Alex</td><td>Anderson</td><td>NaN</td><td>NaN</td></tr><tr><td>1</td><td>2</td><td>Amy</td><td>Ackerman</td><td>NaN</td><td>NaN</td></tr><tr><td>2</td><td>3</td><td>Allen</td><td>Ali</td><td>NaN</td><td>NaN</td></tr><tr><td>3</td><td>4</td><td>Alice</td><td>Aoni</td><td>Billy</td><td>Bonder</td></tr><tr><td>4</td><td>5</td><td>Ayoung</td><td>Atiches</td><td>Brian</td><td>Black</td></tr><tr><td>5</td><td>6</td><td>NaN</td><td>NaN</td><td>Bran</td><td>Balwner</td></tr><tr><td>6</td><td>7</td><td>NaN</td><td>NaN</td><td>Bryce</td><td>Brice</td></tr><tr><td>7</td><td>8</td><td>NaN</td><td>NaN</td><td>Betty</td><td>Btisan</td></tr></tbody></table><hr><h1 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h1><h2 id="探索风速数据"><a href="#探索风速数据" class="headerlink" title="探索风速数据"></a>探索风速数据</h2><ul><li>将数据作存储并且设置前三列为合适的索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'../pydata/wind.csv'</span>,<span class="string">'\s+'</span>,parse_dates=[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Yr_Mo_Dy</th><th>RPT</th><th>VAL</th><th>ROS</th><th>KIL</th><th>SHA</th><th>BIR</th><th>DUB</th><th>CLA</th><th>MUL</th><th>CLO</th><th>BEL</th><th>MAL</th></tr></thead><tbody><tr><td>0</td><td>2061/1/1</td><td>15.04</td><td>14.96</td><td>13.17</td><td>9.29</td><td>NaN</td><td>9.87</td><td>13.67</td><td>10.25</td><td>10.83</td><td>12.58</td><td>18.5</td><td>15.04</td></tr><tr><td>1</td><td>2061/1/2</td><td>14.71</td><td>NaN</td><td>10.83</td><td>6.5</td><td>12.62</td><td>7.67</td><td>11.5</td><td>10.04</td><td>9.79</td><td>9.67</td><td>17.54</td><td>13.83</td></tr><tr><td>2</td><td>2061/1/3</td><td>18.5</td><td>16.88</td><td>12.33</td><td>10.13</td><td>11.17</td><td>6.17</td><td>11.25</td><td>NaN</td><td>8.5</td><td>7.67</td><td>12.75</td><td>12.71</td></tr><tr><td>3</td><td>2061/1/4</td><td>10.58</td><td>6.63</td><td>11.75</td><td>4.58</td><td>4.54</td><td>2.88</td><td>8.63</td><td>1.79</td><td>5.83</td><td>5.88</td><td>5.46</td><td>10.88</td></tr><tr><td>4</td><td>2061/1/5</td><td>13.33</td><td>13.25</td><td>11.42</td><td>6.17</td><td>10.71</td><td>8.21</td><td>11.92</td><td>6.54</td><td>10.92</td><td>10.34</td><td>12.92</td><td>11.83</td></tr></tbody></table><ul><li>2061年？我们真的有这一年的数据？创建一个函数并用它去修复这个bug<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_century</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x.year &gt; <span class="number">1989</span>:</span><br><span class="line">        year = x.year - <span class="number">100</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        year = x.year</span><br><span class="line">    <span class="keyword">return</span> datetime.date(year,x.month,x.day)</span><br><span class="line"></span><br><span class="line">data[<span class="string">'Yr_Mo_Dy'</span>] = data[<span class="string">'Yr_Mo_Dy'</span>].apply(fix_century)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Yr_Mo_Dy</th><th>RPT</th><th>VAL</th><th>ROS</th><th>KIL</th><th>SHA</th><th>BIR</th><th>DUB</th><th>CLA</th><th>MUL</th><th>CLO</th><th>BEL</th><th>MAL</th></tr></thead><tbody><tr><td>0</td><td>1961/1/1</td><td>15.04</td><td>14.96</td><td>13.17</td><td>9.29</td><td>NaN</td><td>9.87</td><td>13.67</td><td>10.25</td><td>10.83</td><td>12.58</td><td>18.5</td><td>15.04</td></tr><tr><td>1</td><td>1961/1/2</td><td>14.71</td><td>NaN</td><td>10.83</td><td>6.5</td><td>12.62</td><td>7.67</td><td>11.5</td><td>10.04</td><td>9.79</td><td>9.67</td><td>17.54</td><td>13.83</td></tr><tr><td>2</td><td>1961/1/3</td><td>18.5</td><td>16.88</td><td>12.33</td><td>10.13</td><td>11.17</td><td>6.17</td><td>11.25</td><td>NaN</td><td>8.5</td><td>7.67</td><td>12.75</td><td>12.71</td></tr><tr><td>3</td><td>1961/1/4</td><td>10.58</td><td>6.63</td><td>11.75</td><td>4.58</td><td>4.54</td><td>2.88</td><td>8.63</td><td>1.79</td><td>5.83</td><td>5.88</td><td>5.46</td><td>10.88</td></tr><tr><td>4</td><td>1961/1/5</td><td>13.33</td><td>13.25</td><td>11.42</td><td>6.17</td><td>10.71</td><td>8.21</td><td>11.92</td><td>6.54</td><td>10.92</td><td>10.34</td><td>12.92</td><td>11.83</td></tr></tbody></table><ul><li>将日期设为索引，注意数据类型，应该是datetime64[ns]<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'Yr_Mo_Dy'</span>] = pd.to_datetime(data.Yr_Mo_Dyd)</span><br><span class="line">data = data.set_index(<span class="string">'Yr_Mo_Dy'</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>RPT</th><th>VAL</th><th>ROS</th><th>KIL</th><th>SHA</th><th>BIR</th><th>DUB</th><th>CLA</th><th>MUL</th><th>CLO</th><th>BEL</th><th>MAL</th></tr></thead><tbody><tr><td>Yr_Mo_Dy</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1961/1/1</td><td>15.04</td><td>14.96</td><td>13.17</td><td>9.29</td><td>NaN</td><td>9.87</td><td>13.67</td><td>10.25</td><td>10.83</td><td>12.58</td><td>18.5</td><td>15.04</td></tr><tr><td>1961/1/2</td><td>14.71</td><td>NaN</td><td>10.83</td><td>6.5</td><td>12.62</td><td>7.67</td><td>11.5</td><td>10.04</td><td>9.79</td><td>9.67</td><td>17.54</td><td>13.83</td></tr><tr><td>1961/1/3</td><td>18.5</td><td>16.88</td><td>12.33</td><td>10.13</td><td>11.17</td><td>6.17</td><td>11.25</td><td>NaN</td><td>8.5</td><td>7.67</td><td>12.75</td><td>12.71</td></tr><tr><td>1961/1/4</td><td>10.58</td><td>6.63</td><td>11.75</td><td>4.58</td><td>4.54</td><td>2.88</td><td>8.63</td><td>1.79</td><td>5.83</td><td>5.88</td><td>5.46</td><td>10.88</td></tr><tr><td>1961/1/5</td><td>13.33</td><td>13.25</td><td>11.42</td><td>6.17</td><td>10.71</td><td>8.21</td><td>11.92</td><td>6.54</td><td>10.92</td><td>10.34</td><td>12.92</td><td>11.83</td></tr></tbody></table><ul><li><p>对应每一个location，一共有多少数据值缺失</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data.isnull().sum()</span><br><span class="line"></span><br><span class="line">RPT    <span class="number">6</span></span><br><span class="line">VAL    <span class="number">3</span></span><br><span class="line">ROS    <span class="number">2</span></span><br><span class="line">KIL    <span class="number">5</span></span><br><span class="line">SHA    <span class="number">2</span></span><br><span class="line">BIR    <span class="number">0</span></span><br><span class="line">DUB    <span class="number">3</span></span><br><span class="line">CLA    <span class="number">2</span></span><br><span class="line">MUL    <span class="number">3</span></span><br><span class="line">CLO    <span class="number">1</span></span><br><span class="line">BEL    <span class="number">0</span></span><br><span class="line">MAL    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li><li><p>对应每一个location，一共有多少完整的数据值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data.notnull().sum()</span><br><span class="line"></span><br><span class="line">RPT    <span class="number">6568</span></span><br><span class="line">VAL    <span class="number">6571</span></span><br><span class="line">ROS    <span class="number">6572</span></span><br><span class="line">KIL    <span class="number">6569</span></span><br><span class="line">SHA    <span class="number">6572</span></span><br><span class="line">BIR    <span class="number">6574</span></span><br><span class="line">DUB    <span class="number">6571</span></span><br><span class="line">CLA    <span class="number">6572</span></span><br><span class="line">MUL    <span class="number">6571</span></span><br><span class="line">CLO    <span class="number">6573</span></span><br><span class="line">BEL    <span class="number">6574</span></span><br><span class="line">MAL    <span class="number">6570</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li><li><p>对于全体数据，计算风速的平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data.mean().mean()</span><br><span class="line"></span><br><span class="line"><span class="number">10.227982360836924</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个名为loc_stats的数据框去计算并存储每个location的风速最小值，最大值，平均值和标准差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loc_stats = pd.DataFrame()</span><br><span class="line">loc_stats[<span class="string">'max'</span>] = data.max()</span><br><span class="line">loc_stats[<span class="string">'min'</span>] = data.min()</span><br><span class="line">loc_stats[<span class="string">'mean'</span>] = data.mean()</span><br><span class="line">loc_stats[<span class="string">'std'</span>] = data.std()</span><br><span class="line">loc_stats</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>max</th><th>min</th><th>mean</th><th>std</th></tr></thead><tbody><tr><td>RPT</td><td>35.8</td><td>0.67</td><td>12.362987</td><td>5.618413</td></tr><tr><td>VAL</td><td>33.37</td><td>0.21</td><td>10.644314</td><td>5.267356</td></tr><tr><td>ROS</td><td>33.84</td><td>1.5</td><td>11.660526</td><td>5.00845</td></tr><tr><td>KIL</td><td>28.46</td><td>0</td><td>6.306468</td><td>3.605811</td></tr><tr><td>SHA</td><td>37.54</td><td>0.13</td><td>10.455834</td><td>4.936125</td></tr><tr><td>BIR</td><td>26.16</td><td>0</td><td>7.092254</td><td>3.968683</td></tr><tr><td>DUB</td><td>30.37</td><td>0</td><td>9.797343</td><td>4.977555</td></tr><tr><td>CLA</td><td>31.08</td><td>0</td><td>8.495053</td><td>4.499449</td></tr><tr><td>MUL</td><td>25.88</td><td>0</td><td>8.49359</td><td>4.166872</td></tr><tr><td>CLO</td><td>28.21</td><td>0.04</td><td>8.707332</td><td>4.503954</td></tr><tr><td>BEL</td><td>42.38</td><td>0.13</td><td>13.121007</td><td>5.835037</td></tr><tr><td>MAL</td><td>42.54</td><td>0.67</td><td>15.599079</td><td>6.699794</td></tr></tbody></table><ul><li>创建一个名为day_stats的数据框去计算并存储所有location的风速最小值，最大值，平均值和标准差<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">day_stats = pd.DataFrame()</span><br><span class="line">day_stats[<span class="string">'min'</span>] = data.min(axis=<span class="number">1</span>)</span><br><span class="line">day_stats[<span class="string">'max'</span>] = data.max(axis=<span class="number">1</span>)</span><br><span class="line">day_stats[<span class="string">'mean'</span>] = data.mean(axis=<span class="number">1</span>)</span><br><span class="line">day_stats[<span class="string">'std'</span>] = data.std(axis=<span class="number">1</span>)</span><br><span class="line">day_stats.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>min</th><th>max</th><th>mean</th><th>std</th></tr></thead><tbody><tr><td>Yr_Mo_Dy</td><td></td><td></td><td></td><td></td></tr><tr><td>1961/1/1</td><td>9.29</td><td>18.5</td><td>13.018182</td><td>2.808875</td></tr><tr><td>1961/1/2</td><td>6.5</td><td>17.54</td><td>11.336364</td><td>3.188994</td></tr><tr><td>1961/1/3</td><td>6.17</td><td>18.5</td><td>11.641818</td><td>3.681912</td></tr><tr><td>1961/1/4</td><td>1.79</td><td>11.75</td><td>6.619167</td><td>3.198126</td></tr><tr><td>1961/1/5</td><td>6.17</td><td>13.33</td><td>10.63</td><td>2.445356</td></tr></tbody></table><ul><li><p>对于每一个location，计算一月份的平均风速</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'date'</span>] = data.index</span><br><span class="line">data[<span class="string">'year'</span>] = data.date.apply(<span class="keyword">lambda</span> x : x.year)</span><br><span class="line">data[<span class="string">'month'</span>] = data.date.apply(<span class="keyword">lambda</span> x : x.month)</span><br><span class="line">data[<span class="string">'day'</span>] = data.date.apply(<span class="keyword">lambda</span> x : x.day)</span><br><span class="line">january_winds =data.query(<span class="string">'month == 1'</span>)</span><br><span class="line">january_winds.loc[:,<span class="string">'RPT'</span>:<span class="string">'MAL'</span>].mean()</span><br><span class="line"></span><br><span class="line">RPT    <span class="number">14.847325</span></span><br><span class="line">VAL    <span class="number">12.914560</span></span><br><span class="line">ROS    <span class="number">13.299624</span></span><br><span class="line">KIL     <span class="number">7.199498</span></span><br><span class="line">SHA    <span class="number">11.667734</span></span><br><span class="line">BIR     <span class="number">8.054839</span></span><br><span class="line">DUB    <span class="number">11.819355</span></span><br><span class="line">CLA     <span class="number">9.512047</span></span><br><span class="line">MUL     <span class="number">9.543208</span></span><br><span class="line">CLO    <span class="number">10.053566</span></span><br><span class="line">BEL    <span class="number">14.550520</span></span><br><span class="line">MAL    <span class="number">18.028763</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></li><li><p>对于数据记录按照年为频率取样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_year = data.query(<span class="string">'month==1 and day == 1'</span> )</span><br><span class="line">data_year</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>RPT</th><th>VAL</th><th>ROS</th><th>KIL</th><th>SHA</th><th>BIR</th><th>DUB</th><th>CLA</th><th>MUL</th><th>CLO</th><th>BEL</th><th>MAL</th><th>date</th><th>year</th><th>month</th><th>day</th></tr></thead><tbody><tr><td>Yr_Mo_Dy</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1961/1/1</td><td>15.04</td><td>14.96</td><td>13.17</td><td>9.29</td><td>NaN</td><td>9.87</td><td>13.67</td><td>10.25</td><td>10.83</td><td>12.58</td><td>18.5</td><td>15.04</td><td>1961/1/1</td><td>1961</td><td>1</td><td>1</td></tr><tr><td>1962/1/1</td><td>9.29</td><td>3.42</td><td>11.54</td><td>3.5</td><td>2.21</td><td>1.96</td><td>10.41</td><td>2.79</td><td>3.54</td><td>5.17</td><td>4.38</td><td>7.92</td><td>1962/1/1</td><td>1962</td><td>1</td><td>1</td></tr><tr><td>1963/1/1</td><td>15.59</td><td>13.62</td><td>19.79</td><td>8.38</td><td>12.25</td><td>10</td><td>23.45</td><td>15.71</td><td>13.59</td><td>14.37</td><td>17.58</td><td>34.13</td><td>1963/1/1</td><td>1963</td><td>1</td><td>1</td></tr><tr><td>1964/1/1</td><td>25.8</td><td>22.13</td><td>18.21</td><td>13.25</td><td>21.29</td><td>14.79</td><td>14.12</td><td>19.58</td><td>13.25</td><td>16.75</td><td>28.96</td><td>21</td><td>1964/1/1</td><td>1964</td><td>1</td><td>1</td></tr><tr><td>1965/1/1</td><td>9.54</td><td>11.92</td><td>9</td><td>4.38</td><td>6.08</td><td>5.21</td><td>10.25</td><td>6.08</td><td>5.71</td><td>8.63</td><td>12.04</td><td>17.41</td><td>1965/1/1</td><td>1965</td><td>1</td><td>1</td></tr><tr><td>1966/1/1</td><td>22.04</td><td>21.5</td><td>17.08</td><td>12.75</td><td>22.17</td><td>15.59</td><td>21.79</td><td>18.12</td><td>16.66</td><td>17.83</td><td>28.33</td><td>23.79</td><td>1966/1/1</td><td>1966</td><td>1</td><td>1</td></tr><tr><td>1967/1/1</td><td>6.46</td><td>4.46</td><td>6.5</td><td>3.21</td><td>6.67</td><td>3.79</td><td>11.38</td><td>3.83</td><td>7.71</td><td>9.08</td><td>10.67</td><td>20.91</td><td>1967/1/1</td><td>1967</td><td>1</td><td>1</td></tr><tr><td>1968/1/1</td><td>30.04</td><td>17.88</td><td>16.25</td><td>16.25</td><td>21.79</td><td>12.54</td><td>18.16</td><td>16.62</td><td>18.75</td><td>17.62</td><td>22.25</td><td>27.29</td><td>1968/1/1</td><td>1968</td><td>1</td><td>1</td></tr><tr><td>1969/1/1</td><td>6.13</td><td>1.63</td><td>5.41</td><td>1.08</td><td>2.54</td><td>1</td><td>8.5</td><td>2.42</td><td>4.58</td><td>6.34</td><td>9.17</td><td>16.71</td><td>1969/1/1</td><td>1969</td><td>1</td><td>1</td></tr><tr><td>1970/1/1</td><td>9.59</td><td>2.96</td><td>11.79</td><td>3.42</td><td>6.13</td><td>4.08</td><td>9</td><td>4.46</td><td>7.29</td><td>3.5</td><td>7.33</td><td>13</td><td>1970/1/1</td><td>1970</td><td>1</td><td>1</td></tr><tr><td>1971/1/1</td><td>3.71</td><td>0.79</td><td>4.71</td><td>0.17</td><td>1.42</td><td>1.04</td><td>4.63</td><td>0.75</td><td>1.54</td><td>1.08</td><td>4.21</td><td>9.54</td><td>1971/1/1</td><td>1971</td><td>1</td><td>1</td></tr><tr><td>1972/1/1</td><td>9.29</td><td>3.63</td><td>14.54</td><td>4.25</td><td>6.75</td><td>4.42</td><td>13</td><td>5.33</td><td>10.04</td><td>8.54</td><td>8.71</td><td>19.17</td><td>1972/1/1</td><td>1972</td><td>1</td><td>1</td></tr><tr><td>1973/1/1</td><td>16.5</td><td>15.92</td><td>14.62</td><td>7.41</td><td>8.29</td><td>11.21</td><td>13.54</td><td>7.79</td><td>10.46</td><td>10.79</td><td>13.37</td><td>9.71</td><td>1973/1/1</td><td>1973</td><td>1</td><td>1</td></tr><tr><td>1974/1/1</td><td>23.21</td><td>16.54</td><td>16.08</td><td>9.75</td><td>15.83</td><td>11.46</td><td>9.54</td><td>13.54</td><td>13.83</td><td>16.66</td><td>17.21</td><td>25.29</td><td>1974/1/1</td><td>1974</td><td>1</td><td>1</td></tr><tr><td>1975/1/1</td><td>14.04</td><td>13.54</td><td>11.29</td><td>5.46</td><td>12.58</td><td>5.58</td><td>8.12</td><td>8.96</td><td>9.29</td><td>5.17</td><td>7.71</td><td>11.63</td><td>1975/1/1</td><td>1975</td><td>1</td><td>1</td></tr><tr><td>1976/1/1</td><td>18.34</td><td>17.67</td><td>14.83</td><td>8</td><td>16.62</td><td>10.13</td><td>13.17</td><td>9.04</td><td>13.13</td><td>5.75</td><td>11.38</td><td>14.96</td><td>1976/1/1</td><td>1976</td><td>1</td><td>1</td></tr><tr><td>1977/1/1</td><td>20.04</td><td>11.92</td><td>20.25</td><td>9.13</td><td>9.29</td><td>8.04</td><td>10.75</td><td>5.88</td><td>9</td><td>9</td><td>14.88</td><td>25.7</td><td>1977/1/1</td><td>1977</td><td>1</td><td>1</td></tr><tr><td>1978/1/1</td><td>8.33</td><td>7.12</td><td>7.71</td><td>3.54</td><td>8.5</td><td>7.5</td><td>14.71</td><td>10</td><td>11.83</td><td>10</td><td>15.09</td><td>20.46</td><td>1978/1/1</td><td>1978</td><td>1</td><td>1</td></tr></tbody></table><ul><li>对于数据记录按照月为频率取样<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.query(<span class="string">'day == 1'</span>)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>RPT</th><th>VAL</th><th>ROS</th><th>KIL</th><th>SHA</th><th>BIR</th><th>DUB</th><th>CLA</th><th>MUL</th><th>CLO</th><th>BEL</th><th>MAL</th><th>date</th><th>year</th><th>month</th><th>day</th></tr></thead><tbody><tr><td>Yr_Mo_Dy</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1961/1/1</td><td>15.04</td><td>14.96</td><td>13.17</td><td>9.29</td><td>NaN</td><td>9.87</td><td>13.67</td><td>10.25</td><td>10.83</td><td>12.58</td><td>18.5</td><td>15.04</td><td>1961/1/1</td><td>1961</td><td>1</td><td>1</td></tr><tr><td>1961/2/1</td><td>14.25</td><td>15.12</td><td>9.04</td><td>5.88</td><td>12.08</td><td>7.17</td><td>10.17</td><td>3.63</td><td>6.5</td><td>5.5</td><td>9.17</td><td>8</td><td>1961/2/1</td><td>1961</td><td>2</td><td>1</td></tr><tr><td>1961/3/1</td><td>12.67</td><td>13.13</td><td>11.79</td><td>6.42</td><td>9.79</td><td>8.54</td><td>10.25</td><td>13.29</td><td>NaN</td><td>12.21</td><td>20.62</td><td>NaN</td><td>1961/3/1</td><td>1961</td><td>3</td><td>1</td></tr><tr><td>1961/4/1</td><td>8.38</td><td>6.34</td><td>8.33</td><td>6.75</td><td>9.33</td><td>9.54</td><td>11.67</td><td>8.21</td><td>11.21</td><td>6.46</td><td>11.96</td><td>7.17</td><td>1961/4/1</td><td>1961</td><td>4</td><td>1</td></tr><tr><td>1961/5/1</td><td>15.87</td><td>13.88</td><td>15.37</td><td>9.79</td><td>13.46</td><td>10.17</td><td>9.96</td><td>14.04</td><td>9.75</td><td>9.92</td><td>18.63</td><td>11.12</td><td>1961/5/1</td><td>1961</td><td>5</td><td>1</td></tr><tr><td>1961/6/1</td><td>15.92</td><td>9.59</td><td>12.04</td><td>8.79</td><td>11.54</td><td>6.04</td><td>9.75</td><td>8.29</td><td>9.33</td><td>10.34</td><td>10.67</td><td>12.12</td><td>1961/6/1</td><td>1961</td><td>6</td><td>1</td></tr><tr><td>1961/7/1</td><td>7.21</td><td>6.83</td><td>7.71</td><td>4.42</td><td>8.46</td><td>4.79</td><td>6.71</td><td>6</td><td>5.79</td><td>7.96</td><td>6.96</td><td>8.71</td><td>1961/7/1</td><td>1961</td><td>7</td><td>1</td></tr></tbody></table><hr><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><h2 id="探索泰坦尼克灾难数据"><a href="#探索泰坦尼克灾难数据" class="headerlink" title="探索泰坦尼克灾难数据"></a>探索泰坦尼克灾难数据</h2><ul><li>将数据框命名为titanic</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">titanic = pd.read_csv(<span class="string">'../pydata/train.csv'</span>)</span><br><span class="line">titanic.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund,   Mr. Owen Harris</td><td>male</td><td>22</td><td>1</td><td>0</td><td>A/5   21171</td><td>7.25</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings,   Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38</td><td>1</td><td>0</td><td>PC   17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen,   Miss. Laina</td><td>female</td><td>26</td><td>0</td><td>0</td><td>STON/O2.   3101282</td><td>7.925</td><td>NaN</td><td>S</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle,   Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35</td><td>1</td><td>0</td><td>113803</td><td>53.1</td><td>C123</td><td>S</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen,   Mr. William Henry</td><td>male</td><td>35</td><td>0</td><td>0</td><td>373450</td><td>8.05</td><td>NaN</td><td>S</td></tr></tbody></table><ul><li>将PassengerId设置为索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">titanic = titanic.set_index(<span class="string">'PassengerId'</span>)</span><br><span class="line">titanic.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SibSp</th><th>Parch</th><th>Ticket</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>PassengerId</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>0</td><td>3</td><td>Braund,   Mr. Owen Harris</td><td>male</td><td>22</td><td>1</td><td>0</td><td>A/5   21171</td><td>7.25</td><td>NaN</td><td>S</td></tr><tr><td>2</td><td>1</td><td>1</td><td>Cumings,   Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38</td><td>1</td><td>0</td><td>PC   17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>3</td><td>1</td><td>3</td><td>Heikkinen,   Miss. Laina</td><td>female</td><td>26</td><td>0</td><td>0</td><td>STON/O2.   3101282</td><td>7.925</td><td>NaN</td><td>S</td></tr><tr><td>4</td><td>1</td><td>1</td><td>Futrelle,   Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35</td><td>1</td><td>0</td><td>113803</td><td>53.1</td><td>C123</td><td>S</td></tr><tr><td>5</td><td>0</td><td>3</td><td>Allen,   Mr. William Henry</td><td>male</td><td>35</td><td>0</td><td>0</td><td>373450</td><td>8.05</td><td>NaN</td><td>S</td></tr></tbody></table><ul><li>绘制一个展示男女乘客比例的扇形图<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">males = (titanic[<span class="string">'Sex'</span>] == <span class="string">'male'</span>).sum()</span><br><span class="line">females = (titanic[<span class="string">'Sex'</span>] == <span class="string">'female'</span>).sum()</span><br><span class="line">proportions = [males,females]</span><br><span class="line">plt.pie(proportions,</span><br><span class="line">       labels = [<span class="string">'Males'</span>,<span class="string">'Females'</span>],</span><br><span class="line">       autopct = <span class="string">'%1.1f%%'</span>)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>)</span><br><span class="line">plt.title(<span class="string">'Sex Proportion'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/titanic.png" alt=""></p><ul><li>绘制一个展示船票Fare, 与乘客年龄和性别的散点图<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lm = sns.lmplot(x = <span class="string">'Age'</span>, y = <span class="string">'Fare'</span>, data = titanic, hue = <span class="string">'Sex'</span>, fit_reg=<span class="keyword">False</span>)</span><br><span class="line">lm.set(title = <span class="string">'Fare x Age'</span>)</span><br><span class="line">axes = lm.axes</span><br><span class="line">axes[<span class="number">0</span>,<span class="number">0</span>].set_ylim(<span class="number">-5</span>,)</span><br><span class="line">axes[<span class="number">0</span>,<span class="number">0</span>].set_xlim(<span class="number">-5</span>,<span class="number">85</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/titanic_axes.png" alt=""></p><ul><li><p>有多少人生还</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">titanic[<span class="string">'Survived'</span>].sum()</span><br><span class="line"></span><br><span class="line"><span class="number">342</span></span><br></pre></td></tr></table></figure></li><li><p>绘制一个展示船票价格的直方图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = titanic.Fare.sort_values(ascending=<span class="keyword">False</span>)</span><br><span class="line">binsVal = np.arange(<span class="number">0</span>,<span class="number">600</span>,<span class="number">10</span>)</span><br><span class="line">plt.hist(df,bins=binsVal)</span><br><span class="line">plt.xlabel(<span class="string">'Fare'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Frequency'</span>)</span><br><span class="line">plt.title(<span class="string">'Fare Payed Histrogram'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/titanic_hist.png" alt=""></p><hr><h1 id="创建数据框"><a href="#创建数据框" class="headerlink" title="创建数据框"></a>创建数据框</h1><h2 id="探索Pokemon数据"><a href="#探索Pokemon数据" class="headerlink" title="探索Pokemon数据"></a>探索Pokemon数据</h2><ul><li>创建一个数据字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">"name"</span>: [<span class="string">'Bulbasaur'</span>, <span class="string">'Charmander'</span>,<span class="string">'Squirtle'</span>,<span class="string">'Caterpie'</span>],</span><br><span class="line">            <span class="string">"evolution"</span>: [<span class="string">'Ivysaur'</span>,<span class="string">'Charmeleon'</span>,<span class="string">'Wartortle'</span>,<span class="string">'Metapod'</span>],</span><br><span class="line">            <span class="string">"type"</span>: [<span class="string">'grass'</span>, <span class="string">'fire'</span>, <span class="string">'water'</span>, <span class="string">'bug'</span>],</span><br><span class="line">            <span class="string">"hp"</span>: [<span class="number">45</span>, <span class="number">39</span>, <span class="number">44</span>, <span class="number">45</span>],</span><br><span class="line">            <span class="string">"pokedex"</span>: [<span class="string">'yes'</span>, <span class="string">'no'</span>,<span class="string">'yes'</span>,<span class="string">'no'</span>]                        </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li>将数据字典存为一个名叫pokemon的数据框中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pokemon = pd.DataFrame(data)</span><br><span class="line">pokemon</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>name</th><th>evolution</th><th>type</th><th>hp</th><th>pokedex</th></tr></thead><tbody><tr><td>0</td><td>Bulbasaur</td><td>Ivysaur</td><td>grass</td><td>45</td><td>yes</td></tr><tr><td>1</td><td>Charmander</td><td>Charmeleon</td><td>fire</td><td>39</td><td>no</td></tr><tr><td>2</td><td>Squirtle</td><td>Wartortle</td><td>water</td><td>44</td><td>yes</td></tr><tr><td>3</td><td>Caterpie</td><td>Metapod</td><td>bug</td><td>45</td><td>no</td></tr></tbody></table><ul><li>数据框的列排序是字母顺序，请重新修改为name, type, hp, evolution, pokedex这个顺序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pokemon = pokemon[[<span class="string">'name'</span>,<span class="string">'type'</span>,<span class="string">'hp'</span>,<span class="string">'evolution'</span>,<span class="string">'pokedex'</span>]]</span><br><span class="line">pokemon</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>name</th><th>type</th><th>hp</th><th>evolution</th><th>pokedex</th></tr></thead><tbody><tr><td>0</td><td>Bulbasaur</td><td>grass</td><td>45</td><td>Ivysaur</td><td>yes</td></tr><tr><td>1</td><td>Charmander</td><td>fire</td><td>39</td><td>Charmeleon</td><td>no</td></tr><tr><td>2</td><td>Squirtle</td><td>water</td><td>44</td><td>Wartortle</td><td>yes</td></tr><tr><td>3</td><td>Caterpie</td><td>bug</td><td>45</td><td>Metapod</td><td>no</td></tr></tbody></table><ul><li>添加一个列place<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pokemon[<span class="string">'place'</span>] = [<span class="string">'park'</span>,<span class="string">'street'</span>,<span class="string">'lake'</span>,<span class="string">'forest'</span>]</span><br><span class="line">pokemon</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>name</th><th>type</th><th>hp</th><th>evolution</th><th>pokedex</th><th>place</th></tr></thead><tbody><tr><td>0</td><td>Bulbasaur</td><td>grass</td><td>45</td><td>Ivysaur</td><td>yes</td><td>park</td></tr><tr><td>1</td><td>Charmander</td><td>fire</td><td>39</td><td>Charmeleon</td><td>no</td><td>street</td></tr><tr><td>2</td><td>Squirtle</td><td>water</td><td>44</td><td>Wartortle</td><td>yes</td><td>lake</td></tr><tr><td>3</td><td>Caterpie</td><td>bug</td><td>45</td><td>Metapod</td><td>no</td><td>forest</td></tr></tbody></table><ul><li>查看每个列的数据类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pokemon.dtypes</span><br><span class="line"></span><br><span class="line">name         object</span><br><span class="line">type         object</span><br><span class="line">hp            int64</span><br><span class="line">evolution    object</span><br><span class="line">pokedex      object</span><br><span class="line">place        object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><h2 id="探索Apple公司股价数据"><a href="#探索Apple公司股价数据" class="headerlink" title="探索Apple公司股价数据"></a>探索Apple公司股价数据</h2><ul><li>读取数据并存为一个名叫apple的数据框<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">apple = pd.read_csv(<span class="string">'../pydata/appl_1980_2014.csv'</span>)</span><br><span class="line">apple.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Date</th><th>Open</th><th>High</th><th>Low</th><th>Close</th><th>Volume</th><th>Adj Close</th></tr></thead><tbody><tr><td>0</td><td>2014/7/8</td><td>96.27</td><td>96.8</td><td>93.92</td><td>95.35</td><td>65130000</td><td>95.35</td></tr><tr><td>1</td><td>2014/7/7</td><td>94.14</td><td>95.99</td><td>94.1</td><td>95.97</td><td>56305400</td><td>95.97</td></tr><tr><td>2</td><td>2014/7/3</td><td>93.67</td><td>94.1</td><td>93.2</td><td>94.03</td><td>22891800</td><td>94.03</td></tr><tr><td>3</td><td>2014/7/2</td><td>93.87</td><td>94.06</td><td>93.09</td><td>93.48</td><td>28420900</td><td>93.48</td></tr><tr><td>4</td><td>2014/7/1</td><td>93.52</td><td>94.07</td><td>93.13</td><td>93.52</td><td>38170200</td><td>93.52</td></tr></tbody></table><ul><li><p>查看每一列的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apple.dtypes</span><br><span class="line"></span><br><span class="line">Date          object</span><br><span class="line">Open         float64</span><br><span class="line">High         float64</span><br><span class="line">Low          float64</span><br><span class="line">Close        float64</span><br><span class="line">Volume         int64</span><br><span class="line">Adj Close    float64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></li><li><p>将Date这个列转换为datetime类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple.Date = pd.to_datetime(apple.Date)</span><br><span class="line">apple.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Date</th><th>Open</th><th>High</th><th>Low</th><th>Close</th><th>Volume</th><th>Adj Close</th></tr></thead><tbody><tr><td>0</td><td>2014/7/8</td><td>96.27</td><td>96.8</td><td>93.92</td><td>95.35</td><td>65130000</td><td>95.35</td></tr><tr><td>1</td><td>2014/7/7</td><td>94.14</td><td>95.99</td><td>94.1</td><td>95.97</td><td>56305400</td><td>95.97</td></tr><tr><td>2</td><td>2014/7/3</td><td>93.67</td><td>94.1</td><td>93.2</td><td>94.03</td><td>22891800</td><td>94.03</td></tr><tr><td>3</td><td>2014/7/2</td><td>93.87</td><td>94.06</td><td>93.09</td><td>93.48</td><td>28420900</td><td>93.48</td></tr><tr><td>4</td><td>2014/7/1</td><td>93.52</td><td>94.07</td><td>93.13</td><td>93.52</td><td>38170200</td><td>93.52</td></tr></tbody></table><ul><li>将Date设置为索引<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple = apple.set_index(<span class="string">'Date'</span>)</span><br><span class="line">apple.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Open</th><th>High</th><th>Low</th><th>Close</th><th>Volume</th><th>Adj Close</th></tr></thead><tbody><tr><td>Date</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2014/7/8</td><td>96.27</td><td>96.8</td><td>93.92</td><td>95.35</td><td>65130000</td><td>95.35</td></tr><tr><td>2014/7/7</td><td>94.14</td><td>95.99</td><td>94.1</td><td>95.97</td><td>56305400</td><td>95.97</td></tr><tr><td>2014/7/3</td><td>93.67</td><td>94.1</td><td>93.2</td><td>94.03</td><td>22891800</td><td>94.03</td></tr><tr><td>2014/7/2</td><td>93.87</td><td>94.06</td><td>93.09</td><td>93.48</td><td>28420900</td><td>93.48</td></tr><tr><td>2014/7/1</td><td>93.52</td><td>94.07</td><td>93.13</td><td>93.52</td><td>38170200</td><td>93.52</td></tr></tbody></table><ul><li><p>有重复的日期吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple.index.is_unique</span><br><span class="line"></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>将index设置为升序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple.sort_index(ascending=<span class="keyword">True</span>)</span><br><span class="line">apple.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>Open</th><th>High</th><th>Low</th><th>Close</th><th>Volume</th><th>Adj Close</th></tr></thead><tbody><tr><td>Date</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2014/7/8</td><td>96.27</td><td>96.8</td><td>93.92</td><td>95.35</td><td>65130000</td><td>95.35</td></tr><tr><td>2014/7/7</td><td>94.14</td><td>95.99</td><td>94.1</td><td>95.97</td><td>56305400</td><td>95.97</td></tr><tr><td>2014/7/3</td><td>93.67</td><td>94.1</td><td>93.2</td><td>94.03</td><td>22891800</td><td>94.03</td></tr><tr><td>2014/7/2</td><td>93.87</td><td>94.06</td><td>93.09</td><td>93.48</td><td>28420900</td><td>93.48</td></tr><tr><td>2014/7/1</td><td>93.52</td><td>94.07</td><td>93.13</td><td>93.52</td><td>38170200</td><td>93.52</td></tr></tbody></table><ul><li>找到每个月的最后一个交易日(business day)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apple[<span class="string">'year'</span>] = apple.index.year</span><br><span class="line">apple[<span class="string">'month'</span>] = apple.index.month</span><br><span class="line">apple[<span class="string">'day'</span>] = apple.index.day</span><br><span class="line">apple[<span class="string">'year_month'</span>] = apple[<span class="string">'year'</span>].map(str)+<span class="string">'_'</span>+apple[<span class="string">'month'</span>].map(str)</span><br><span class="line">apple.groupby(<span class="string">'year_month'</span>).agg(&#123;<span class="string">'day'</span>:<span class="string">'max'</span>&#125;).sort_index(ascending=<span class="keyword">False</span>).head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>day</th></tr></thead><tbody><tr><td>year_month</td><td></td></tr><tr><td>2014_7</td><td>8</td></tr><tr><td>2014_6</td><td>30</td></tr><tr><td>2014_5</td><td>30</td></tr><tr><td>2014_4</td><td>30</td></tr><tr><td>2014_3</td><td>31</td></tr><tr><td>2014_2</td><td>28</td></tr><tr><td>2014_1</td><td>31</td></tr><tr><td>2013_9</td><td>30</td></tr><tr><td>2013_8</td><td>30</td></tr><tr><td>2013_7</td><td>31</td></tr></tbody></table><ul><li><p>数据集中最早的日期和最晚的日期相差多少天</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(apple.index.max()-apple.index.min()).days</span><br><span class="line"></span><br><span class="line"><span class="number">12261</span></span><br></pre></td></tr></table></figure></li><li><p>在数据中一共有多少个月</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple.year_month.nunique()</span><br><span class="line"></span><br><span class="line"><span class="number">404</span></span><br></pre></td></tr></table></figure></li><li><p>按照时间顺序可视化Adj Close值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appl_open = apple[<span class="string">'Adj Close'</span>].plot(title = <span class="string">'Apple Stock'</span>)</span><br><span class="line">fig = appl_open.get_figure()</span><br><span class="line">fig.set_size_inches(<span class="number">13.5</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/apple_date_view.png" alt=""></p><hr><h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><h2 id="探索Iris纸鸢花数据"><a href="#探索Iris纸鸢花数据" class="headerlink" title="探索Iris纸鸢花数据"></a>探索Iris纸鸢花数据</h2><ul><li>将数据集存成变量iris</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">iris = pd.read_csv(<span class="string">'../pydata/iris.data'</span>)</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>5.1</th><th>3.5</th><th>1.4</th><th>0.2</th><th>Iris-setosa</th></tr></thead><tbody><tr><td>0</td><td>4.9</td><td>3</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>1</td><td>4.7</td><td>3.2</td><td>1.3</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>2</td><td>4.6</td><td>3.1</td><td>1.5</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>3</td><td>5</td><td>3.6</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>4</td><td>5.4</td><td>3.9</td><td>1.7</td><td>0.4</td><td>Iris-setosa</td></tr></tbody></table><ul><li>创建数据框的列名称<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris = pd.read_csv(<span class="string">'../pydata/iris.data'</span>,names = [<span class="string">'sepal_length'</span>,<span class="string">'sepal_width'</span>,<span class="string">'petal_length'</span>,<span class="string">'petal_width'</span>,<span class="string">'class'</span>])</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>sepal_length</th><th>sepal_width</th><th>petal_length</th><th>petal_width</th><th>class</th></tr></thead><tbody><tr><td>0</td><td>5.1</td><td>3.5</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>1</td><td>4.9</td><td>3</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>2</td><td>4.7</td><td>3.2</td><td>1.3</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>3</td><td>4.6</td><td>3.1</td><td>1.5</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>4</td><td>5</td><td>3.6</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr></tbody></table><ul><li><p>数据框中有缺失值吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pd.isnull(iris).sum()</span><br><span class="line"></span><br><span class="line">sepal_length    <span class="number">0</span></span><br><span class="line">sepal_width     <span class="number">0</span></span><br><span class="line">petal_length    <span class="number">0</span></span><br><span class="line">petal_width     <span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>           0</span></span><br><span class="line"><span class="class"><span class="title">dtype</span>:</span> int64</span><br></pre></td></tr></table></figure></li><li><p>将列petal_length的第10到19行设置为缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iris.petal_length[10:20] = np.nan</span></span><br><span class="line">iris.iloc[<span class="number">10</span>:<span class="number">20</span>,<span class="number">2</span>:<span class="number">3</span>] = np.nan</span><br><span class="line">iris.head(<span class="number">20</span>)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>sepal_length</th><th>sepal_width</th><th>petal_length</th><th>petal_width</th><th>class</th></tr></thead><tbody><tr><td>0</td><td>5.1</td><td>3.5</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>1</td><td>4.9</td><td>3</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>2</td><td>4.7</td><td>3.2</td><td>1.3</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>3</td><td>4.6</td><td>3.1</td><td>1.5</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>4</td><td>5</td><td>3.6</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>5</td><td>5.4</td><td>3.9</td><td>1.7</td><td>0.4</td><td>Iris-setosa</td></tr><tr><td>6</td><td>4.6</td><td>3.4</td><td>1.4</td><td>0.3</td><td>Iris-setosa</td></tr><tr><td>7</td><td>5</td><td>3.4</td><td>1.5</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>8</td><td>4.4</td><td>2.9</td><td>1.4</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>9</td><td>4.9</td><td>3.1</td><td>1.5</td><td>0.1</td><td>Iris-setosa</td></tr><tr><td>10</td><td>5.4</td><td>3.7</td><td>NaN</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>11</td><td>4.8</td><td>3.4</td><td>NaN</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>12</td><td>4.8</td><td>3</td><td>NaN</td><td>0.1</td><td>Iris-setosa</td></tr><tr><td>13</td><td>4.3</td><td>3</td><td>NaN</td><td>0.1</td><td>Iris-setosa</td></tr><tr><td>14</td><td>5.8</td><td>4</td><td>NaN</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>15</td><td>5.7</td><td>4.4</td><td>NaN</td><td>0.4</td><td>Iris-setosa</td></tr><tr><td>16</td><td>5.4</td><td>3.9</td><td>NaN</td><td>0.4</td><td>Iris-setosa</td></tr><tr><td>17</td><td>5.1</td><td>3.5</td><td>NaN</td><td>0.3</td><td>Iris-setosa</td></tr><tr><td>18</td><td>5.7</td><td>3.8</td><td>NaN</td><td>0.3</td><td>Iris-setosa</td></tr><tr><td>19</td><td>5.1</td><td>3.8</td><td>NaN</td><td>0.3</td><td>Iris-setosa</td></tr></tbody></table><ul><li>将缺失值全部替换为1.0<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris.fillna(<span class="number">1.0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line">iris.iloc[<span class="number">10</span>:<span class="number">20</span>,:]</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>sepal_length</th><th>sepal_width</th><th>petal_length</th><th>petal_width</th><th>class</th></tr></thead><tbody><tr><td>10</td><td>5.4</td><td>3.7</td><td>1</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>11</td><td>4.8</td><td>3.4</td><td>1</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>12</td><td>4.8</td><td>3</td><td>1</td><td>0.1</td><td>Iris-setosa</td></tr><tr><td>13</td><td>4.3</td><td>3</td><td>1</td><td>0.1</td><td>Iris-setosa</td></tr><tr><td>14</td><td>5.8</td><td>4</td><td>1</td><td>0.2</td><td>Iris-setosa</td></tr><tr><td>15</td><td>5.7</td><td>4.4</td><td>1</td><td>0.4</td><td>Iris-setosa</td></tr><tr><td>16</td><td>5.4</td><td>3.9</td><td>1</td><td>0.4</td><td>Iris-setosa</td></tr><tr><td>17</td><td>5.1</td><td>3.5</td><td>1</td><td>0.3</td><td>Iris-setosa</td></tr><tr><td>18</td><td>5.7</td><td>3.8</td><td>1</td><td>0.3</td><td>Iris-setosa</td></tr><tr><td>19</td><td>5.1</td><td>3.8</td><td>1</td><td>0.3</td><td>Iris-setosa</td></tr></tbody></table><ul><li>删除列class<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> iris[<span class="string">'class'</span>]</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>sepal_length</th><th>sepal_width</th><th>petal_length</th><th>petal_width</th></tr></thead><tbody><tr><td>0</td><td>5.1</td><td>3.5</td><td>1.4</td><td>0.2</td></tr><tr><td>1</td><td>4.9</td><td>3</td><td>1.4</td><td>0.2</td></tr><tr><td>2</td><td>4.7</td><td>3.2</td><td>1.3</td><td>0.2</td></tr><tr><td>3</td><td>4.6</td><td>3.1</td><td>1.5</td><td>0.2</td></tr><tr><td>4</td><td>5</td><td>3.6</td><td>1.4</td><td>0.2</td></tr></tbody></table><ul><li>将数据框前三行设置为缺失值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris.iloc[:<span class="number">3</span>,:] = np.nan</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>sepal_length</th><th>sepal_width</th><th>petal_length</th><th>petal_width</th></tr></thead><tbody><tr><td>0</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>1</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>2</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>3</td><td>4.6</td><td>3.1</td><td>1.5</td><td>0.2</td></tr><tr><td>4</td><td>5</td><td>3.6</td><td>1.4</td><td>0.2</td></tr></tbody></table><ul><li>删除有缺失值的行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris = iris.dropna(how=<span class="string">'any'</span>)</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>sepal_length</th><th>sepal_width</th><th>petal_length</th><th>petal_width</th></tr></thead><tbody><tr><td>3</td><td>4.6</td><td>3.1</td><td>1.5</td><td>0.2</td></tr><tr><td>4</td><td>5</td><td>3.6</td><td>1.4</td><td>0.2</td></tr><tr><td>5</td><td>5.4</td><td>3.9</td><td>1.7</td><td>0.4</td></tr><tr><td>6</td><td>4.6</td><td>3.4</td><td>1.4</td><td>0.3</td></tr><tr><td>7</td><td>5</td><td>3.4</td><td>1.5</td><td>0.2</td></tr></tbody></table><ul><li>重新设置索引<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris = iris.reset_index(drop=<span class="keyword">True</span>)</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th></th><th>sepal_length</th><th>sepal_width</th><th>petal_length</th><th>petal_width</th></tr></thead><tbody><tr><td>0</td><td>4.6</td><td>3.1</td><td>1.5</td><td>0.2</td></tr><tr><td>1</td><td>5</td><td>3.6</td><td>1.4</td><td>0.2</td></tr><tr><td>2</td><td>5.4</td><td>3.9</td><td>1.7</td><td>0.4</td></tr><tr><td>3</td><td>4.6</td><td>3.4</td><td>1.4</td><td>0.3</td></tr><tr><td>4</td><td>5</td><td>3.4</td><td>1.5</td><td>0.2</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Excel技巧</title>
      <link href="/Excel/2019/03/13/Excel%E6%8A%80%E5%B7%A7/"/>
      <url>/Excel/2019/03/13/Excel%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ul><li>Excel的快捷键很多，以下主要能提高效率：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Crtl+方向键，对单元格光标快速移动，移动到数据边缘（空格位置）。</span><br><span class="line"></span><br><span class="line">Crtl+Shift+方向键，对单元格快读框选，选择到数据边缘（空格位置）。</span><br><span class="line"></span><br><span class="line">Ctrrl+空格键，选定整列。</span><br><span class="line"></span><br><span class="line">Shift+空格键，选定整行。</span><br><span class="line"></span><br><span class="line">Ctrl+A，选择整张表内容。</span><br><span class="line"></span><br><span class="line">Alt+Enter，换行。</span><br><span class="line"></span><br><span class="line">Ctrl+Enter，以当前单元格为始，往下填充数据和函数。</span><br><span class="line"></span><br><span class="line">Ctrl+S，快读保存，你懂的。</span><br><span class="line"></span><br><span class="line">Ctrl+Z，撤回当前操作。</span><br></pre></td></tr></table></figure><hr><h1 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h1><ul><li>Excel的格式及转换很容易忽略，但格式会如影随形伴随数据分析者的一切场景，是后续SQL和Python数据类型的基础。</li><li>通常我们将Excel格式分为数值、文本、时间。</li><li>数值：常见整数型 Int和小数/浮点型 Float。两者的界限很模糊。在SQL和Python中，则会牵扯的复杂，涉及运算效率，计算精度等。</li><li>文本：分为中文和英文，存储字节，字符长度不同。中文很容易遇到编码问题，尤其是Python2。Win和Mac环境也有差异。大家遇到的乱码一般都属于中文编码错误。</li><li>时间：格式在Excel中可以和数值直接互换，也能用加减法进行天数换算。时间格式有不同表达。例如2016年11月11日，2016/11/11，2016-11-11等。当数据源多就会变得混乱。我们可以用自定义格式规范时间。</li><li>这里了解一下时间格式的概念，列举是一些较通用的范例（<strong>不同编程语言还是有差异的</strong>）:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">YYYY代表通配的四位数年格式</span><br><span class="line"></span><br><span class="line">MM代表通配的两位数月格式</span><br><span class="line"></span><br><span class="line">DD代表通配的两位数日格式</span><br><span class="line"></span><br><span class="line">HH代表通配的的两位数小时（<span class="number">24</span>小时）格式</span><br><span class="line"></span><br><span class="line">hh代表通配的两位数小（<span class="number">12</span>小时制）格式</span><br><span class="line"></span><br><span class="line">mm代表通配的两位数分格式</span><br><span class="line"></span><br><span class="line">ss代表通配的两位数秒格式</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>数组很多人都不会用到，甚至不知道有这个功能。依旧是数据分析越往后用到越多，它类似R语言的Array和Python的List。</li><li>数组由多个元素组成。普通函数的计算结果是一个值，数组类函数的计算结果返回多个值。</li><li>数组用大括号表示，当函数中使用到数组，应该用Ctrl+Shift+Enter输入，不然会报错。</li><li>先看数组的最基础使用。选择A1:D1区域，输入={1,2,3,4}。记住是大括号。然后Ctrl+Shift+Enter。我们发现数组里的四个值被分别传到四个单元格中，这是数组的独有用法。</li></ul><h1 id="分列"><a href="#分列" class="headerlink" title="分列"></a>分列</h1><ul><li>Excel可以将多个单元格的内容合并，但是不擅长拆分。分列功能可以将某一列按照特定规则拆分。常常用来进行数据清洗。</li></ul><table><thead><tr><th>北京市海定区</th><th></th><th>北京市</th><th>海定区</th></tr></thead><tbody><tr><td>北京市昌平区</td><td></td><td>北京市</td><td>昌平区</td></tr><tr><td>北京市大兴区</td><td></td><td>北京市</td><td>大兴区</td></tr><tr><td>北京市通州区</td><td></td><td>北京市</td><td>通州区</td></tr><tr><td>北京市石景山区</td><td></td><td>北京市</td><td>石景山区</td></tr><tr><td>北京市丰台区</td><td></td><td>北京市</td><td>丰台区</td></tr><tr><td>北京市顺义区</td><td></td><td>北京市</td><td>顺义区</td></tr><tr><td>北京市朝阳区</td><td></td><td>北京市</td><td>朝阳区</td></tr><tr><td>北京市东城区</td><td></td><td>北京市</td><td>东城区</td></tr></tbody></table><ul><li>SQL和Python中类似split()切分函数。</li></ul><h1 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h1><ul><li>数据透视表是非常强大的功能，当初学会时惊为天人。</li><li>数据透视表的主要功能是将数据聚合，按照各子段进行sum( )，count( )的运算。</li><li>将原始数据和汇总计算数据分离。</li><li>数据透视表的核心思想是聚合运算，将字段名相同的数据聚合起来，所谓数以类分。</li><li>列和行的设置，则是按不同轴向展现数据。简单说，你想要什么结构的报表，就用什么样的拖拽方式。</li></ul><h1 id="删除重复项"><a href="#删除重复项" class="headerlink" title="删除重复项"></a>删除重复项</h1><ul><li>一种数据清洗和检验的快速方式。想要验证某一列有多少个唯一值，或者数据清洗，都可以使用。</li><li>功能类似SQL中的distinct,Python中的set集合。</li></ul><h1 id="自定义下来菜单（数据验证）"><a href="#自定义下来菜单（数据验证）" class="headerlink" title="自定义下来菜单（数据验证）"></a>自定义下来菜单（数据验证）</h1><ul><li>数据验证是一种约束，针对单元格限制其输入，也就是让其只能固定几个值。下拉菜单是一种高阶应用，通过允许下拉箭头即可。</li><li>数据-&gt;数据验证-&gt;设置验证条件-&gt;设置来源</li></ul>]]></content>
      
      
      <categories>
          
          <category> Excel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Excel常见函数</title>
      <link href="/Excel/2019/03/13/Excel%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
      <url>/Excel/2019/03/13/Excel%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="清洗处理类"><a href="#清洗处理类" class="headerlink" title="清洗处理类"></a>清洗处理类</h1><ul><li>主要是文本、格式以及脏数据的清洗和转换</li></ul><h2 id="Trim"><a href="#Trim" class="headerlink" title="Trim"></a>Trim</h2><ul><li>清楚调字符串两边的空格</li><li>MySQLl中有同名函数，Python有类似函数strip</li></ul><h2 id="Concatenate"><a href="#Concatenate" class="headerlink" title="Concatenate"></a>Concatenate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Concatenate(单元格1，单元格2,...)</span><br></pre></td></tr></table></figure><ul><li>合并单元格中的内容，还有另外一个合并方式是&amp;。”我”&amp;”很”&amp;”帅” ＝ 我很帅。当需要合并的内容过多时，concatenate的效率快也优雅。</li></ul><h2 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Replace(指定字符串，开始替换的位置，替换几个字符，替换成什么)</span><br></pre></td></tr></table></figure><ul><li>替换掉单元格的字符串，清洗使用较多。</li><li>实例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 替换手机号后四位为****</span><br><span class="line">=replace(A2,8,4,&apos;****&apos;)</span><br></pre></td></tr></table></figure><h2 id="Substitute"><a href="#Substitute" class="headerlink" title="Substitute"></a>Substitute</h2><ul><li>和replace接近，区别是进行全局替换，没有起始位置的概念</li></ul><h2 id="Left-Right-Mid"><a href="#Left-Right-Mid" class="headerlink" title="Left/Right/Mid"></a>Left/Right/Mid</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Mid(指定字符串，开始位置，截取长度)</span><br></pre></td></tr></table></figure><ul><li>截取字符串中的字符，Left/Right（指定字符串，截取长度）。left为从左，right为从右。</li></ul><h2 id="Len-Lenb"><a href="#Len-Lenb" class="headerlink" title="Len/Lenb"></a>Len/Lenb</h2><ul><li>返回字符串的长度，在len中，中文计算为一个，在lenb中，中文计算为两个。</li></ul><h2 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Find(要查找字符，指定字符串，第几个字符)</span><br></pre></td></tr></table></figure><ul><li>查找某字符串的位置，可以指定位第几次出现，与left/right/mid结合能完成简单的文本提取。</li></ul><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><ul><li>和find类似，区别是Search不区分大小写，支持*通配符</li></ul><hr><h1 id="关联匹配类"><a href="#关联匹配类" class="headerlink" title="关联匹配类"></a>关联匹配类</h1><ul><li>在进行多表关联或者进行行列对比是用到一下函数。</li></ul><h2 id="Lookup"><a href="#Lookup" class="headerlink" title="Lookup"></a>Lookup</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Lookup(查找的值，值所在的位置，返回相应位置的值)</span><br></pre></td></tr></table></figure><ul><li>功能性和Vlookup一样，但是引申有数组匹配和二分法。</li></ul><h2 id="Vlookup"><a href="#Vlookup" class="headerlink" title="Vlookup"></a>Vlookup</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Vlookup(查找的值，哪里查找，找哪个位置的值，是否精准匹配)</span><br></pre></td></tr></table></figure><ul><li>通俗理解：查找到某个值然后粘贴过来</li></ul><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Index(查找的区域，区域内第几行，区域内第几列)</span><br></pre></td></tr></table></figure><ul><li>和Match组合，媲美Vlookup，但是功能更强大。</li></ul><h2 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Match(查找指定的值，查找所在区域，查找方式的参数)</span><br></pre></td></tr></table></figure><ul><li>和Vlookup类似，但是可以按照指定方式查找，比如大于、小于或等于，返回值所在的位置。</li></ul><h2 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h2><ul><li>返回单元格所在的行</li></ul><h2 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h2><ul><li>返回单元格所在的列</li></ul><h2 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Offset(指定点，偏移多少行，偏移多少列，返回多少行，返回多少列)</span><br></pre></td></tr></table></figure><ul><li>建立坐标系，以坐标系位原点，返回距离原点的值或者区域。正数代表向下或者向左，负数则相反。</li></ul><hr><h1 id="逻辑运算类"><a href="#逻辑运算类" class="headerlink" title="逻辑运算类"></a>逻辑运算类</h1><ul><li>数据分析中不得不用到逻辑运算，逻辑运算返回的是布尔类型，True和False。很多复杂的数据分析会涉及到较多的逻辑运算。</li></ul><h2 id="If"><a href="#If" class="headerlink" title="If"></a>If</h2><ul><li>经典的如果但是，在Python中也进场使用，会有许多更优雅的写法。有ifs用法，取代<code>if(end())</code>的写法。</li></ul><h2 id="And"><a href="#And" class="headerlink" title="And"></a>And</h2><ul><li>全部参数位True，则返回True，经常用于多条件判断。</li></ul><h2 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h2><ul><li>只要参数有一个True，则返回True，经常用于多条件判断。</li></ul><h2 id="IS系列"><a href="#IS系列" class="headerlink" title="IS系列"></a>IS系列</h2><ul><li>常用判断检验，返回的多是布尔数值True和False。常用ISERR，ISERROR，ISNA，ISTEXT，可以和IF嵌套使用。</li></ul><hr><h1 id="计算统计类"><a href="#计算统计类" class="headerlink" title="计算统计类"></a>计算统计类</h1><ul><li>常用的基础计算、分析、统计函数，以描述性统计为准。</li></ul><h2 id="Sum-Sumif-Sumifs"><a href="#Sum-Sumif-Sumifs" class="headerlink" title="Sum /Sumif /Sumifs"></a>Sum /Sumif /Sumifs</h2><ul><li>统计满足条件的单元格总和。</li></ul><h2 id="Sumproduct"><a href="#Sumproduct" class="headerlink" title="Sumproduct"></a>Sumproduct</h2><ul><li>统计总和相关，在给定的几组数组中，然后把数组间对应的元素相乘，最后返回乘积之和。例如，有两列数据销量和单价，现在要求卖出总额，用sumproduct最方便。</li></ul><h2 id="Count-Countif-Countifs"><a href="#Count-Countif-Countifs" class="headerlink" title="Count /Countif /Countifs"></a>Count /Countif /Countifs</h2><ul><li>统计满足条件的字符串个数。</li></ul><h2 id="Max"><a href="#Max" class="headerlink" title="Max"></a>Max</h2><ul><li>返回数组或引用区域的最大值。</li></ul><h2 id="Min"><a href="#Min" class="headerlink" title="Min"></a>Min</h2><ul><li>返回数组或引用区域的最小值。</li></ul><h2 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h2><ul><li>排序，返回指定值在引用区域的排名，重复值同一排名。</li></ul><h2 id="Rand-Randbetween"><a href="#Rand-Randbetween" class="headerlink" title="Rand /Randbetween"></a>Rand /Randbetween</h2><ul><li>常用随机抽样，前者返回0~1之间的随机值，后者可指定范围。</li></ul><h2 id="Averagea"><a href="#Averagea" class="headerlink" title="Averagea"></a>Averagea</h2><ul><li>求平均值，也有Averageaif，Averageaifs。</li></ul><h2 id="Quartile"><a href="#Quartile" class="headerlink" title="Quartile"></a>Quartile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Quartile(指定区域，分位参数)</span><br></pre></td></tr></table></figure><ul><li>计算四分位数，比如1~100的数字中，25分位就是按从小到大排列，在25%位置的数字，即25。参数0代表最小值，参数4代表最大值，1~3对应25、50（中位数）、75分位</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/Quartile函数.png" alt=""></p><h2 id="Stdev"><a href="#Stdev" class="headerlink" title="Stdev"></a>Stdev</h2><ul><li>求标准差，统计型函数。</li></ul><h2 id="Substoal"><a href="#Substoal" class="headerlink" title="Substoal"></a>Substoal</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Substotal(引用区域，参数)</span><br></pre></td></tr></table></figure><ul><li>汇总型函数，将平均值、计数、最大最小、相乘、标准差、求和、方差等参数化，换言之，只要会了这个函数，上面的都可以抛弃掉。</li></ul><h2 id="Int-Round"><a href="#Int-Round" class="headerlink" title="Int /Round"></a>Int /Round</h2><ul><li>取整函数，int向下取整，round按小数位取数。</li><li>round(3.14159,2) = 3.14</li><li>round(3.14159,1) = 3.1</li></ul><hr><h1 id="时间序列类"><a href="#时间序列类" class="headerlink" title="时间序列类"></a>时间序列类</h1><ul><li>专门用于处理时间格式以及转换，时间序列在金融、财务等数据分析中占有较大比重。</li></ul><h2 id="Year"><a href="#Year" class="headerlink" title="Year"></a>Year</h2><ul><li>返回日期中的年。</li></ul><h2 id="Month"><a href="#Month" class="headerlink" title="Month"></a>Month</h2><ul><li>返回日期中的月。</li></ul><h2 id="Weekday"><a href="#Weekday" class="headerlink" title="Weekday"></a>Weekday</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Weekday(指定时间，参数)</span><br></pre></td></tr></table></figure><ul><li>返回指定时间位一周中的第几天，参数位1代表从星期日开始算第一天，参数2代表从星期一开始算第一天。</li></ul><h2 id="Weeknum"><a href="#Weeknum" class="headerlink" title="Weeknum"></a>Weeknum</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Weeknum(指定时间，参数)</span><br></pre></td></tr></table></figure><ul><li>返回一年中的第几个星期，后面的参数类同weekday。</li></ul><h2 id="Day"><a href="#Day" class="headerlink" title="Day"></a>Day</h2><ul><li>返回日期中的日。</li></ul><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Date(年，月，日)</span><br></pre></td></tr></table></figure><ul><li>时间转换函数，等于将year()，month()，day()合并。</li></ul><h2 id="Now"><a href="#Now" class="headerlink" title="Now"></a>Now</h2><ul><li>返回当前时间戳，动态函数</li></ul><h2 id="Today"><a href="#Today" class="headerlink" title="Today"></a>Today</h2><ul><li>返回今天的日期，动态函数</li></ul><h2 id="Datedif"><a href="#Datedif" class="headerlink" title="Datedif"></a>Datedif</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=Datedif(开始日期，结束日期，参数)</span><br></pre></td></tr></table></figure><ul><li>日期计算函数，计算两日期的差，参数决定返回的是年还是月。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Excel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pySpark-DataFrame</title>
      <link href="/Spark/2018/12/29/pySpark-DataFrame/"/>
      <url>/Spark/2018/12/29/pySpark-DataFrame/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-DataFrame"><a href="#Spark-DataFrame" class="headerlink" title="Spark DataFrame"></a>Spark DataFrame</h1><h2 id="DataFrame和RDD互操作的两种方法："><a href="#DataFrame和RDD互操作的两种方法：" class="headerlink" title="DataFrame和RDD互操作的两种方法："></a>DataFrame和RDD互操作的两种方法：</h2><ul><li>1.反射模式：Row()            前提：事先需要知道字段、字段类型</li><li>2.编程模式：StructType()            不知道字段、字段类型</li><li>3.选型：优先选择第一种</li><li>实例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> Row</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> *</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">dataframe和rdd的互操作</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#反射推断模式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reflect</span><span class="params">(text)</span>:</span></span><br><span class="line">parts = text.map(<span class="keyword">lambda</span> x: x.split(<span class="string">','</span>))</span><br><span class="line">emp = parts.map(</span><br><span class="line"><span class="keyword">lambda</span> x: Row(empno=x[<span class="number">0</span>], ename=x[<span class="number">1</span>], job=x[<span class="number">2</span>], mgr=x[<span class="number">3</span>], hiredate=x[<span class="number">4</span>], sal=x[<span class="number">5</span>], com=x[<span class="number">6</span>], deptno=x[<span class="number">7</span>]))</span><br><span class="line"><span class="comment"># 将schema注册成一张表</span></span><br><span class="line">schemaEmp = spark.createDataFrame(emp)</span><br><span class="line">schemaEmp.createOrReplaceTempView(<span class="string">'emp'</span>)</span><br><span class="line">schemaEmp.printSchema()</span><br><span class="line">spark.sql(<span class="string">'select * from emp where sal &gt;=2000'</span>).show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#编程模式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">structType</span><span class="params">(text)</span>:</span></span><br><span class="line">parts = text.map(<span class="keyword">lambda</span> x: x.split(<span class="string">','</span>))</span><br><span class="line">emp = parts.map(<span class="keyword">lambda</span> e: (e[<span class="number">0</span>],e[<span class="number">1</span>],e[<span class="number">2</span>],e[<span class="number">3</span>],e[<span class="number">4</span>],e[<span class="number">5</span>],e[<span class="number">6</span>],e[<span class="number">7</span>]))</span><br><span class="line">schamestring = <span class="string">'empno,ename,job,mgr,hiredate,sal,com,deptno'</span></span><br><span class="line">fields = [StructField(field_name,StringType(),<span class="keyword">True</span>) <span class="keyword">for</span> field_name <span class="keyword">in</span> schamestring.split(<span class="string">','</span>)]</span><br><span class="line">schame = StructType(fields)</span><br><span class="line">schameEmp = spark.createDataFrame(emp, schame)</span><br><span class="line">schameEmp.printSchema()</span><br><span class="line">print(schameEmp.count())</span><br><span class="line">print(schameEmp.show(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">spark = SparkSession.builder.appName(<span class="string">'dataframe'</span>).master(<span class="string">'local[2]'</span>).getOrCreate()</span><br><span class="line">read_text = spark.sparkContext.textFile(<span class="string">'D:\myProject\Spark\PySpark\data\emp.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#reflect(read_text)</span></span><br><span class="line">structType(read_text)</span><br><span class="line">spark.stop()</span><br></pre></td></tr></table></figure><ul><li>一些其他的操作查看官网：<a href="http://spark.apache.org/docs/2.3.2/sql-programming-guide.html#inferring-the-schema-using-reflection" target="_blank" rel="noopener">http://spark.apache.org/docs/2.3.2/sql-programming-guide.html#inferring-the-schema-using-reflection</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pySpark-SQL</title>
      <link href="/Spark/2018/12/28/pySpark-SQL/"/>
      <url>/Spark/2018/12/28/pySpark-SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-SQL的入门"><a href="#Spark-SQL的入门" class="headerlink" title="Spark SQL的入门"></a>Spark SQL的入门</h1><h2 id="1-SQLContext"><a href="#1-SQLContext" class="headerlink" title="1. SQLContext"></a>1. SQLContext</h2><ul><li>实例spark 1.x：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SQLContext</span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">sqlcontext使用</span></span><br><span class="line"><span class="string">在spark 1.X中，官方提供的获取sqlcontext的方法是</span></span><br><span class="line"><span class="string">from pyspark.sql import SQLContext</span></span><br><span class="line"><span class="string">sqlContext = SQLContext(sc)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment">#创建sparkcontext，用于sqlcontext参数传入</span></span><br><span class="line">sc = SparkContext(master=<span class="string">'local[2]'</span>,appName=<span class="string">'sqlcontext'</span>)</span><br><span class="line">sc.setLogLevel(<span class="string">"WARN"</span>)</span><br><span class="line"><span class="comment">#sc.appName("sqlContext")</span></span><br><span class="line">sqlContext = SQLContext(sc)</span><br><span class="line"><span class="comment">#利用sqlcontext读取json文件（在spark包的examples包中有样例数据）</span></span><br><span class="line"><span class="comment">#返回一个dataframe</span></span><br><span class="line">read_json = sqlContext.read.json(<span class="string">'D:\\apps\spark-2.3.2-bin-hadoop2.7\examples\src\main\\resources\people.json'</span>)</span><br><span class="line"><span class="comment">#打印schema</span></span><br><span class="line">print(read_json.printSchema())</span><br><span class="line">read_json.show()</span><br><span class="line">print(read_json.take(<span class="number">2</span>))</span><br><span class="line">sc.stop()</span><br><span class="line"></span><br><span class="line"><span class="comment">#result    </span></span><br><span class="line">root</span><br><span class="line"> |-- age: long (nullable = true)</span><br><span class="line"> |-- name: string (nullable = true)</span><br><span class="line"></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|null|Michael|</span><br><span class="line">|  <span class="number">30</span>|   Andy|</span><br><span class="line">|  <span class="number">19</span>| Justin|</span><br><span class="line">+----+-------+</span><br><span class="line"></span><br><span class="line">[Row(age=<span class="keyword">None</span>, name=<span class="string">'Michael'</span>), Row(age=<span class="number">30</span>, name=<span class="string">'Andy'</span>)]</span><br></pre></td></tr></table></figure><ul><li>实例 spark 2.x:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">spark = SparkSession\</span><br><span class="line">.builder\</span><br><span class="line">.master(<span class="string">'local[2]'</span>)\</span><br><span class="line">.appName(<span class="string">'sqlcontext'</span>).getOrCreate()</span><br><span class="line">read_json = spark.read.json(<span class="string">'D:\\apps\spark-2.3.2-bin-hadoop2.7\examples\src\main\\resources\people.json'</span>)</span><br><span class="line">read_json.printSchema()</span><br><span class="line">read_json.show()</span><br><span class="line">print(read_json.count())</span><br><span class="line">spark.stop()</span><br><span class="line"></span><br><span class="line"><span class="comment">#result</span></span><br><span class="line">root</span><br><span class="line"> |-- age: long (nullable = true)</span><br><span class="line"> |-- name: string (nullable = true)</span><br><span class="line"></span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|null|Michael|</span><br><span class="line">|  <span class="number">30</span>|   Andy|</span><br><span class="line">|  <span class="number">19</span>| Justin|</span><br><span class="line">+----+-------+</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-HiveContext"><a href="#2-HiveContext" class="headerlink" title="2. HiveContext"></a>2. HiveContext</h2><ul><li>实例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> HiveContext</span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">hiveContext使用</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">sc = SparkContext(appName=<span class="string">'hiveContext'</span>)</span><br><span class="line">sc.setLogLevel(<span class="string">"WARN"</span>)</span><br><span class="line">sqlContext = HiveContext(sc)</span><br><span class="line"></span><br><span class="line">data_frame = sqlContext.table(<span class="string">"data_m.tmp_lxm_20181119_bj_jyy_staypoint_tmp_new"</span>)</span><br><span class="line"><span class="comment">#print(data_frame.count())</span></span><br><span class="line"><span class="comment">#print(data_frame.take(5))</span></span><br><span class="line">data_frame.printSchema()</span><br><span class="line">result = sqlContext.sql(<span class="string">'''</span></span><br><span class="line"><span class="string">select t3.day_id,t3.grid_id,t3.number,count(distinct t3.mdn)</span></span><br><span class="line"><span class="string">from</span></span><br><span class="line"><span class="string">(select t2.day_id,t2.grid_id,t2.mdn,t2.duration,</span></span><br><span class="line"><span class="string">case when t2.duration &lt;= 10 then '&lt;=10'</span></span><br><span class="line"><span class="string"> when t2.duration &gt; 10 and t2.duration &lt;= 30 then '10-30'</span></span><br><span class="line"><span class="string"> when t2.duration &gt; 30 and t2.duration &lt;= 60 then '30-60'</span></span><br><span class="line"><span class="string"> when t2.duration &gt; 60 and t2.duration &lt;= 120 then '60-120'</span></span><br><span class="line"><span class="string"> when t2.duration &gt; 120 then '&gt;120'</span></span><br><span class="line"><span class="string"> end number</span></span><br><span class="line"><span class="string">from</span></span><br><span class="line"><span class="string">(select t1.mdn,t1.grid_id,t1.day_id,t1.duration</span></span><br><span class="line"><span class="string">from</span></span><br><span class="line"><span class="string">(select mdn,grid_id,day_id,duration,</span></span><br><span class="line"><span class="string">row_number() over(partition by mdn,day_id order by cast(duration as bigint) desc) num</span></span><br><span class="line"><span class="string">from data_m.tmp_lxm_20181119_bj_jyy_staypoint_tmp_new</span></span><br><span class="line"><span class="string">where day_id='20180212') t1</span></span><br><span class="line"><span class="string">where t1.num = 1) t2 ) t3</span></span><br><span class="line"><span class="string">where t3.number='&lt;=10'</span></span><br><span class="line"><span class="string">group by t3.day_id,t3.grid_id,t3.number</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line"></span><br><span class="line">print(result.take(<span class="number">50</span>))</span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure><h2 id="3-SparkSession"><a href="#3-SparkSession" class="headerlink" title="3. SparkSession"></a>3. SparkSession</h2><ul><li>实例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">spark = SparkSession\</span><br><span class="line">.builder\</span><br><span class="line">.master(<span class="string">'local[2]'</span>)\</span><br><span class="line">.appName(<span class="string">'sqlcontext'</span>).getOrCreate()</span><br><span class="line">read_json = spark.read.json(<span class="string">'D:\\apps\spark-2.3.2-bin-hadoop2.7\examples\src\main\\resources\people.json'</span>)</span><br><span class="line">read_json.printSchema()</span><br><span class="line">read_json.show()</span><br><span class="line">print(read_json.count())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spark.stop()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#result</span></span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|null|Michael|</span><br><span class="line">|  <span class="number">30</span>|   Andy|</span><br><span class="line">|  <span class="number">19</span>| Justin|</span><br><span class="line">+----+-------+</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="4-Spark-submit"><a href="#4-Spark-submit" class="headerlink" title="4. Spark-submit"></a>4. Spark-submit</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--master local[2] \</span><br><span class="line">/home/data_m/data/lxm/pyspark/hiveContext.py</span><br></pre></td></tr></table></figure><h2 id="5-thriftserver-beeline的使用"><a href="#5-thriftserver-beeline的使用" class="headerlink" title="5. thriftserver/beeline的使用"></a>5. thriftserver/beeline的使用</h2><ul><li>1.启动thriftserver：默认端口10000</li><li>2.启动beeline<ul><li>beeline -u jdbc:hive2://localhost:10000 -n username</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4、pandas-数据合并</title>
      <link href="/Pandas/2018/10/31/4%E3%80%81pandas-%E6%95%B0%E6%8D%AE%E5%90%88%E5%B9%B6/"/>
      <url>/Pandas/2018/10/31/4%E3%80%81pandas-%E6%95%B0%E6%8D%AE%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="0-回顾numpy的级联"><a href="#0-回顾numpy的级联" class="headerlink" title="0. 回顾numpy的级联"></a>0. 回顾numpy的级联</h1><ul><li>1.生成2各3*3的矩阵，对其分别进行两个维度上的级联</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: nd = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: nd</span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: nd1 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: nd1</span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0是第一维的方向：行</span></span><br><span class="line">In [<span class="number">7</span>]: np.concatenate((nd,nd1),axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: np.concatenate((nd,nd1),axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">8</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><ul><li>定义生成一个DataFrame的函数：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="function"><span class="keyword">def</span> <span class="title">make_df</span><span class="params">(cols,inds)</span>:</span></span><br><span class="line">   ...:     data = &#123;c:[c+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> inds] <span class="keyword">for</span> c <span class="keyword">in</span> cols&#125;</span><br><span class="line">   ...:     print(data)</span><br><span class="line">   ...:     <span class="keyword">return</span> pd.DataFrame(data,index = inds,columns = cols)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: make_df([<span class="string">'A'</span>,<span class="string">'B'</span>],[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A1'</span>, <span class="string">'A2'</span>], <span class="string">'B'</span>: [<span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br></pre></td></tr></table></figure><h1 id="1-使用pd-concat-级联"><a href="#1-使用pd-concat-级联" class="headerlink" title="1. 使用pd.concat()级联"></a>1. 使用pd.concat()级联</h1><ul><li>Pandas使用<code>pd.concat</code>函数，与<code>np.concatenate</code>函数类似，只是多了一些参数：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Signature: pd.concat(objs, axis=<span class="number">0</span>, join=<span class="string">'outer'</span>, join_axes=<span class="keyword">None</span>, ignore_index=<span class="keyword">False</span>, keys=<span class="keyword">None</span>, levels=<span class="keyword">None</span>, names=<span class="keyword">None</span>, verify_integrity=<span class="keyword">False</span>, sort=<span class="keyword">None</span>, copy=<span class="keyword">True</span>)</span><br><span class="line">Docstring:</span><br><span class="line">Concatenate pandas objects along a particular axis <span class="keyword">with</span> optional set logic</span><br></pre></td></tr></table></figure><h2 id="1-1-简单级联"><a href="#1-1-简单级联" class="headerlink" title="1.1 简单级联"></a>1.1 简单级联</h2><ul><li>和np.concatenate一样，优先增加行数(默认axis=0)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: df1 = make_df(list(<span class="string">'AB'</span>),[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>], <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: df2 = make_df(list(<span class="string">'AB'</span>),[<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A2'</span>, <span class="string">'A3'</span>], <span class="string">'B'</span>: [<span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: pd.concat([df1,df2])</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  A0  B0</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">3</span>  A3  B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: pd.concat((df1,df2))</span><br><span class="line">Out[<span class="number">14</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  A0  B0</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">3</span>  A3  B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以通过设置axis来改变级联方向</span></span><br><span class="line">In [<span class="number">15</span>]: pd.concat((df1,df2),axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">     A    B    A    B</span><br><span class="line"><span class="number">0</span>   A0   B0  NaN  NaN</span><br><span class="line"><span class="number">1</span>   A1   B1  NaN  NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN   A2   B2</span><br><span class="line"><span class="number">3</span>  NaN  NaN   A3   B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意，index在级联时是可以重复的</span></span><br><span class="line">In [<span class="number">16</span>]: df3 = make_df(list(<span class="string">'AB'</span>),[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>], <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: df4 = make_df(list(<span class="string">'AB'</span>),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>], <span class="string">'B'</span>: [<span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: df5 = pd.concat((df3,df4))</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: df5</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  A0  B0</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">3</span>  A3  B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: df5.loc[[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以选择忽略ignore_index,重新索引</span></span><br><span class="line">In [<span class="number">21</span>]: pd.concat((df3,df4),ignore_index=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  A0  B0</span><br><span class="line"><span class="number">1</span>  A1  B1</span><br><span class="line"><span class="number">2</span>  A2  B2</span><br><span class="line"><span class="number">3</span>  A1  B1</span><br><span class="line"><span class="number">4</span>  A2  B2</span><br><span class="line"><span class="number">5</span>  A3  B3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#或者使用多层索引keys</span></span><br><span class="line">In [<span class="number">22</span>]: x = make_df(list(<span class="string">'XY'</span>),[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">&#123;<span class="string">'X'</span>: [<span class="string">'Xa'</span>, <span class="string">'Xb'</span>], <span class="string">'Y'</span>: [<span class="string">'Ya'</span>, <span class="string">'Yb'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: y = make_df(list(<span class="string">'XY'</span>),[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">&#123;<span class="string">'X'</span>: [<span class="string">'XA'</span>, <span class="string">'XB'</span>], <span class="string">'Y'</span>: [<span class="string">'YA'</span>, <span class="string">'YB'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: pd.concat((x,y))</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">    X   Y</span><br><span class="line">a  Xa  Ya</span><br><span class="line">b  Xb  Yb</span><br><span class="line">A  XA  YA</span><br><span class="line">B  XB  YB</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#keys可以增加索引，使得合并后的数据更清晰</span></span><br><span class="line">In [<span class="number">25</span>]: pd.concat((x,y),keys=[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">      X   Y</span><br><span class="line">x a  Xa  Ya</span><br><span class="line">  b  Xb  Yb</span><br><span class="line">y A  XA  YA</span><br><span class="line">  B  XB  YB</span><br></pre></td></tr></table></figure><h2 id="1-2-不匹配级联"><a href="#1-2-不匹配级联" class="headerlink" title="1.2 不匹配级联"></a>1.2 不匹配级联</h2><ul><li>不匹配指的是级联的维度的索引不一致。例如纵向级联时列索引不一致，横向级联时航索引不一致</li><li>有3种连接方式：</li><li>外连接：补NaN（默认模式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: df1 = make_df([<span class="string">'A'</span>,<span class="string">'B'</span>],[<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A1'</span>, <span class="string">'A3'</span>], <span class="string">'B'</span>: [<span class="string">'B1'</span>, <span class="string">'B3'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: df2 = make_df([<span class="string">'B'</span>,<span class="string">'C'</span>],[<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">&#123;<span class="string">'B'</span>: [<span class="string">'B2'</span>, <span class="string">'B4'</span>], <span class="string">'C'</span>: [<span class="string">'C2'</span>, <span class="string">'C4'</span>]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: pd.concat((df1,df2),join=<span class="string">'outer'</span>)</span><br><span class="line">F:\soft\Anaconda3\Scripts\ipython:<span class="number">1</span>: FutureWarning: Sorting because non-concatenation axis <span class="keyword">is</span> <span class="keyword">not</span> aligned. A future version</span><br><span class="line">of pandas will change to <span class="keyword">not</span> sort by default.</span><br><span class="line"></span><br><span class="line">To accept the future behavior, <span class="keyword">pass</span> <span class="string">'sort=True'</span>.</span><br><span class="line"></span><br><span class="line">To retain the current behavior <span class="keyword">and</span> silence the warning, <span class="keyword">pass</span> sort=<span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">     A   B    C</span><br><span class="line"><span class="number">1</span>   A1  B1  NaN</span><br><span class="line"><span class="number">3</span>   A3  B3  NaN</span><br><span class="line"><span class="number">2</span>  NaN  B2   C2</span><br><span class="line"><span class="number">4</span>  NaN  B4   C4</span><br></pre></td></tr></table></figure><ul><li>内连接：只连接匹配的项</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: pd.concat((df1,df2),join=<span class="string">'inner'</span>)</span><br><span class="line">Out[<span class="number">29</span>]:</span><br><span class="line">    B</span><br><span class="line"><span class="number">1</span>  B1</span><br><span class="line"><span class="number">3</span>  B3</span><br><span class="line"><span class="number">2</span>  B2</span><br><span class="line"><span class="number">4</span>  B4</span><br></pre></td></tr></table></figure><ul><li>连接指定轴join_axes</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: df3 = make_df(list(<span class="string">'ACD'</span>),[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>], <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>], <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: df4 = make_df(list(<span class="string">'CDF'</span>),[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">&#123;<span class="string">'C'</span>: [<span class="string">'C3'</span>, <span class="string">'C4'</span>, <span class="string">'C5'</span>], <span class="string">'D'</span>: [<span class="string">'D3'</span>, <span class="string">'D4'</span>, <span class="string">'D5'</span>], <span class="string">'F'</span>: [<span class="string">'F3'</span>, <span class="string">'F4'</span>, <span class="string">'F5'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: pd.concat((df3,df4))</span><br><span class="line">F:\soft\Anaconda3\Scripts\ipython:<span class="number">1</span>: FutureWarning: Sorting because non-concatenation axis <span class="keyword">is</span> <span class="keyword">not</span> aligned. A future version</span><br><span class="line">of pandas will change to <span class="keyword">not</span> sort by default.</span><br><span class="line"></span><br><span class="line">To accept the future behavior, <span class="keyword">pass</span> <span class="string">'sort=True'</span>.</span><br><span class="line"></span><br><span class="line">To retain the current behavior <span class="keyword">and</span> silence the warning, <span class="keyword">pass</span> sort=<span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">Out[<span class="number">32</span>]:</span><br><span class="line">     A   C   D    F</span><br><span class="line"><span class="number">0</span>   A0  C0  D0  NaN</span><br><span class="line"><span class="number">1</span>   A1  C1  D1  NaN</span><br><span class="line"><span class="number">2</span>   A2  C2  D2  NaN</span><br><span class="line"><span class="number">3</span>  NaN  C3  D3   F3</span><br><span class="line"><span class="number">4</span>  NaN  C4  D4   F4</span><br><span class="line"><span class="number">5</span>  NaN  C5  D5   F5</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#join_axes 以某一个DataFrame列索引为新的索引值</span></span><br><span class="line">In [<span class="number">33</span>]: pd.concat((df3,df4),join_axes=[df4.columns])</span><br><span class="line">Out[<span class="number">33</span>]:</span><br><span class="line">    C   D    F</span><br><span class="line"><span class="number">0</span>  C0  D0  NaN</span><br><span class="line"><span class="number">1</span>  C1  D1  NaN</span><br><span class="line"><span class="number">2</span>  C2  D2  NaN</span><br><span class="line"><span class="number">3</span>  C3  D3   F3</span><br><span class="line"><span class="number">4</span>  C4  D4   F4</span><br><span class="line"><span class="number">5</span>  C5  D5   F5</span><br></pre></td></tr></table></figure><h2 id="1-3-使用append-函数级联"><a href="#1-3-使用append-函数级联" class="headerlink" title="1.3 使用append()函数级联"></a>1.3 使用append()函数级联</h2><ul><li>由于级联的使用非常普遍，因此有一个函数append专门用于在后面添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df1 = make_df([<span class="string">'大众'</span>,<span class="string">'雷克萨斯'</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">&#123;<span class="string">'大众'</span>: [<span class="string">'大众0'</span>, <span class="string">'大众1'</span>, <span class="string">'大众2'</span>, <span class="string">'大众3'</span>, <span class="string">'大众4'</span>], <span class="string">'雷克萨斯'</span>: [<span class="string">'雷克萨斯0'</span>, <span class="string">'雷克萨斯1'</span>, <span class="string">'雷克萨斯2'</span>, <span class="string">'雷克萨斯3'</span>, <span class="string">'雷克萨斯4'</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: df2 = make_df([<span class="string">'大众'</span>,<span class="string">'雷克萨斯'</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">&#123;<span class="string">'大众'</span>: [<span class="string">'大众5'</span>, <span class="string">'大众6'</span>, <span class="string">'大众7'</span>, <span class="string">'大众8'</span>, <span class="string">'大众9'</span>], <span class="string">'雷克萨斯'</span>: [<span class="string">'雷克萨斯5'</span>, <span class="string">'雷克萨斯6'</span>, <span class="string">'雷克萨斯7'</span>, <span class="string">'雷克萨斯8'</span>, <span class="string">'雷克萨斯9'</span>]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: df1.append(df2)</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">    大众   雷克萨斯</span><br><span class="line"><span class="number">0</span>  大众<span class="number">0</span>  雷克萨斯<span class="number">0</span></span><br><span class="line"><span class="number">1</span>  大众<span class="number">1</span>  雷克萨斯<span class="number">1</span></span><br><span class="line"><span class="number">2</span>  大众<span class="number">2</span>  雷克萨斯<span class="number">2</span></span><br><span class="line"><span class="number">3</span>  大众<span class="number">3</span>  雷克萨斯<span class="number">3</span></span><br><span class="line"><span class="number">4</span>  大众<span class="number">4</span>  雷克萨斯<span class="number">4</span></span><br><span class="line"><span class="number">5</span>  大众<span class="number">5</span>  雷克萨斯<span class="number">5</span></span><br><span class="line"><span class="number">6</span>  大众<span class="number">6</span>  雷克萨斯<span class="number">6</span></span><br><span class="line"><span class="number">7</span>  大众<span class="number">7</span>  雷克萨斯<span class="number">7</span></span><br><span class="line"><span class="number">8</span>  大众<span class="number">8</span>  雷克萨斯<span class="number">8</span></span><br><span class="line"><span class="number">9</span>  大众<span class="number">9</span>  雷克萨斯<span class="number">9</span></span><br></pre></td></tr></table></figure><h1 id="2-使用pd-merge-合并"><a href="#2-使用pd-merge-合并" class="headerlink" title="2. 使用pd.merge()合并"></a>2. 使用pd.merge()合并</h1><ul><li>merge与concat的区别在于，merge需要依据某一共同的行或列来进行合并</li><li>使用pd.merge()合并时，除自动根除两者相同columns名称的那一列，作为key来进行合并</li><li>注意每一列元素的吮吸不要求一致</li></ul><h2 id="2-1-一对一合并"><a href="#2-1-一对一合并" class="headerlink" title="2.1 一对一合并"></a>2.1 一对一合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: df1 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Sara'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'sail'</span>,<span class="string">'counting'</span>,<span class="string">'marcketing'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: df2 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Sara'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: display(df1,df2)</span><br><span class="line">  employee       group</span><br><span class="line"><span class="number">0</span>       Po        sail</span><br><span class="line"><span class="number">1</span>     Sara    counting</span><br><span class="line"><span class="number">2</span>    Danis  marcketing</span><br><span class="line"></span><br><span class="line">  employee  work_time</span><br><span class="line"><span class="number">0</span>       Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Sara          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis          <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: pd.merge(df1,df2)</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line">  employee       group  work_time</span><br><span class="line"><span class="number">0</span>       Po        sail          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Sara    counting          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis  marcketing          <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: df3 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Sara'</span>,<span class="string">'Bush'</span>],<span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: pd.merge(df1,df3)</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">  employee     group  work_time</span><br><span class="line"><span class="number">0</span>       Po      sail          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Sara  counting          <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: pd.concat((df1,df2),axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">43</span>]:</span><br><span class="line">  employee       group employee  work_time</span><br><span class="line"><span class="number">0</span>       Po        sail       Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Sara    counting     Sara          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis  marcketing    Danis          <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-2-多对一合并"><a href="#2-2-多对一合并" class="headerlink" title="2.2 多对一合并"></a>2.2 多对一合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: df1 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Sara'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'sail'</span>,<span class="string">'counting'</span>,<span class="string">'marcketing'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: df2 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Po'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: display(df1,df2)</span><br><span class="line">  employee       group</span><br><span class="line"><span class="number">0</span>       Po        sail</span><br><span class="line"><span class="number">1</span>     Sara    counting</span><br><span class="line"><span class="number">2</span>    Danis  marcketing</span><br><span class="line"></span><br><span class="line">  employee  work_time</span><br><span class="line"><span class="number">0</span>       Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       Po          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis          <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">47</span>]: pd.merge(df1,df2)</span><br><span class="line">Out[<span class="number">47</span>]:</span><br><span class="line">  employee       group  work_time</span><br><span class="line"><span class="number">0</span>       Po        sail          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       Po        sail          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis  marcketing          <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-3-多对多合并"><a href="#2-3-多对多合并" class="headerlink" title="2.3 多对多合并"></a>2.3 多对多合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: df1 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Po'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'sail'</span>,<span class="string">'counting'</span>,<span class="string">'marcketing'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: df2 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Po'</span>,<span class="string">'Danis'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: display(df1,df2)</span><br><span class="line">  employee       group</span><br><span class="line"><span class="number">0</span>       Po        sail</span><br><span class="line"><span class="number">1</span>       Po    counting</span><br><span class="line"><span class="number">2</span>    Danis  marcketing</span><br><span class="line"></span><br><span class="line">  employee  work_time</span><br><span class="line"><span class="number">0</span>       Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       Po          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    Danis          <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在进行多对多合并时，每一个数据都没有放过</span></span><br><span class="line">In [<span class="number">51</span>]: pd.merge(df1,df2)</span><br><span class="line">Out[<span class="number">51</span>]:</span><br><span class="line">  employee       group  work_time</span><br><span class="line"><span class="number">0</span>       Po        sail          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       Po        sail          <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       Po    counting          <span class="number">2</span></span><br><span class="line"><span class="number">3</span>       Po    counting          <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    Danis  marcketing          <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-4-key的规范化"><a href="#2-4-key的规范化" class="headerlink" title="2.4 key的规范化"></a>2.4 key的规范化</h2><ul><li>使用on=显示指定哪一列位key,当有多个key相同时使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">52</span>]: df3 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Summer'</span>,<span class="string">'Flower'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'sail'</span>,<span class="string">'marketing'</span>,<span class="string">'serch'</span>],</span><br><span class="line">    ...: <span class="string">'salary'</span>:[<span class="number">12000</span>,<span class="number">10000</span>,<span class="number">8000</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: df4 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Winter'</span>,<span class="string">'Flower'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'marketing'</span>,<span class="string">'marketing'</span>,<span class="string">'serch'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: display(df3,df4)</span><br><span class="line">  employee      group  salary</span><br><span class="line"><span class="number">0</span>       Po       sail   <span class="number">12000</span></span><br><span class="line"><span class="number">1</span>   Summer  marketing   <span class="number">10000</span></span><br><span class="line"><span class="number">2</span>   Flower      serch    <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">  employee      group  work_time</span><br><span class="line"><span class="number">0</span>       Po  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Winter  marketing          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   Flower      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">55</span>]: pd.merge(df3,df4)</span><br><span class="line">Out[<span class="number">55</span>]:</span><br><span class="line">  employee  group  salary  work_time</span><br><span class="line"><span class="number">0</span>   Flower  serch    <span class="number">8000</span>          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: pd.merge(df3,df4,on=<span class="string">'employee'</span>)</span><br><span class="line">Out[<span class="number">56</span>]:</span><br><span class="line">  employee group_x  salary    group_y  work_time</span><br><span class="line"><span class="number">0</span>       Po    sail   <span class="number">12000</span>  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Flower   serch    <span class="number">8000</span>      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">57</span>]: pd.merge(df3,df4,on=<span class="string">'group'</span>,suffixes=[<span class="string">'_A'</span>,<span class="string">'_B'</span>])</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line">  employee_A      group  salary employee_B  work_time</span><br><span class="line"><span class="number">0</span>     Summer  marketing   <span class="number">10000</span>         Po          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     Summer  marketing   <span class="number">10000</span>     Winter          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>     Flower      serch    <span class="number">8000</span>     Flower          <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>使用left_on和right_on指定左右两边的列作为key，当左右两个的key都不相等时使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: df5 = pd.DataFrame(&#123;<span class="string">'employer'</span>:[<span class="string">'Po'</span>,<span class="string">'Summer'</span>,<span class="string">'Flower'</span>],</span><br><span class="line">    ...: <span class="string">'Team'</span>:[<span class="string">'sail'</span>,<span class="string">'marketing'</span>,<span class="string">'serch'</span>],</span><br><span class="line">    ...: <span class="string">'salary'</span>:[<span class="number">12000</span>,<span class="number">10000</span>,<span class="number">8000</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: df6 = pd.DataFrame(&#123;<span class="string">'employee'</span>:[<span class="string">'Po'</span>,<span class="string">'Winter'</span>,<span class="string">'Flower'</span>],</span><br><span class="line">    ...: <span class="string">'group'</span>:[<span class="string">'marketing'</span>,<span class="string">'marketing'</span>,<span class="string">'serch'</span>],</span><br><span class="line">    ...: <span class="string">'work_time'</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: display(df5,df6)</span><br><span class="line">  employer       Team  salary</span><br><span class="line"><span class="number">0</span>       Po       sail   <span class="number">12000</span></span><br><span class="line"><span class="number">1</span>   Summer  marketing   <span class="number">10000</span></span><br><span class="line"><span class="number">2</span>   Flower      serch    <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">  employee      group  work_time</span><br><span class="line"><span class="number">0</span>       Po  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Winter  marketing          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   Flower      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">61</span>]: pd.merge(df5,df6,left_on=<span class="string">'employer'</span>,right_on=<span class="string">'employee'</span>)</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">  employer   Team  salary employee      group  work_time</span><br><span class="line"><span class="number">0</span>       Po   sail   <span class="number">12000</span>       Po  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Flower  serch    <span class="number">8000</span>   Flower      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">62</span>]: pd.merge(df5,df6,left_on=<span class="string">'Team'</span>,right_on=<span class="string">'group'</span>)</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">  employer       Team  salary employee      group  work_time</span><br><span class="line"><span class="number">0</span>   Summer  marketing   <span class="number">10000</span>       Po  marketing          <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   Summer  marketing   <span class="number">10000</span>   Winter  marketing          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   Flower      serch    <span class="number">8000</span>   Flower      serch          <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="2-5-内合并与外合并"><a href="#2-5-内合并与外合并" class="headerlink" title="2.5 内合并与外合并"></a>2.5 内合并与外合并</h2><ul><li>内合并：只保留两者都有的key（默认模式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: df1 = pd.DataFrame(&#123;<span class="string">'age'</span>:[<span class="number">18</span>,<span class="number">19</span>,<span class="number">22</span>,<span class="number">25</span>],<span class="string">'height'</span>:[<span class="number">170</span>,<span class="number">165</span>,<span class="number">180</span>,<span class="number">170</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: df2 = pd.DataFrame(&#123;<span class="string">'age'</span>:[<span class="number">18</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">30</span>],<span class="string">'weight'</span>:[<span class="number">55</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">65</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: display(df1,df2)</span><br><span class="line">   age  height</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>     <span class="number">170</span></span><br><span class="line"><span class="number">1</span>   <span class="number">19</span>     <span class="number">165</span></span><br><span class="line"><span class="number">2</span>   <span class="number">22</span>     <span class="number">180</span></span><br><span class="line"><span class="number">3</span>   <span class="number">25</span>     <span class="number">170</span></span><br><span class="line"></span><br><span class="line">   age  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>      <span class="number">55</span></span><br><span class="line"><span class="number">1</span>   <span class="number">20</span>      <span class="number">50</span></span><br><span class="line"><span class="number">2</span>   <span class="number">22</span>      <span class="number">60</span></span><br><span class="line"><span class="number">3</span>   <span class="number">30</span>      <span class="number">65</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">66</span>]: pd.merge(df1,df2)</span><br><span class="line">Out[<span class="number">66</span>]:</span><br><span class="line">   age  height  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>     <span class="number">170</span>      <span class="number">55</span></span><br><span class="line"><span class="number">1</span>   <span class="number">22</span>     <span class="number">180</span>      <span class="number">60</span></span><br></pre></td></tr></table></figure><ul><li>外合并how=’outer’：补NaN</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: pd.merge(df1,df2,how=<span class="string">'outer'</span>)</span><br><span class="line">Out[<span class="number">67</span>]:</span><br><span class="line">   age  height  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>   <span class="number">170.0</span>    <span class="number">55.0</span></span><br><span class="line"><span class="number">1</span>   <span class="number">19</span>   <span class="number">165.0</span>     NaN</span><br><span class="line"><span class="number">2</span>   <span class="number">22</span>   <span class="number">180.0</span>    <span class="number">60.0</span></span><br><span class="line"><span class="number">3</span>   <span class="number">25</span>   <span class="number">170.0</span>     NaN</span><br><span class="line"><span class="number">4</span>   <span class="number">20</span>     NaN    <span class="number">50.0</span></span><br><span class="line"><span class="number">5</span>   <span class="number">30</span>     NaN    <span class="number">65.0</span></span><br></pre></td></tr></table></figure><ul><li>左合并、右合并：how=’left’,how=’right’</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">68</span>]: pd.merge(df1,df2,how=<span class="string">'left'</span>)</span><br><span class="line">Out[<span class="number">68</span>]:</span><br><span class="line">   age  height  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>     <span class="number">170</span>    <span class="number">55.0</span></span><br><span class="line"><span class="number">1</span>   <span class="number">19</span>     <span class="number">165</span>     NaN</span><br><span class="line"><span class="number">2</span>   <span class="number">22</span>     <span class="number">180</span>    <span class="number">60.0</span></span><br><span class="line"><span class="number">3</span>   <span class="number">25</span>     <span class="number">170</span>     NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">69</span>]: pd.merge(df1,df2,how=<span class="string">'right'</span>)</span><br><span class="line">Out[<span class="number">69</span>]:</span><br><span class="line">   age  height  weight</span><br><span class="line"><span class="number">0</span>   <span class="number">18</span>   <span class="number">170.0</span>      <span class="number">55</span></span><br><span class="line"><span class="number">1</span>   <span class="number">22</span>   <span class="number">180.0</span>      <span class="number">60</span></span><br><span class="line"><span class="number">2</span>   <span class="number">20</span>     NaN      <span class="number">50</span></span><br><span class="line"><span class="number">3</span>   <span class="number">30</span>     NaN      <span class="number">65</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2、pandas-处理丢失数据</title>
      <link href="/Pandas/2018/10/31/2%E3%80%81pandas-%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/"/>
      <url>/Pandas/2018/10/31/2%E3%80%81pandas-%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Pandas处理丢失数据"><a href="#Pandas处理丢失数据" class="headerlink" title="Pandas处理丢失数据"></a>Pandas处理丢失数据</h1><ul><li>对于数值数据，pandas中的缺失数据使用浮点值Nan表示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: string_data = pd.Series([<span class="string">'python'</span>,<span class="string">'pandas'</span>,np.nan,<span class="string">'numpy'</span>])</span><br><span class="line">In [<span class="number">4</span>]: string_data</span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line"><span class="number">0</span>    python</span><br><span class="line"><span class="number">1</span>    pandas</span><br><span class="line"><span class="number">2</span>       NaN</span><br><span class="line"><span class="number">3</span>     numpy</span><br><span class="line">dtype: object</span><br><span class="line"><span class="comment">#使用isnull()方法可以检测缺失值</span></span><br><span class="line">In [<span class="number">5</span>]: string_data.isnull()</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><ul><li>Python自身内置的None值在对象数组中也可以作为NA:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: string_data[<span class="number">0</span>] = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: string_data.isnull()</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><ul><li>下面是关于缺失数据处理的函数</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>dropna</td><td>根据各标签的值中是否存在缺失数据对轴标签进行过滤，可通过阈值调节缺失值的容忍度</td></tr><tr><td>fillna</td><td>用指定值或插值方法填充缺失值</td></tr><tr><td>isnull</td><td>返回一个含有布尔值的对象，有缺失值的地方返回True，否则返回False</td></tr><tr><td>notnull</td><td>isnull的否定</td></tr></tbody></table><h2 id="过滤缺失数据"><a href="#过滤缺失数据" class="headerlink" title="过滤缺失数据"></a>过滤缺失数据</h2><ul><li>通过上面表格中的函数过滤缺失数据</li><li>Series:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: string_data</span><br><span class="line">Out[<span class="number">8</span>]:</span><br><span class="line"><span class="number">0</span>      <span class="keyword">None</span></span><br><span class="line"><span class="number">1</span>    pandas</span><br><span class="line"><span class="number">2</span>       NaN</span><br><span class="line"><span class="number">3</span>     numpy</span><br><span class="line">dtype: object</span><br><span class="line"><span class="comment">#使用dropna()函数进行过滤</span></span><br><span class="line">In [<span class="number">9</span>]: string_data.dropna()</span><br><span class="line">Out[<span class="number">9</span>]:</span><br><span class="line"><span class="number">1</span>    pandas</span><br><span class="line"><span class="number">3</span>     numpy</span><br><span class="line">dtype: object</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">In [<span class="number">10</span>]: string_data[string_data.notnull()]</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line"><span class="number">1</span>    pandas</span><br><span class="line"><span class="number">3</span>     numpy</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><ul><li>对于Dataframe:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: <span class="keyword">from</span> numpy <span class="keyword">import</span> nan <span class="keyword">as</span> NA</span><br><span class="line">In [<span class="number">21</span>]: data = pd.DataFrame([[<span class="number">1.</span>,<span class="number">5.</span>,<span class="number">3.</span>],[<span class="number">2.</span>,NA,NA],</span><br><span class="line">    ...:                     [NA,NA,NA],[NA,<span class="number">6.</span>,<span class="number">3.</span>]])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: data</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">5.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  NaN  NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN  NaN</span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">6.0</span>  <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: cleand = data.dropna()</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: data</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">5.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  NaN  NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN  NaN</span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">6.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="comment">#对于DataFrame,dropna()函数默认丢弃任何含缺失值的行</span></span><br><span class="line">In [<span class="number">25</span>]: cleand</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">5.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="comment">#传入how='all'将值丢弃全为NA的行</span></span><br><span class="line">In [<span class="number">26</span>]: cleand = data.dropna(how=<span class="string">'all'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: cleand</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">5.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  NaN  NaN</span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">6.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="comment">#若想丢弃列，则可传入axis=1</span></span><br><span class="line">In [<span class="number">28</span>]: data[<span class="number">4</span>] = NA                     </span><br><span class="line">                                          </span><br><span class="line">In [<span class="number">29</span>]: data                             </span><br><span class="line">Out[<span class="number">29</span>]:                                  </span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>   <span class="number">4</span>                      </span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">5.0</span>  <span class="number">3.0</span> NaN                      </span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  NaN  NaN NaN                      </span><br><span class="line"><span class="number">2</span>  NaN  NaN  NaN NaN                      </span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">6.0</span>  <span class="number">3.0</span> NaN                      </span><br><span class="line">                                          </span><br><span class="line">In [<span class="number">30</span>]: data.dropna(axis=<span class="number">1</span>,how=<span class="string">'all'</span>)    </span><br><span class="line">Out[<span class="number">30</span>]:                                  </span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>                          </span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">5.0</span>  <span class="number">3.0</span>                          </span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  NaN  NaN                          </span><br><span class="line"><span class="number">2</span>  NaN  NaN  NaN                          </span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">6.0</span>  <span class="number">3.0</span></span><br></pre></td></tr></table></figure><h2 id="填充缺失数据"><a href="#填充缺失数据" class="headerlink" title="填充缺失数据"></a>填充缺失数据</h2><ul><li>针对不想过滤缺失数据的情况，可以对数据进行填充，大多数情况下使用fillna函数。通过一个常数调用fillna就能将缺失值替换为常数值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">31</span>]: df = pd.DataFrame(np.random.randn(<span class="number">7</span>,<span class="number">3</span>))      </span><br><span class="line">                                                      </span><br><span class="line">In [<span class="number">32</span>]: df.iloc[:<span class="number">4</span>,<span class="number">1</span>] = NA                           </span><br><span class="line">                                                      </span><br><span class="line">In [<span class="number">33</span>]: df.iloc[:<span class="number">2</span>,<span class="number">2</span>] = NA                           </span><br><span class="line">                                                      </span><br><span class="line">In [<span class="number">34</span>]: df                                           </span><br><span class="line">Out[<span class="number">34</span>]:                                              </span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>                       </span><br><span class="line"><span class="number">0</span>  <span class="number">0.865682</span>       NaN       NaN                       </span><br><span class="line"><span class="number">1</span> <span class="number">-0.204699</span>       NaN       NaN                       </span><br><span class="line"><span class="number">2</span>  <span class="number">0.130211</span>       NaN <span class="number">-0.848007</span>                       </span><br><span class="line"><span class="number">3</span> <span class="number">-0.426136</span>       NaN  <span class="number">1.704451</span>                       </span><br><span class="line"><span class="number">4</span>  <span class="number">0.702581</span> <span class="number">-1.478580</span>  <span class="number">0.159704</span>                       </span><br><span class="line"><span class="number">5</span> <span class="number">-0.693145</span> <span class="number">-0.334965</span> <span class="number">-0.187303</span>                       </span><br><span class="line"><span class="number">6</span>  <span class="number">1.181460</span>  <span class="number">1.289157</span>  <span class="number">0.128563</span>                       </span><br><span class="line">                                                      </span><br><span class="line">In [<span class="number">35</span>]: df.fillna(<span class="number">0</span>)                                 </span><br><span class="line">Out[<span class="number">35</span>]:                                              </span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>                       </span><br><span class="line"><span class="number">0</span>  <span class="number">0.865682</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span>                       </span><br><span class="line"><span class="number">1</span> <span class="number">-0.204699</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span>                       </span><br><span class="line"><span class="number">2</span>  <span class="number">0.130211</span>  <span class="number">0.000000</span> <span class="number">-0.848007</span>                       </span><br><span class="line"><span class="number">3</span> <span class="number">-0.426136</span>  <span class="number">0.000000</span>  <span class="number">1.704451</span>                       </span><br><span class="line"><span class="number">4</span>  <span class="number">0.702581</span> <span class="number">-1.478580</span>  <span class="number">0.159704</span>                       </span><br><span class="line"><span class="number">5</span> <span class="number">-0.693145</span> <span class="number">-0.334965</span> <span class="number">-0.187303</span>                       </span><br><span class="line"><span class="number">6</span>  <span class="number">1.181460</span>  <span class="number">1.289157</span>  <span class="number">0.128563</span> </span><br><span class="line"><span class="comment"># 通过字典调用fillna，实现对不同的列填充不同的值：</span></span><br><span class="line">In [<span class="number">37</span>]: df.fillna(&#123;<span class="number">1</span>:<span class="number">0.5</span>,<span class="number">2</span>:<span class="number">0</span>&#125;)</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.865682</span>  <span class="number">0.500000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">1</span> <span class="number">-0.204699</span>  <span class="number">0.500000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.130211</span>  <span class="number">0.500000</span> <span class="number">-0.848007</span></span><br><span class="line"><span class="number">3</span> <span class="number">-0.426136</span>  <span class="number">0.500000</span>  <span class="number">1.704451</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.702581</span> <span class="number">-1.478580</span>  <span class="number">0.159704</span></span><br><span class="line"><span class="number">5</span> <span class="number">-0.693145</span> <span class="number">-0.334965</span> <span class="number">-0.187303</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1.181460</span>  <span class="number">1.289157</span>  <span class="number">0.128563</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3、pandas-多层索引</title>
      <link href="/Pandas/2018/10/31/3%E3%80%81pandas-%E5%A4%9A%E5%B1%82%E7%B4%A2%E5%BC%95/"/>
      <url>/Pandas/2018/10/31/3%E3%80%81pandas-%E5%A4%9A%E5%B1%82%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建多层行索引"><a href="#1-创建多层行索引" class="headerlink" title="1. 创建多层行索引"></a>1. 创建多层行索引</h1><h2 id="1-1-隐式构造"><a href="#1-1-隐式构造" class="headerlink" title="1.1 隐式构造"></a>1.1 隐式构造</h2><ul><li>最常见的方法是给DataFrame构造函数的index参数传递两个或更多的数组<ul><li>Series也可以创建多层索引</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s</span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line">a  <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">   <span class="number">0</span>    <span class="number">2</span></span><br><span class="line">b  <span class="number">1</span>    <span class="number">3</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: df = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">6</span>,<span class="number">3</span>)),</span><br><span class="line">   ...: columns=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'Python'</span>],</span><br><span class="line">   ...: index=[[<span class="string">'Michael'</span>,<span class="string">'Michael'</span>,<span class="string">'Lisa'</span>,<span class="string">'Lisa'</span>,<span class="string">'Po'</span>,<span class="string">'Po'</span>],</span><br><span class="line">   ...: [<span class="string">'Mid'</span>,<span class="string">'End'</span>,<span class="string">'Mid'</span>,<span class="string">'End'</span>,<span class="string">'Mid'</span>,<span class="string">'End'</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: df</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">              语文   数学  Python</span><br><span class="line">Michael Mid  <span class="number">117</span>   <span class="number">50</span>     <span class="number">144</span></span><br><span class="line">        End   <span class="number">39</span>   <span class="number">56</span>      <span class="number">56</span></span><br><span class="line">Lisa    Mid  <span class="number">110</span>  <span class="number">103</span>     <span class="number">148</span></span><br><span class="line">        End  <span class="number">119</span>   <span class="number">91</span>     <span class="number">116</span></span><br><span class="line">Po      Mid   <span class="number">69</span>   <span class="number">67</span>      <span class="number">13</span></span><br><span class="line">        End  <span class="number">120</span>  <span class="number">127</span>     <span class="number">105</span></span><br></pre></td></tr></table></figure><h2 id="1-2-显示构造pd-MultiIndex"><a href="#1-2-显示构造pd-MultiIndex" class="headerlink" title="1.2 显示构造pd.MultiIndex"></a>1.2 显示构造pd.MultiIndex</h2><ul><li>使用数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: df1 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">6</span>,<span class="number">3</span>)),</span><br><span class="line">   ...: columns=[<span class="string">'Java'</span>,<span class="string">'Python'</span>,<span class="string">'Scala'</span>],</span><br><span class="line">   ...: index=pd.MultiIndex.from_arrays([[<span class="string">'张三'</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'王五'</span>],</span><br><span class="line">   ...: [<span class="string">'期中'</span>,<span class="string">'期末'</span>,<span class="string">'期中'</span>,<span class="string">'期末'</span>,<span class="string">'期中'</span>,<span class="string">'期末'</span>]]))</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: df1</span><br><span class="line">Out[<span class="number">9</span>]:</span><br><span class="line">           Java   Python   Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>      <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>       <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>       <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>      <span class="number">92</span></span><br><span class="line">王五 期中    <span class="number">64</span>     <span class="number">17</span>       <span class="number">98</span></span><br><span class="line">    期末    <span class="number">40</span>     <span class="number">60</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><ul><li>使用tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: df2 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">6</span>,<span class="number">3</span>)),</span><br><span class="line">    ...: columns=[<span class="string">'Java'</span>,<span class="string">'Python'</span>,<span class="string">'Scala'</span>],</span><br><span class="line">    ...: index=pd.MultiIndex.from_tuples([(<span class="string">'张三'</span>,<span class="string">'期中'</span>),(<span class="string">'张三'</span>,<span class="string">'期末'</span>),(<span class="string">'李四'</span>,<span class="string">'期中'</span>),(<span class="string">'李四'</span>,<span class="string">'</span></span><br><span class="line"><span class="string">    ...: 期末'</span>),(<span class="string">'王五'</span>,<span class="string">'期中'</span>),(<span class="string">'王五'</span>,<span class="string">'期末'</span>)]))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: df2</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">       Java   Python  Scala</span><br><span class="line">张三 期中    <span class="number">80</span>     <span class="number">108</span>     <span class="number">108</span></span><br><span class="line">    期末    <span class="number">146</span>    <span class="number">84</span>       <span class="number">85</span></span><br><span class="line">李四 期中    <span class="number">139</span>    <span class="number">136</span>     <span class="number">66</span></span><br><span class="line">    期末    <span class="number">149</span>    <span class="number">92</span>      <span class="number">94</span></span><br><span class="line">王五 期中    <span class="number">27</span>     <span class="number">83</span>      <span class="number">143</span></span><br><span class="line">    期末    <span class="number">109</span>    <span class="number">4</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><ul><li>使用product 【最简单，推荐使用】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: df3 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">6</span>,<span class="number">3</span>)),</span><br><span class="line">    ...: columns=[<span class="string">'Java'</span>,<span class="string">'Python'</span>,<span class="string">'Scala'</span>],</span><br><span class="line">    ...: index=pd.MultiIndex.from_product([[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>],[<span class="string">'期中'</span>,<span class="string">'期末'</span>]]))</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: df3</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三  期中    <span class="number">48</span>     <span class="number">131</span>     <span class="number">73</span></span><br><span class="line">     期末    <span class="number">69</span>     <span class="number">60</span>      <span class="number">67</span></span><br><span class="line">李四  期中    <span class="number">17</span>     <span class="number">50</span>      <span class="number">106</span></span><br><span class="line">     期末    <span class="number">140</span>    <span class="number">32</span>      <span class="number">10</span></span><br><span class="line">王五  期中    <span class="number">40</span>     <span class="number">113</span>     <span class="number">73</span></span><br><span class="line">     期末    <span class="number">37</span>     <span class="number">105</span>     <span class="number">103</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对于DataFrame列同样可以设置多层索引</span></span><br><span class="line">In [<span class="number">14</span>]: df4 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">3</span>,<span class="number">6</span>)),</span><br><span class="line">    ...: columns=pd.MultiIndex.from_product([[<span class="string">'Java'</span>,<span class="string">'Python'</span>,<span class="string">'Scala'</span>],[<span class="string">'期中'</span>,<span class="string">'期末'</span>]]),</span><br><span class="line">    ...: index=[<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: df4</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">     Java           Python      Scala</span><br><span class="line">     期中   期末     期中  期末    期中   期末</span><br><span class="line">张三   <span class="number">81</span>   <span class="number">17</span>      <span class="number">49</span>    <span class="number">83</span>     <span class="number">104</span>   <span class="number">123</span></span><br><span class="line">李四   <span class="number">30</span>   <span class="number">119</span>     <span class="number">23</span>    <span class="number">65</span>     <span class="number">11</span>    <span class="number">138</span></span><br><span class="line">王五   <span class="number">65</span>   <span class="number">147</span>     <span class="number">17</span>    <span class="number">25</span>     <span class="number">148</span>   <span class="number">149</span></span><br></pre></td></tr></table></figure><h1 id="2-多层索引对象的索引与切片操作"><a href="#2-多层索引对象的索引与切片操作" class="headerlink" title="2. 多层索引对象的索引与切片操作"></a>2. 多层索引对象的索引与切片操作</h1><h2 id="2-1-Series的操作"><a href="#2-1-Series的操作" class="headerlink" title="2.1 Series的操作"></a>2.1 Series的操作</h2><ul><li>【重要】对于Series来说，直接中括号<code>[]</code>与使用<code>.loc()</code>完全一样，推荐使用中括号索引和切片</li><li>（1）索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: s = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">4</span>),index=[[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>],[<span class="string">'期中'</span>,<span class="string">'期末'</span>,<span class="string">'期</span></span><br><span class="line"><span class="string">    ...: 中'</span>,<span class="string">'期末'</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: s</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">a  期中     <span class="number">19</span></span><br><span class="line">   期末     <span class="number">16</span></span><br><span class="line">b  期中      <span class="number">2</span></span><br><span class="line">   期末    <span class="number">126</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: s[<span class="string">'a'</span>,<span class="string">'期末'</span>]</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">16</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: s[[<span class="string">'a'</span>,<span class="string">'期中'</span>]]</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">a  期中    <span class="number">19</span></span><br><span class="line">   期末    <span class="number">16</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><ul><li>（2）切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: s[<span class="string">'a'</span>:<span class="string">'b'</span>]</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">a  期中     <span class="number">19</span></span><br><span class="line">   期末     <span class="number">16</span></span><br><span class="line">b  期中      <span class="number">2</span></span><br><span class="line">   期末    <span class="number">126</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: s.iloc[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">a  期中    <span class="number">19</span></span><br><span class="line">   期末    <span class="number">16</span></span><br><span class="line">b  期中     <span class="number">2</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><h2 id="2-2-DataFrame的操作"><a href="#2-2-DataFrame的操作" class="headerlink" title="2.2 DataFrame的操作"></a>2.2 DataFrame的操作</h2><ul><li>（1）可以直接使用列名称来进行行列索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: df1</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">           Java   Python   Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>      <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>       <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>       <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>      <span class="number">92</span></span><br><span class="line">王五 期中    <span class="number">64</span>     <span class="number">17</span>       <span class="number">98</span></span><br><span class="line">    期末    <span class="number">40</span>     <span class="number">60</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: df1[<span class="string">'张三'</span>:<span class="string">'李四'</span>]</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>     <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>      <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>      <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>     <span class="number">92</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: df1.loc[<span class="string">'张三'</span>:<span class="string">'李四'</span>]</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>     <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>      <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>      <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>     <span class="number">92</span></span><br></pre></td></tr></table></figure><ul><li>（2）使用行索引需要用<code>ix()</code>，<code>loc()</code>等函数</li><li>【极其重要】推荐使用<code>loc()</code>函数</li><li>注意在对行索引的时候，若一级行索引还有多个，对二级行索引会遇到问题！也就是说，无法直接对二级索引进行索引，必须让二级索引变成一级索引后才能对其进行索引！</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">25</span>]: df1.loc[<span class="string">'张三'</span>,<span class="string">'期中'</span>]</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">Java       <span class="number">19</span></span><br><span class="line">Python    <span class="number">147</span></span><br><span class="line">Scala       <span class="number">7</span></span><br><span class="line">Name: (张三, 期中), dtype: int32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: df1.loc[<span class="string">'张三'</span>].loc[<span class="string">'期中'</span>]</span><br><span class="line">Out[<span class="number">26</span>]:</span><br><span class="line">Java       <span class="number">19</span></span><br><span class="line">Python    <span class="number">147</span></span><br><span class="line">Scala       <span class="number">7</span></span><br><span class="line">Name: 期中, dtype: int32</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: df1.loc[[<span class="string">'张三'</span>,<span class="string">'李四'</span>]]</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>     <span class="number">7</span></span><br><span class="line">    期末    <span class="number">145</span>    <span class="number">29</span>      <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>      <span class="number">105</span></span><br><span class="line">    期末    <span class="number">136</span>    <span class="number">145</span>     <span class="number">92</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1.loc[:,<span class="string">'期中'</span>]</span><br><span class="line"><span class="comment">#报错</span></span><br></pre></td></tr></table></figure><h1 id="3-索引的堆（stack）"><a href="#3-索引的堆（stack）" class="headerlink" title="3. 索引的堆（stack）"></a>3. 索引的堆（stack）</h1><ul><li>stack()</li><li>unstack()</li><li>【小技巧】使用<code>stack()</code>的时候，level等于哪一个，哪一个就消失，出现在行里。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: df4</span><br><span class="line">Out[<span class="number">29</span>]:</span><br><span class="line">      Java           Python      Scala</span><br><span class="line">      期中   期末     期中  期末    期中   期末</span><br><span class="line">张三   <span class="number">81</span>   <span class="number">17</span>       <span class="number">49</span>    <span class="number">83</span>     <span class="number">104</span>   <span class="number">123</span></span><br><span class="line">李四   <span class="number">30</span>   <span class="number">119</span>      <span class="number">23</span>    <span class="number">65</span>     <span class="number">11</span>    <span class="number">138</span></span><br><span class="line">王五   <span class="number">65</span>   <span class="number">147</span>      <span class="number">17</span>    <span class="number">25</span>     <span class="number">148</span>   <span class="number">149</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#stack = 堆  ---&gt;行</span></span><br><span class="line">In [<span class="number">30</span>]: df4.stack()</span><br><span class="line">Out[<span class="number">30</span>]:</span><br><span class="line">         Java   Python  Scala</span><br><span class="line">张三 期中    <span class="number">81</span>      <span class="number">49</span>     <span class="number">104</span></span><br><span class="line">    期末    <span class="number">17</span>      <span class="number">83</span>     <span class="number">123</span></span><br><span class="line">李四 期中    <span class="number">30</span>      <span class="number">23</span>     <span class="number">11</span></span><br><span class="line">    期末    <span class="number">119</span>     <span class="number">65</span>     <span class="number">138</span></span><br><span class="line">王五 期中    <span class="number">65</span>      <span class="number">17</span>     <span class="number">148</span></span><br><span class="line">    期末    <span class="number">147</span>     <span class="number">25</span>     <span class="number">149</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多层索引而言0,1,2：从上往下数</span></span><br><span class="line">In [<span class="number">31</span>]: df4.stack(level=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">31</span>]:</span><br><span class="line">             期中   期末</span><br><span class="line">张三 Java     <span class="number">81</span>    <span class="number">17</span></span><br><span class="line">    Python   <span class="number">49</span>    <span class="number">83</span></span><br><span class="line">    Scala    <span class="number">104</span>   <span class="number">123</span></span><br><span class="line">李四 Java     <span class="number">30</span>    <span class="number">119</span></span><br><span class="line">    Python   <span class="number">23</span>    <span class="number">65</span></span><br><span class="line">    Scala    <span class="number">11</span>    <span class="number">138</span></span><br><span class="line">王五 Java     <span class="number">65</span>    <span class="number">147</span></span><br><span class="line">    Python   <span class="number">17</span>    <span class="number">25</span></span><br><span class="line">    Scala    <span class="number">148</span>   <span class="number">149</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: df4.stack(level=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">32</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">81</span>      <span class="number">49</span>      <span class="number">104</span></span><br><span class="line">    期末    <span class="number">17</span>      <span class="number">83</span>      <span class="number">123</span></span><br><span class="line">李四 期中    <span class="number">30</span>      <span class="number">23</span>      <span class="number">11</span></span><br><span class="line">    期末    <span class="number">119</span>     <span class="number">65</span>      <span class="number">138</span></span><br><span class="line">王五 期中    <span class="number">65</span>      <span class="number">17</span>      <span class="number">148</span></span><br><span class="line">    期末    <span class="number">147</span>     <span class="number">25</span>      <span class="number">149</span></span><br></pre></td></tr></table></figure><ul><li>【小技巧】使用<code>unstack()</code>的时候，<code>level()</code>等于哪一个，哪一个就消失，出现在列里面。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: df2</span><br><span class="line">Out[<span class="number">33</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">80</span>     <span class="number">108</span>    <span class="number">108</span></span><br><span class="line">    期末    <span class="number">146</span>    <span class="number">84</span>      <span class="number">85</span></span><br><span class="line">李四 期中    <span class="number">139</span>    <span class="number">136</span>     <span class="number">66</span></span><br><span class="line">    期末    <span class="number">149</span>    <span class="number">92</span>      <span class="number">94</span></span><br><span class="line">王五 期中    <span class="number">27</span>     <span class="number">83</span>      <span class="number">143</span></span><br><span class="line">    期末    <span class="number">109</span>    <span class="number">4</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df2.unstack()</span><br><span class="line">Out[<span class="number">34</span>]:</span><br><span class="line">   Java         Python       Scala</span><br><span class="line">        期中   期末     期中  期末    期中  期末</span><br><span class="line">张三     <span class="number">80</span>    <span class="number">146</span>     <span class="number">108</span>   <span class="number">84</span>     <span class="number">108</span>  <span class="number">85</span></span><br><span class="line">李四     <span class="number">139</span>   <span class="number">149</span>     <span class="number">136</span>   <span class="number">92</span>     <span class="number">66</span>   <span class="number">94</span></span><br><span class="line">王五     <span class="number">27</span>    <span class="number">109</span>     <span class="number">83</span>    <span class="number">4</span>      <span class="number">143</span>  <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: df2.unstack(level=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">35</span>]:</span><br><span class="line">   Java            Python          Scala</span><br><span class="line">     张三   李四   王五     张三   李四  王五    张三  李四   王五</span><br><span class="line">期中    <span class="number">80</span>     <span class="number">139</span>   <span class="number">27</span>       <span class="number">108</span>   <span class="number">136</span>  <span class="number">83</span>      <span class="number">108</span>  <span class="number">66</span>    <span class="number">143</span></span><br><span class="line">期末    <span class="number">146</span>    <span class="number">149</span>   <span class="number">109</span>      <span class="number">84</span>    <span class="number">92</span>   <span class="number">4</span>       <span class="number">85</span>   <span class="number">94</span>    <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: df2.unstack(level=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">   Java         Python       Scala</span><br><span class="line">        期中   期末     期中  期末    期中  期末</span><br><span class="line">张三     <span class="number">80</span>    <span class="number">146</span>     <span class="number">108</span>  <span class="number">84</span>      <span class="number">108</span>  <span class="number">85</span></span><br><span class="line">李四     <span class="number">139</span>   <span class="number">149</span>     <span class="number">136</span>  <span class="number">92</span>      <span class="number">66</span>   <span class="number">94</span></span><br><span class="line">王五     <span class="number">27</span>    <span class="number">109</span>     <span class="number">83</span>   <span class="number">4</span>       <span class="number">143</span>  <span class="number">90</span></span><br></pre></td></tr></table></figure><h1 id="4-聚合操作"><a href="#4-聚合操作" class="headerlink" title="4. 聚合操作"></a>4. 聚合操作</h1><ul><li>【注意】<ul><li>需要指定axis</li><li>【小技巧】和<code>unstack()</code>相反，聚合的时候，<code>axis</code>等于哪一个，哪一个就保留</li></ul></li><li>所谓的聚合操作：平均数，方差，最大值，最小值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: df1</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">       Java  Python  Scala</span><br><span class="line">张三 期中    <span class="number">19</span>     <span class="number">147</span>      <span class="number">7</span></span><br><span class="line">   期末    <span class="number">145</span>    <span class="number">29</span>       <span class="number">109</span></span><br><span class="line">李四 期中    <span class="number">83</span>     <span class="number">84</span>       <span class="number">105</span></span><br><span class="line">   期末    <span class="number">136</span>    <span class="number">145</span>      <span class="number">92</span></span><br><span class="line">王五 期中    <span class="number">64</span>     <span class="number">17</span>       <span class="number">98</span></span><br><span class="line">   期末    <span class="number">40</span>     <span class="number">60</span>       <span class="number">90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求和操作</span></span><br><span class="line">In [<span class="number">38</span>]: df1.sum()</span><br><span class="line">Out[<span class="number">38</span>]:</span><br><span class="line">Java      <span class="number">487</span></span><br><span class="line">Python    <span class="number">482</span></span><br><span class="line">Scala     <span class="number">501</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#axis = 0 行，对行进行求和操作，行的数据就加到一起了，行就消失了</span></span><br><span class="line">In [<span class="number">39</span>]: df1.sum(axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">39</span>]:</span><br><span class="line">Java      <span class="number">487</span></span><br><span class="line">Python    <span class="number">482</span></span><br><span class="line">Scala     <span class="number">501</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: df1.sum(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line">张三  期中    <span class="number">173</span></span><br><span class="line">     期末    <span class="number">283</span></span><br><span class="line">李四  期中    <span class="number">272</span></span><br><span class="line">     期末    <span class="number">373</span></span><br><span class="line">王五  期中    <span class="number">179</span></span><br><span class="line">     期末    <span class="number">190</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求方差</span></span><br><span class="line">In [<span class="number">41</span>]: df1.std(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">41</span>]:</span><br><span class="line">张三  期中    <span class="number">77.597251</span></span><br><span class="line">     期末    <span class="number">59.374518</span></span><br><span class="line">李四  期中    <span class="number">12.423097</span></span><br><span class="line">     期末    <span class="number">28.360771</span></span><br><span class="line">王五  期中    <span class="number">40.673497</span></span><br><span class="line">     期末    <span class="number">25.166115</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1、Pandas-Series-and-DataFrame</title>
      <link href="/Pandas/2018/10/29/1%E3%80%81Pandas-Series-and-DataFrame/"/>
      <url>/Pandas/2018/10/29/1%E3%80%81Pandas-Series-and-DataFrame/</url>
      
        <content type="html"><![CDATA[<h1 id="Pandas的数据结构"><a href="#Pandas的数据结构" class="headerlink" title="Pandas的数据结构"></a>Pandas的数据结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据分析三剑客</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h2 id="1-Series"><a href="#1-Series" class="headerlink" title="1. Series"></a>1. Series</h2><ul><li>Series是一种类似与一维数组的对象，由下面两部分组成：<ul><li>values:一组数组（ndarray类型）</li><li>index:相关的数据索引标签</li></ul></li></ul><h3 id="1-1-Series的创建"><a href="#1-1-Series的创建" class="headerlink" title="1.1 Series的创建"></a>1.1 Series的创建</h3><ul><li>两种创建方式：</li><li>（1）由列表或numpy数组创建<ul><li>默认索引为0到N-1的整数类型索引</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s = pd.Series([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)])</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: s</span><br><span class="line">Out[<span class="number">3</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过index指定索引</span></span><br><span class="line">In [<span class="number">4</span>]: s.index = list(<span class="string">'abcd'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: s</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: s1 = pd.Series([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>],index=list(<span class="string">'abcd'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: s1</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">a    zhangsan</span><br><span class="line">b        lisi</span><br><span class="line">c      wangwu</span><br><span class="line">d     zhaoliu</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Series只能存放一维数据</span></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: s2 = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size=<span class="number">5</span>),index=list(<span class="string">'abcde'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: s2</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">a    <span class="number">2</span></span><br><span class="line">b    <span class="number">7</span></span><br><span class="line">c    <span class="number">9</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">e    <span class="number">7</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><ul><li>（2）由字典创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: s3 = pd.Series(&#123;<span class="string">'zhangsan'</span>:<span class="number">23</span>,<span class="string">'lisi'</span>:<span class="number">22</span>,<span class="string">'wangwu'</span>:<span class="number">24</span>,<span class="string">'zhaoliu'</span>:<span class="number">21</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: s3</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">zhangsan    <span class="number">23</span></span><br><span class="line">lisi        <span class="number">22</span></span><br><span class="line">wangwu      <span class="number">24</span></span><br><span class="line">zhaoliu     <span class="number">21</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="1-2-Series的索引和切片"><a href="#1-2-Series的索引和切片" class="headerlink" title="1.2 Series的索引和切片"></a>1.2 Series的索引和切片</h3><ul><li>可以使用中括号取单个索引（此时返回的是元素类型），或者中括号里面一个列表取多个索引（此时返回的仍然是一个Series类型）。</li><li>显示索引：<ul><li>使用index中的元素作为索引值</li><li>使用<code>.loc[]</code> 推荐</li></ul></li><li>注意，此时是闭区间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: s4 = pd.Series(np.random.random(<span class="number">10</span>),index=list(<span class="string">'abcdefghij'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: s4</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">a    <span class="number">0.901201</span></span><br><span class="line">b    <span class="number">0.026940</span></span><br><span class="line">c    <span class="number">0.596118</span></span><br><span class="line">d    <span class="number">0.732741</span></span><br><span class="line">e    <span class="number">0.050395</span></span><br><span class="line">f    <span class="number">0.550084</span></span><br><span class="line">g    <span class="number">0.390146</span></span><br><span class="line">h    <span class="number">0.592242</span></span><br><span class="line">i    <span class="number">0.724512</span></span><br><span class="line">j    <span class="number">0.585712</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用index中的元素索引</span></span><br><span class="line">In [<span class="number">16</span>]: s4[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">0.9012012103671466</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示索引</span></span><br><span class="line">In [<span class="number">17</span>]: s4.loc[<span class="string">'a'</span>:<span class="string">'d'</span>]</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">a    <span class="number">0.901201</span></span><br><span class="line">b    <span class="number">0.026940</span></span><br><span class="line">c    <span class="number">0.596118</span></span><br><span class="line">d    <span class="number">0.732741</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过Series默认索引序号也可</span></span><br><span class="line">In [<span class="number">18</span>]: s4[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">0.026939806463515903</span></span><br></pre></td></tr></table></figure><ul><li>隐式索引：<ul><li>使用整数作为索引值</li><li>使用<code>.ilco[]</code>推荐</li></ul></li><li>注意：此时是半开区间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: s4.iloc[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">a    <span class="number">0.901201</span></span><br><span class="line">b    <span class="number">0.026940</span></span><br><span class="line">c    <span class="number">0.596118</span></span><br><span class="line">d    <span class="number">0.732741</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="1-3-Series的基本概念"><a href="#1-3-Series的基本概念" class="headerlink" title="1.3 Series的基本概念"></a>1.3 Series的基本概念</h3><ul><li>可以把Series看成一个定长的有序字典</li><li>可以通过shape，size，index，values等得到series的属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Series.values就是一个ndarray</span></span><br><span class="line">In [<span class="number">20</span>]: display(s4.shape,s4.size,s4.index,s4.values)</span><br><span class="line">(<span class="number">10</span>,)</span><br><span class="line"><span class="number">10</span></span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line">array([<span class="number">0.90120121</span>, <span class="number">0.02693981</span>, <span class="number">0.59611828</span>, <span class="number">0.73274146</span>, <span class="number">0.05039477</span>,</span><br><span class="line">       <span class="number">0.55008443</span>, <span class="number">0.39014647</span>, <span class="number">0.59224205</span>, <span class="number">0.72451164</span>, <span class="number">0.58571199</span>])</span><br></pre></td></tr></table></figure><ul><li>可以通过<code>head()</code>,<code>tail()</code>快速查看Series对象的样式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看Series前几行</span></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: df = pd.read_excel(<span class="string">'D:\myProject\Python\Jupyter\pydata\people.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: type(df)</span><br><span class="line">Out[<span class="number">24</span>]: pandas.core.frame.DataFrame</span><br><span class="line"><span class="comment">#通过列索引获得age数据</span></span><br><span class="line">In [<span class="number">25</span>]: age = df[<span class="string">'age'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: type(age)</span><br><span class="line">Out[<span class="number">26</span>]: pandas.core.series.Series</span><br><span class="line"><span class="comment">#利用head()获得前几行数据</span></span><br><span class="line">In [<span class="number">27</span>]: age.head(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">43</span></span><br><span class="line"><span class="number">1</span>    <span class="number">29</span></span><br><span class="line"><span class="number">2</span>    <span class="number">25</span></span><br><span class="line"><span class="number">3</span>    <span class="number">50</span></span><br><span class="line"><span class="number">4</span>    <span class="number">48</span></span><br><span class="line">Name: age, dtype: int64</span><br><span class="line"><span class="comment">#利用tail()获得后几行数据</span></span><br><span class="line">In [<span class="number">28</span>]: age.tail(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line"><span class="number">495</span>    <span class="number">24</span></span><br><span class="line"><span class="number">496</span>    <span class="number">30</span></span><br><span class="line"><span class="number">497</span>    <span class="number">57</span></span><br><span class="line"><span class="number">498</span>    <span class="number">39</span></span><br><span class="line"><span class="number">499</span>    <span class="number">42</span></span><br><span class="line">Name: age, dtype: int64</span><br></pre></td></tr></table></figure><ul><li>可以使用<code>pd.isnull()</code>,<code>pd.notnull()</code>，或自带<code>isnull()</code>，<code>notnull()</code>函数检测缺失数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: s5 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="keyword">None</span>,np.nan])</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: s5</span><br><span class="line">Out[<span class="number">30</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测缺失数据</span></span><br><span class="line">In [<span class="number">31</span>]: s5.isnull()</span><br><span class="line">Out[<span class="number">31</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: s6 = s5.notnull()</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: s6</span><br><span class="line">Out[<span class="number">33</span>]:</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#notnull相当于过滤，将为false的过滤掉</span></span><br><span class="line">In [<span class="number">34</span>]: s5[s6]</span><br><span class="line">Out[<span class="number">34</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><ul><li>Series对象本身及其实例都有一个name属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#name在DateFrame中用于区分,在DateFrame中是指其列名</span></span><br><span class="line">In [<span class="number">36</span>]: s5.name = <span class="string">'Test'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: s5</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line">Name: Test, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: df</span><br><span class="line">Out[<span class="number">38</span>]:</span><br><span class="line">    name   city  age  height  weight</span><br><span class="line"><span class="number">0</span>     危琳    兴城市   <span class="number">43</span>     <span class="number">164</span>     <span class="number">156</span></span><br><span class="line"><span class="number">1</span>    颛春梅    潜江县   <span class="number">29</span>     <span class="number">181</span>     <span class="number">114</span></span><br><span class="line"><span class="number">2</span>     韶璐    深圳县   <span class="number">25</span>     <span class="number">170</span>     <span class="number">149</span></span><br><span class="line"><span class="number">3</span>     父想    大冶县   <span class="number">50</span>     <span class="number">172</span>     <span class="number">138</span></span><br><span class="line"><span class="number">4</span>    逄建国     彬县   <span class="number">48</span>     <span class="number">169</span>     <span class="number">110</span></span><br><span class="line"><span class="number">5</span>     车静    宁德县   <span class="number">56</span>     <span class="number">177</span>     <span class="number">119</span></span><br><span class="line"><span class="number">6</span>    俟玉梅     莉县   <span class="number">47</span>     <span class="number">176</span>     <span class="number">125</span></span><br><span class="line"><span class="number">7</span>     岳博    通辽县   <span class="number">51</span>     <span class="number">162</span>     <span class="number">118</span></span><br><span class="line"><span class="number">8</span>     璩柳     建县   <span class="number">31</span>     <span class="number">189</span>     <span class="number">154</span></span><br><span class="line"><span class="number">9</span>     空龙    西宁县   <span class="number">23</span>     <span class="number">179</span>     <span class="number">150</span></span><br><span class="line"><span class="number">10</span>    濮婷     文县   <span class="number">50</span>     <span class="number">172</span>     <span class="number">121</span></span><br><span class="line"><span class="number">11</span>    勾婷    武汉县   <span class="number">50</span>     <span class="number">184</span>     <span class="number">141</span></span><br><span class="line"><span class="number">12</span>    苍萍     凯市   <span class="number">27</span>     <span class="number">174</span>     <span class="number">120</span></span><br><span class="line"><span class="number">13</span>    邰帆    上海县   <span class="number">45</span>     <span class="number">174</span>     <span class="number">151</span></span><br><span class="line"><span class="number">14</span>    东红     华县   <span class="number">30</span>     <span class="number">166</span>     <span class="number">123</span></span><br><span class="line"><span class="number">15</span>    孙文     华县   <span class="number">50</span>     <span class="number">169</span>     <span class="number">110</span></span><br><span class="line"><span class="number">16</span>    松飞     华县   <span class="number">57</span>     <span class="number">174</span>     <span class="number">116</span></span><br><span class="line"><span class="number">17</span>    水琳     阳县   <span class="number">36</span>     <span class="number">163</span>     <span class="number">142</span></span><br><span class="line"><span class="number">18</span>    简平    辽阳市   <span class="number">57</span>     <span class="number">181</span>     <span class="number">110</span></span><br><span class="line"><span class="number">19</span>    慕雪    海口市   <span class="number">22</span>     <span class="number">177</span>     <span class="number">150</span></span><br><span class="line"><span class="number">20</span>    籍凯     杰县   <span class="number">52</span>     <span class="number">175</span>     <span class="number">133</span></span><br><span class="line"><span class="number">21</span>    阎洋     敏县   <span class="number">46</span>     <span class="number">180</span>     <span class="number">107</span></span><br><span class="line"><span class="number">22</span>    良文    六安县   <span class="number">59</span>     <span class="number">169</span>     <span class="number">114</span></span><br><span class="line"><span class="number">23</span>   师金凤     宁市   <span class="number">20</span>     <span class="number">173</span>     <span class="number">149</span></span><br><span class="line"><span class="number">24</span>   马婷婷     晶县   <span class="number">40</span>     <span class="number">174</span>     <span class="number">145</span></span><br><span class="line"><span class="number">25</span>    红莉    昆明市   <span class="number">49</span>     <span class="number">175</span>     <span class="number">106</span></span><br><span class="line"><span class="number">26</span>   弘玉英    郑州县   <span class="number">54</span>     <span class="number">160</span>     <span class="number">117</span></span><br><span class="line"><span class="number">27</span>    包芳  呼和浩特县   <span class="number">22</span>     <span class="number">188</span>     <span class="number">136</span></span><br><span class="line"><span class="number">28</span>   茹秀兰    贵阳县   <span class="number">39</span>     <span class="number">168</span>     <span class="number">136</span></span><br><span class="line"><span class="number">29</span>    充英     红市   <span class="number">35</span>     <span class="number">189</span>     <span class="number">125</span></span><br><span class="line">..   ...    ...  ...     ...     ...</span><br><span class="line"><span class="number">470</span>  于雪梅     晨市   <span class="number">47</span>     <span class="number">189</span>     <span class="number">141</span></span><br><span class="line"><span class="number">471</span>   宇柳    沈阳县   <span class="number">24</span>     <span class="number">164</span>     <span class="number">140</span></span><br><span class="line"><span class="number">472</span>   孙宁   哈尔滨县   <span class="number">23</span>     <span class="number">180</span>     <span class="number">132</span></span><br><span class="line"><span class="number">473</span>   柯龙     鹏县   <span class="number">57</span>     <span class="number">171</span>     <span class="number">158</span></span><br><span class="line"><span class="number">474</span>  宰红霞    西安县   <span class="number">34</span>     <span class="number">183</span>     <span class="number">154</span></span><br><span class="line"><span class="number">475</span>  夏玉英    邯郸县   <span class="number">58</span>     <span class="number">176</span>     <span class="number">103</span></span><br><span class="line"><span class="number">476</span>   郎杰    合山市   <span class="number">50</span>     <span class="number">165</span>     <span class="number">112</span></span><br><span class="line"><span class="number">477</span>   蒯玉    南昌县   <span class="number">51</span>     <span class="number">167</span>     <span class="number">148</span></span><br><span class="line"><span class="number">478</span>   虞勇    合肥市   <span class="number">53</span>     <span class="number">160</span>     <span class="number">144</span></span><br><span class="line"><span class="number">479</span>   习雷     静市   <span class="number">40</span>     <span class="number">163</span>     <span class="number">132</span></span><br><span class="line"><span class="number">480</span>   邢建     超市   <span class="number">40</span>     <span class="number">182</span>     <span class="number">105</span></span><br><span class="line"><span class="number">481</span>   燕华    玉珍县   <span class="number">50</span>     <span class="number">161</span>     <span class="number">146</span></span><br><span class="line"><span class="number">482</span>   伯彬     凯市   <span class="number">47</span>     <span class="number">177</span>     <span class="number">129</span></span><br><span class="line"><span class="number">483</span>  尹婷婷    太原县   <span class="number">52</span>     <span class="number">168</span>     <span class="number">144</span></span><br><span class="line"><span class="number">484</span>  粱建军    北京县   <span class="number">55</span>     <span class="number">179</span>     <span class="number">134</span></span><br><span class="line"><span class="number">485</span>   后娜     飞县   <span class="number">21</span>     <span class="number">180</span>     <span class="number">148</span></span><br><span class="line"><span class="number">486</span>   西亮     英县   <span class="number">45</span>     <span class="number">173</span>     <span class="number">136</span></span><br><span class="line"><span class="number">487</span>  荆淑珍   兴安盟市   <span class="number">52</span>     <span class="number">188</span>     <span class="number">118</span></span><br><span class="line"><span class="number">488</span>  驷淑华    嘉禾市   <span class="number">57</span>     <span class="number">166</span>     <span class="number">133</span></span><br><span class="line"><span class="number">489</span>   孙萍    昆明县   <span class="number">57</span>     <span class="number">160</span>     <span class="number">103</span></span><br><span class="line"><span class="number">490</span>  邬秀兰    澳门市   <span class="number">45</span>     <span class="number">176</span>     <span class="number">135</span></span><br><span class="line"><span class="number">491</span>   璩林    淮安县   <span class="number">42</span>     <span class="number">166</span>     <span class="number">101</span></span><br><span class="line"><span class="number">492</span>   葛英    北京县   <span class="number">28</span>     <span class="number">183</span>     <span class="number">139</span></span><br><span class="line"><span class="number">493</span>   农瑞     健市   <span class="number">53</span>     <span class="number">171</span>     <span class="number">139</span></span><br><span class="line"><span class="number">494</span>   安雷    秀梅县   <span class="number">49</span>     <span class="number">184</span>     <span class="number">158</span></span><br><span class="line"><span class="number">495</span>   涂玲     兵县   <span class="number">24</span>     <span class="number">168</span>     <span class="number">124</span></span><br><span class="line"><span class="number">496</span>  于建平     洋市   <span class="number">30</span>     <span class="number">175</span>     <span class="number">137</span></span><br><span class="line"><span class="number">497</span>  彭凤英    桂花市   <span class="number">57</span>     <span class="number">170</span>     <span class="number">119</span></span><br><span class="line"><span class="number">498</span>   干阳     帅县   <span class="number">39</span>     <span class="number">173</span>     <span class="number">149</span></span><br><span class="line"><span class="number">499</span>   雷俊    柳州县   <span class="number">42</span>     <span class="number">175</span>     <span class="number">116</span></span><br><span class="line"></span><br><span class="line">[<span class="number">500</span> rows x <span class="number">5</span> columns]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: df.head(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">39</span>]:</span><br><span class="line">  name city  age  height  weight</span><br><span class="line"><span class="number">0</span>   危琳  兴城市   <span class="number">43</span>     <span class="number">164</span>     <span class="number">156</span></span><br><span class="line"><span class="number">1</span>  颛春梅  潜江县   <span class="number">29</span>     <span class="number">181</span>     <span class="number">114</span></span><br><span class="line"><span class="number">2</span>   韶璐  深圳县   <span class="number">25</span>     <span class="number">170</span>     <span class="number">149</span></span><br><span class="line"><span class="number">3</span>   父想  大冶县   <span class="number">50</span>     <span class="number">172</span>     <span class="number">138</span></span><br><span class="line"><span class="number">4</span>  逄建国   彬县   <span class="number">48</span>     <span class="number">169</span>     <span class="number">110</span></span><br></pre></td></tr></table></figure><ul><li>Series之间进行运算<ul><li>在Series中自动对齐不同索引的数据</li><li>如果索引不对应，则补NaN</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: s1 = pd.Series([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: s2 = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Series相加时，是将其索引值相同的进行相加</span></span><br><span class="line">In [<span class="number">42</span>]: s1 + s2</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">a    <span class="number">3.0</span></span><br><span class="line">b    <span class="number">7.0</span></span><br><span class="line">c    NaN</span><br><span class="line">d    NaN</span><br><span class="line">e    NaN</span><br><span class="line">f    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><ul><li>注意：想要保留所有的index，则需要使用<code>.add()</code>函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: s1.add(s2,fill_value=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">43</span>]:</span><br><span class="line">a    <span class="number">3.0</span></span><br><span class="line">b    <span class="number">7.0</span></span><br><span class="line">c    <span class="number">6.0</span></span><br><span class="line">d    <span class="number">8.0</span></span><br><span class="line">e    <span class="number">5.0</span></span><br><span class="line">f    <span class="number">7.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h2 id="2-DataFrame"><a href="#2-DataFrame" class="headerlink" title="2. DataFrame"></a>2. DataFrame</h2><ul><li>DataFrame是一个【表格型】的数据结构，可以看做是【由Series组成的字典】（共用同一索引）。DataFrame由按一定顺序排列的多列数据组成。设计初衷是将Series的使用场景从一维拓展到多维。DataFrame既有行索引，也有列索引。<ul><li>行索引：index</li><li>列索引：columns</li><li>值：values（numpy的二维数组）</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">101</span>]: df.head(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">101</span>]:</span><br><span class="line">  name city  age  height  weight</span><br><span class="line"><span class="number">0</span>   危琳  兴城市   <span class="number">43</span>     <span class="number">164</span>     <span class="number">156</span></span><br><span class="line"><span class="number">1</span>  颛春梅  潜江县   <span class="number">29</span>     <span class="number">181</span>     <span class="number">114</span></span><br><span class="line"><span class="number">2</span>   韶璐  深圳县   <span class="number">25</span>     <span class="number">170</span>     <span class="number">149</span></span><br><span class="line"><span class="number">3</span>   父想  大冶县   <span class="number">50</span>     <span class="number">172</span>     <span class="number">138</span></span><br><span class="line"><span class="number">4</span>  逄建国   彬县   <span class="number">48</span>     <span class="number">169</span>     <span class="number">110</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: display(df.index,df.columns,df.values,df.values.shape)</span><br><span class="line">Int64Index([  <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">4</span>,   <span class="number">5</span>,   <span class="number">6</span>,   <span class="number">7</span>,   <span class="number">8</span>,   <span class="number">9</span>,</span><br><span class="line">            ...</span><br><span class="line">            <span class="number">490</span>, <span class="number">491</span>, <span class="number">492</span>, <span class="number">493</span>, <span class="number">494</span>, <span class="number">495</span>, <span class="number">496</span>, <span class="number">497</span>, <span class="number">498</span>, <span class="number">499</span>],</span><br><span class="line">           dtype=<span class="string">'int64'</span>, length=<span class="number">500</span>)</span><br><span class="line">Index([<span class="string">'name'</span>, <span class="string">'city'</span>, <span class="string">'age'</span>, <span class="string">'height'</span>, <span class="string">'weight'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line">array([[<span class="string">'危琳'</span>, <span class="string">'兴城市'</span>, <span class="number">43</span>, <span class="number">164</span>, <span class="number">156</span>],</span><br><span class="line">       [<span class="string">'颛春梅'</span>, <span class="string">'潜江县'</span>, <span class="number">29</span>, <span class="number">181</span>, <span class="number">114</span>],</span><br><span class="line">       [<span class="string">'韶璐'</span>, <span class="string">'深圳县'</span>, <span class="number">25</span>, <span class="number">170</span>, <span class="number">149</span>],</span><br><span class="line">       ...,</span><br><span class="line">       [<span class="string">'彭凤英'</span>, <span class="string">'桂花市'</span>, <span class="number">57</span>, <span class="number">170</span>, <span class="number">119</span>],</span><br><span class="line">       [<span class="string">'干阳'</span>, <span class="string">'帅县'</span>, <span class="number">39</span>, <span class="number">173</span>, <span class="number">149</span>],</span><br><span class="line">       [<span class="string">'雷俊'</span>, <span class="string">'柳州县'</span>, <span class="number">42</span>, <span class="number">175</span>, <span class="number">116</span>]], dtype=object)</span><br><span class="line">(<span class="number">500</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="2-1-DataFrame的创建"><a href="#2-1-DataFrame的创建" class="headerlink" title="2.1 DataFrame的创建"></a>2.1 DataFrame的创建</h3><ul><li>最常用的方法是传递一个字典来创建。DataFrame以字典的键作为每一【列】的名称，以字典的值（一个数组）作为每一列。此外，DataFrame会自动加上每一行的索引（和Series一样）。</li><li>同Series一样，若传入的列与字典的键不匹配，则相应的值为NaN。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: df = pd.DataFrame(&#123;<span class="string">'name'</span>:[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>],</span><br><span class="line">    ...: <span class="string">'age'</span>: np.random.randint(<span class="number">20</span>,<span class="number">26</span>,size=<span class="number">4</span>),</span><br><span class="line">    ...: <span class="string">'sex'</span>:[<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'女'</span>,<span class="string">'男'</span>]&#125;,index= list(<span class="string">'ABCD'</span>),</span><br><span class="line">    ...: columns = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: df</span><br><span class="line">Out[<span class="number">49</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">25</span>   男</span><br><span class="line">B      lisi   <span class="number">20</span>   女</span><br><span class="line">C    wangwu   <span class="number">24</span>   女</span><br><span class="line">D   zhaoliu   <span class="number">25</span>   男</span><br></pre></td></tr></table></figure><ul><li>DataFrame的属性：values、columns、index、shape</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">50</span>]: df.shape</span><br><span class="line">Out[<span class="number">50</span>]: (<span class="number">4</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#练习</span><br><span class="line">根据以下考试成绩表，创建一个DataFrame,命名为df：</span><br><span class="line">      张三  李四</span><br><span class="line">语文   150   0</span><br><span class="line">数学   150   0</span><br><span class="line">英语   150   0</span><br><span class="line">理综   300   0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">51</span>]: df = pd.DataFrame(&#123;<span class="string">'张三'</span>:[<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">300</span>],<span class="string">'李四'</span>:[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]&#125;,index=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,</span><br><span class="line">    ...: <span class="string">'理综'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: df</span><br><span class="line">Out[<span class="number">52</span>]:</span><br><span class="line">     张三  李四</span><br><span class="line">语文  <span class="number">150</span>   <span class="number">0</span></span><br><span class="line">数学  <span class="number">150</span>   <span class="number">0</span></span><br><span class="line">英语  <span class="number">150</span>   <span class="number">0</span></span><br><span class="line">理综  <span class="number">300</span>   <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-2-DataFrame的索引"><a href="#2-2-DataFrame的索引" class="headerlink" title="2.2 DataFrame的索引"></a>2.2 DataFrame的索引</h3><ul><li>1.对列进行索引<ul><li>通过类似字典的方式</li><li>通过属性的方式</li></ul></li><li>可以将DataFrame的列获取为一个Series。返回的Series拥有原DataFrame相同的索引，且name属性也已经设置好了，就是相应的列名。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">53</span>]: df = pd.DataFrame(&#123;<span class="string">'name'</span>:[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>],</span><br><span class="line">    ...:                    <span class="string">'age'</span>: np.random.randint(<span class="number">20</span>,<span class="number">26</span>,size=<span class="number">4</span>),</span><br><span class="line">    ...:                    <span class="string">'sex'</span>:[<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'女'</span>,<span class="string">'男'</span>]&#125;,index= list(<span class="string">'ABCD'</span>),</span><br><span class="line">    ...:                   columns = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: df</span><br><span class="line">Out[<span class="number">54</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">20</span>   男</span><br><span class="line">B      lisi   <span class="number">25</span>   女</span><br><span class="line">C    wangwu   <span class="number">22</span>   女</span><br><span class="line">D   zhaoliu   <span class="number">21</span>   男</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#t通过字典的方式对列进行索引，返回一个Series</span></span><br><span class="line">In [<span class="number">55</span>]: name = df[<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: display(type(name),name)</span><br><span class="line">pandas.core.series.Series</span><br><span class="line">A    zhangsan</span><br><span class="line">B        lisi</span><br><span class="line">C      wangwu</span><br><span class="line">D     zhaoliu</span><br><span class="line">Name: name, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过属性的方式对列进行索引,返回一个Series</span></span><br><span class="line">In [<span class="number">57</span>]: age = df.age</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: display(type(age),age)</span><br><span class="line">pandas.core.series.Series</span><br><span class="line">A    <span class="number">20</span></span><br><span class="line">B    <span class="number">25</span></span><br><span class="line">C    <span class="number">22</span></span><br><span class="line">D    <span class="number">21</span></span><br><span class="line">Name: age, dtype: int32</span><br></pre></td></tr></table></figure><ul><li>2.对行进行索引<ul><li>使用<code>.ix[]</code>来进行行索引</li><li>使用<code>.loc[]</code>加index来进行行索引</li><li>使用<code>.iloc[]</code>加整数来进行行索引</li></ul></li><li>同样返回一个Series，index为原来的columns。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对行的检索，返回值还是Series</span></span><br><span class="line">In [<span class="number">59</span>]: df.loc[<span class="string">'A'</span>]</span><br><span class="line">Out[<span class="number">59</span>]:</span><br><span class="line">name    zhangsan</span><br><span class="line">age           <span class="number">20</span></span><br><span class="line">sex            男</span><br><span class="line">Name: A, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检索多行返回的数据是DataFrame</span></span><br><span class="line">In [<span class="number">61</span>]: df.loc[[<span class="string">'A'</span>,<span class="string">'B'</span>]]</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">20</span>   男</span><br><span class="line">B      lisi   <span class="number">25</span>   女</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对行进行切片索引</span></span><br><span class="line">In [<span class="number">62</span>]: df.loc[<span class="string">'A'</span>:<span class="string">'C'</span>]</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">20</span>   男</span><br><span class="line">B      lisi   <span class="number">25</span>   女</span><br><span class="line">C    wangwu   <span class="number">22</span>   女</span><br></pre></td></tr></table></figure><ul><li>3.对元素索引的方法<ul><li>使用列索引</li><li>使用行索引（iloc[3,1]相当于两个参数；iloc[[3,3]]里面的[3,3]看做一个参数）</li><li>使用values属性（二维numpy数组）</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用列索引</span></span><br><span class="line">In [<span class="number">63</span>]: df[<span class="string">'name'</span>][<span class="string">'B'</span>]</span><br><span class="line">Out[<span class="number">63</span>]: <span class="string">'lisi'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用行索引</span></span><br><span class="line">In [<span class="number">64</span>]: df.loc[<span class="string">'C'</span>][<span class="string">'age'</span>]</span><br><span class="line">Out[<span class="number">64</span>]: <span class="number">22</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: df.iloc[<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">65</span>]: <span class="string">'zhaoliu'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: df.values[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">66</span>]: <span class="number">20</span></span><br></pre></td></tr></table></figure><p>【注意】直接使用中括号时：</p><ul><li>索引表示的是列索引</li><li>切片表示的是行切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: df[<span class="string">'name'</span>]</span><br><span class="line">Out[<span class="number">67</span>]:</span><br><span class="line">A    zhangsan</span><br><span class="line">B        lisi</span><br><span class="line">C      wangwu</span><br><span class="line">D     zhaoliu</span><br><span class="line">Name: name, dtype: object</span><br><span class="line"></span><br><span class="line"><span class="comment">#对列使用切片，只显示列名</span></span><br><span class="line">In [<span class="number">68</span>]: df[<span class="string">'name'</span>:<span class="string">'sex'</span>]</span><br><span class="line">Out[<span class="number">68</span>]:</span><br><span class="line">Empty DataFrame</span><br><span class="line">Columns: [name, age, sex]</span><br><span class="line">Index: []</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: df[<span class="string">'A'</span>:<span class="string">'C'</span>]</span><br><span class="line">Out[<span class="number">69</span>]:</span><br><span class="line">       name  age sex</span><br><span class="line">A  zhangsan   <span class="number">20</span>   男</span><br><span class="line">B      lisi   <span class="number">25</span>   女</span><br><span class="line">C    wangwu   <span class="number">22</span>   女</span><br></pre></td></tr></table></figure><h2 id="3-DataFrame的运算"><a href="#3-DataFrame的运算" class="headerlink" title="3. DataFrame的运算"></a>3. DataFrame的运算</h2><h3 id="3-1-DataFrame之间的运算"><a href="#3-1-DataFrame之间的运算" class="headerlink" title="3.1 DataFrame之间的运算"></a>3.1 DataFrame之间的运算</h3><ul><li>同Series一样：<ul><li>在运算中自动对齐不同索引的数据</li><li>如果索引不对应，则补NaN</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建DataFrame df1 不同人员的各科目成绩，月考一</span></span><br><span class="line">In [<span class="number">70</span>]: df1 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">4</span>,<span class="number">4</span>)),</span><br><span class="line">    ...:                    index=[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>],</span><br><span class="line">    ...:                    columns=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,<span class="string">'理综'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: df1</span><br><span class="line">Out[<span class="number">71</span>]:</span><br><span class="line">           语文   数学  英语   理综</span><br><span class="line">zhangsan  <span class="number">138</span>  <span class="number">101</span>  <span class="number">26</span>  <span class="number">146</span></span><br><span class="line">lisi       <span class="number">39</span>   <span class="number">45</span>  <span class="number">26</span>   <span class="number">59</span></span><br><span class="line">wangwu    <span class="number">143</span>   <span class="number">75</span>  <span class="number">10</span>   <span class="number">98</span></span><br><span class="line">zhaoliu   <span class="number">117</span>    <span class="number">7</span>  <span class="number">19</span>    <span class="number">8</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建DataFrame df2 不同人员的各科目成绩，月考二</span></span><br><span class="line"><span class="comment">#有新生转入</span></span><br><span class="line">In [<span class="number">72</span>]: df2 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">4</span>)),</span><br><span class="line">    ...:                    index=[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>,<span class="string">'tianqi'</span>],</span><br><span class="line">    ...:                    columns=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,<span class="string">'理综'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: df2</span><br><span class="line">Out[<span class="number">73</span>]:</span><br><span class="line">           语文   数学   英语   理综</span><br><span class="line">zhangsan   <span class="number">51</span>   <span class="number">16</span>    <span class="number">3</span>  <span class="number">147</span></span><br><span class="line">lisi       <span class="number">19</span>   <span class="number">22</span>   <span class="number">70</span>   <span class="number">85</span></span><br><span class="line">wangwu     <span class="number">83</span>  <span class="number">106</span>   <span class="number">79</span>  <span class="number">101</span></span><br><span class="line">zhaoliu   <span class="number">132</span>    <span class="number">9</span>  <span class="number">135</span>   <span class="number">29</span></span><br><span class="line">tianqi    <span class="number">106</span>  <span class="number">120</span>    <span class="number">2</span>   <span class="number">89</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: df1 + df2</span><br><span class="line">Out[<span class="number">75</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi       <span class="number">58.0</span>   <span class="number">67.0</span>   <span class="number">96.0</span>  <span class="number">144.0</span></span><br><span class="line">tianqi      NaN    NaN    NaN    NaN</span><br><span class="line">wangwu    <span class="number">226.0</span>  <span class="number">181.0</span>   <span class="number">89.0</span>  <span class="number">199.0</span></span><br><span class="line">zhangsan  <span class="number">189.0</span>  <span class="number">117.0</span>   <span class="number">29.0</span>  <span class="number">293.0</span></span><br><span class="line">zhaoliu   <span class="number">249.0</span>   <span class="number">16.0</span>  <span class="number">154.0</span>   <span class="number">37.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: df3 = df1.add(df2,fill_value=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: df3</span><br><span class="line">Out[<span class="number">77</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi       <span class="number">58.0</span>   <span class="number">67.0</span>   <span class="number">96.0</span>  <span class="number">144.0</span></span><br><span class="line">tianqi    <span class="number">106.0</span>  <span class="number">120.0</span>    <span class="number">2.0</span>   <span class="number">89.0</span></span><br><span class="line">wangwu    <span class="number">226.0</span>  <span class="number">181.0</span>   <span class="number">89.0</span>  <span class="number">199.0</span></span><br><span class="line">zhangsan  <span class="number">189.0</span>  <span class="number">117.0</span>   <span class="number">29.0</span>  <span class="number">293.0</span></span><br><span class="line">zhaoliu   <span class="number">249.0</span>   <span class="number">16.0</span>  <span class="number">154.0</span>   <span class="number">37.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">78</span>]: df4 = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">3</span>)),</span><br><span class="line">    ...:                    index=[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>,<span class="string">'tianqi'</span>],</span><br><span class="line">    ...:                    columns=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: df4</span><br><span class="line">Out[<span class="number">79</span>]:</span><br><span class="line">           语文   数学  英语</span><br><span class="line">zhangsan   <span class="number">33</span>  <span class="number">134</span>  <span class="number">71</span></span><br><span class="line">lisi      <span class="number">144</span>    <span class="number">0</span>  <span class="number">28</span></span><br><span class="line">wangwu     <span class="number">15</span>  <span class="number">140</span>  <span class="number">72</span></span><br><span class="line">zhaoliu     <span class="number">5</span>  <span class="number">140</span>  <span class="number">20</span></span><br><span class="line">tianqi     <span class="number">46</span>   <span class="number">36</span>  <span class="number">40</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: df1.add(df4)</span><br><span class="line">Out[<span class="number">80</span>]:</span><br><span class="line">             数学  理综    英语     语文</span><br><span class="line">lisi       <span class="number">45.0</span> NaN  <span class="number">54.0</span>  <span class="number">183.0</span></span><br><span class="line">tianqi      NaN NaN   NaN    NaN</span><br><span class="line">wangwu    <span class="number">215.0</span> NaN  <span class="number">82.0</span>  <span class="number">158.0</span></span><br><span class="line">zhangsan  <span class="number">235.0</span> NaN  <span class="number">97.0</span>  <span class="number">171.0</span></span><br><span class="line">zhaoliu   <span class="number">147.0</span> NaN  <span class="number">39.0</span>  <span class="number">122.0</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Series与DataFrame之间的运算"><a href="#3-2-Series与DataFrame之间的运算" class="headerlink" title="3.2 Series与DataFrame之间的运算"></a>3.2 Series与DataFrame之间的运算</h3><ul><li>使用Python操作符：以行位单位操作（参数必须是行），对所有行都有效。（类似与numpy中二维数组与一维数组的运算，但可能出现NaN）</li><li>使用pandas操作函数：<ul><li>axis=0：以列为单位操作（参数必须是列），对所有列都有效。</li><li>axis=1：以行位单位操作（参数必须是行），对所有行都有效。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">81</span>]: s1 = df3[<span class="string">'语文'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: s1</span><br><span class="line">Out[<span class="number">82</span>]:</span><br><span class="line">lisi         <span class="number">58.0</span></span><br><span class="line">tianqi      <span class="number">106.0</span></span><br><span class="line">wangwu      <span class="number">226.0</span></span><br><span class="line">zhangsan    <span class="number">189.0</span></span><br><span class="line">zhaoliu     <span class="number">249.0</span></span><br><span class="line">Name: 语文, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">83</span>]: df3 + s1</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">          lisi  tianqi  wangwu  zhangsan  zhaoliu  数学  理综  英语  语文</span><br><span class="line">lisi       NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br><span class="line">tianqi     NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br><span class="line">wangwu     NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br><span class="line">zhangsan   NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br><span class="line">zhaoliu    NaN     NaN     NaN       NaN      NaN NaN NaN NaN NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: display(df3.columns,s1.index)</span><br><span class="line">Index([<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'理综'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line">Index([<span class="string">'lisi'</span>, <span class="string">'tianqi'</span>, <span class="string">'wangwu'</span>, <span class="string">'zhangsan'</span>, <span class="string">'zhaoliu'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">85</span>]: s2 = df3.loc[<span class="string">'lisi'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: s2</span><br><span class="line">Out[<span class="number">86</span>]:</span><br><span class="line">语文     <span class="number">58.0</span></span><br><span class="line">数学     <span class="number">67.0</span></span><br><span class="line">英语     <span class="number">96.0</span></span><br><span class="line">理综    <span class="number">144.0</span></span><br><span class="line">Name: lisi, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">87</span>]: df3 + s2</span><br><span class="line">Out[<span class="number">87</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi      <span class="number">116.0</span>  <span class="number">134.0</span>  <span class="number">192.0</span>  <span class="number">288.0</span></span><br><span class="line">tianqi    <span class="number">164.0</span>  <span class="number">187.0</span>   <span class="number">98.0</span>  <span class="number">233.0</span></span><br><span class="line">wangwu    <span class="number">284.0</span>  <span class="number">248.0</span>  <span class="number">185.0</span>  <span class="number">343.0</span></span><br><span class="line">zhangsan  <span class="number">247.0</span>  <span class="number">184.0</span>  <span class="number">125.0</span>  <span class="number">437.0</span></span><br><span class="line">zhaoliu   <span class="number">307.0</span>   <span class="number">83.0</span>  <span class="number">250.0</span>  <span class="number">181.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">88</span>]: display(df3.columns,s2.index)</span><br><span class="line">Index([<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'理综'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line">Index([<span class="string">'语文'</span>, <span class="string">'数学'</span>, <span class="string">'英语'</span>, <span class="string">'理综'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axis=<span class="number">0</span>：以列为单位操作（参数必须是列），对所有列都有效。</span><br><span class="line">axis=<span class="number">1</span>：以行位单位操作（参数必须是行），对所有行都有效。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">89</span>]: ss = df3.语文</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: display(df3,ss)</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi       <span class="number">58.0</span>   <span class="number">67.0</span>   <span class="number">96.0</span>  <span class="number">144.0</span></span><br><span class="line">tianqi    <span class="number">106.0</span>  <span class="number">120.0</span>    <span class="number">2.0</span>   <span class="number">89.0</span></span><br><span class="line">wangwu    <span class="number">226.0</span>  <span class="number">181.0</span>   <span class="number">89.0</span>  <span class="number">199.0</span></span><br><span class="line">zhangsan  <span class="number">189.0</span>  <span class="number">117.0</span>   <span class="number">29.0</span>  <span class="number">293.0</span></span><br><span class="line">zhaoliu   <span class="number">249.0</span>   <span class="number">16.0</span>  <span class="number">154.0</span>   <span class="number">37.0</span></span><br><span class="line">lisi         <span class="number">58.0</span></span><br><span class="line">tianqi      <span class="number">106.0</span></span><br><span class="line">wangwu      <span class="number">226.0</span></span><br><span class="line">zhangsan    <span class="number">189.0</span></span><br><span class="line">zhaoliu     <span class="number">249.0</span></span><br><span class="line">Name: 语文, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index/0代表行索引</span></span><br><span class="line">In [<span class="number">91</span>]: n1 = df3.add(ss,axis=<span class="string">'index'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: n2 = df3.add(ss,axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: n2</span><br><span class="line">Out[<span class="number">93</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi      <span class="number">116.0</span>  <span class="number">125.0</span>  <span class="number">154.0</span>  <span class="number">202.0</span></span><br><span class="line">tianqi    <span class="number">212.0</span>  <span class="number">226.0</span>  <span class="number">108.0</span>  <span class="number">195.0</span></span><br><span class="line">wangwu    <span class="number">452.0</span>  <span class="number">407.0</span>  <span class="number">315.0</span>  <span class="number">425.0</span></span><br><span class="line">zhangsan  <span class="number">378.0</span>  <span class="number">306.0</span>  <span class="number">218.0</span>  <span class="number">482.0</span></span><br><span class="line">zhaoliu   <span class="number">498.0</span>  <span class="number">265.0</span>  <span class="number">403.0</span>  <span class="number">286.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">94</span>]: ss1 = df3.loc[<span class="string">'zhangsan'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: display(df3,ss1)</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi       <span class="number">58.0</span>   <span class="number">67.0</span>   <span class="number">96.0</span>  <span class="number">144.0</span></span><br><span class="line">tianqi    <span class="number">106.0</span>  <span class="number">120.0</span>    <span class="number">2.0</span>   <span class="number">89.0</span></span><br><span class="line">wangwu    <span class="number">226.0</span>  <span class="number">181.0</span>   <span class="number">89.0</span>  <span class="number">199.0</span></span><br><span class="line">zhangsan  <span class="number">189.0</span>  <span class="number">117.0</span>   <span class="number">29.0</span>  <span class="number">293.0</span></span><br><span class="line">zhaoliu   <span class="number">249.0</span>   <span class="number">16.0</span>  <span class="number">154.0</span>   <span class="number">37.0</span></span><br><span class="line">语文    <span class="number">189.0</span></span><br><span class="line">数学    <span class="number">117.0</span></span><br><span class="line">英语     <span class="number">29.0</span></span><br><span class="line">理综    <span class="number">293.0</span></span><br><span class="line">Name: zhangsan, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">96</span>]: n3 = df3.add(ss1,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: n3</span><br><span class="line">Out[<span class="number">97</span>]:</span><br><span class="line">             语文     数学     英语     理综</span><br><span class="line">lisi      <span class="number">247.0</span>  <span class="number">184.0</span>  <span class="number">125.0</span>  <span class="number">437.0</span></span><br><span class="line">tianqi    <span class="number">295.0</span>  <span class="number">237.0</span>   <span class="number">31.0</span>  <span class="number">382.0</span></span><br><span class="line">wangwu    <span class="number">415.0</span>  <span class="number">298.0</span>  <span class="number">118.0</span>  <span class="number">492.0</span></span><br><span class="line">zhangsan  <span class="number">378.0</span>  <span class="number">234.0</span>   <span class="number">58.0</span>  <span class="number">586.0</span></span><br><span class="line">zhaoliu   <span class="number">438.0</span>  <span class="number">133.0</span>  <span class="number">183.0</span>  <span class="number">330.0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Numpy基本用法</title>
      <link href="/Python/2018/10/26/Numpy%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/Python/2018/10/26/Numpy%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Numpy基本用法"><a href="#一、Numpy基本用法" class="headerlink" title="一、Numpy基本用法"></a>一、Numpy基本用法</h1><p><code>NumPy是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。Numpy内部解除了Python的PIL(全局解释器锁),运算效率极好,是大量机器学习框架的基础库!</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入numpy库，并查看numpy库版本</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: np.__version__</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'1.14.3'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用numpy+matplotlib处理图片</span></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: cat = plt.imread(<span class="string">'D:\myProject\Python\Jupyter\image\cat.jpg'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: type(cat)</span><br><span class="line">Out[<span class="number">9</span>]: numpy.ndarray</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: cat1 = cat <span class="number">-50</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#图片是一个三维数组，长、宽、颜色</span></span><br><span class="line">In [<span class="number">11</span>]: cat.shape</span><br><span class="line">Out[<span class="number">11</span>]: (<span class="number">333</span>, <span class="number">500</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: plt.imshow(cat1)</span><br><span class="line">Out[<span class="number">12</span>]: &lt;matplotlib.image.AxesImage at <span class="number">0x222924b0320</span>&gt;</span><br><span class="line">In [<span class="number">13</span>]: plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/cat1.png" alt=""></p><h1 id="二、Numpy创建数组"><a href="#二、Numpy创建数组" class="headerlink" title="二、Numpy创建数组"></a>二、Numpy创建数组</h1><h2 id="1-使用np-array-由python-list创建"><a href="#1-使用np-array-由python-list创建" class="headerlink" title="1.使用np.array()由python list创建"></a>1.使用np.array()由python list创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#创建列表</span></span><br><span class="line">In [<span class="number">15</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">#将列表转换为数组</span></span><br><span class="line">In [<span class="number">16</span>]: b = np.array(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: b</span><br><span class="line">Out[<span class="number">17</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="2-使用np的routines函数创建"><a href="#2-使用np的routines函数创建" class="headerlink" title="2.使用np的routines函数创建"></a>2.使用np的routines函数创建</h2><h3 id="2-1-np-ones"><a href="#2-1-np-ones" class="headerlink" title="2.1 np.ones()"></a>2.1 np.ones()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、np.ones(shape, dtype=None, order='C')</span></span><br><span class="line">In [<span class="number">18</span>]: np.ones(shape = (<span class="number">10</span>,<span class="number">8</span>),dtype= int)</span><br><span class="line">Out[<span class="number">18</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: ones = np.ones(shape=(<span class="number">100</span>,<span class="number">90</span>,<span class="number">4</span>),dtype=int)</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: plt.imshow(ones)</span><br><span class="line">    ...: plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_13_0.png" alt=""></p><h3 id="2-2-zeros"><a href="#2-2-zeros" class="headerlink" title="2.2 zeros()"></a>2.2 zeros()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、zeros(shape, dtype=float, order='C')</span></span><br><span class="line">In [<span class="number">21</span>]: np.zeros((<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-3-np-full"><a href="#2-3-np-full" class="headerlink" title="2.3 np.full()"></a>2.3 np.full()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、 np.full(shape, fill_value, dtype=None, order='C')</span></span><br><span class="line">In [<span class="number">22</span>]: np.full((<span class="number">10</span>,<span class="number">10</span>),fill_value=<span class="number">20</span>)</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">array([[<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-4-np-eye"><a href="#2-4-np-eye" class="headerlink" title="2.4 np.eye()"></a>2.4 np.eye()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4、np.eye(N, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C')</span></span><br><span class="line"><span class="comment">#对角线位1，其他位置位0</span></span><br><span class="line">In [<span class="number">23</span>]: np.eye(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-5-np-linspace"><a href="#2-5-np-linspace" class="headerlink" title="2.5 np.linspace()"></a>2.5 np.linspace()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5、np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class="line"><span class="comment">#lin = linear 线性</span></span><br><span class="line">In [<span class="number">24</span>]: np.linspace(<span class="number">1</span>,<span class="number">100</span>,<span class="number">20</span>)</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">array([  <span class="number">1.</span>        ,   <span class="number">6.21052632</span>,  <span class="number">11.42105263</span>,  <span class="number">16.63157895</span>,</span><br><span class="line">        <span class="number">21.84210526</span>,  <span class="number">27.05263158</span>,  <span class="number">32.26315789</span>,  <span class="number">37.47368421</span>,</span><br><span class="line">        <span class="number">42.68421053</span>,  <span class="number">47.89473684</span>,  <span class="number">53.10526316</span>,  <span class="number">58.31578947</span>,</span><br><span class="line">        <span class="number">63.52631579</span>,  <span class="number">68.73684211</span>,  <span class="number">73.94736842</span>,  <span class="number">79.15789474</span>,</span><br><span class="line">        <span class="number">84.36842105</span>,  <span class="number">89.57894737</span>,  <span class="number">94.78947368</span>, <span class="number">100.</span>        ])</span><br></pre></td></tr></table></figure><h3 id="2-6-arange"><a href="#2-6-arange" class="headerlink" title="2.6 arange()"></a>2.6 arange()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6、arange([start,] stop[, step,], dtype=None)</span></span><br><span class="line">In [<span class="number">25</span>]: np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">25</span>]: array([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure><h3 id="2-7-randint"><a href="#2-7-randint" class="headerlink" title="2.7 randint()"></a>2.7 randint()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7、randint(low, high=None, size=None, dtype='l')</span></span><br><span class="line">In [<span class="number">26</span>]: np.random.randint(<span class="number">0</span>,<span class="number">10</span>,size = <span class="number">10</span>)</span><br><span class="line">Out[<span class="number">26</span>]: array([<span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>])</span><br></pre></td></tr></table></figure><h3 id="2-8-randn-正太分布"><a href="#2-8-randn-正太分布" class="headerlink" title="2.8 randn()  正太分布"></a>2.8 randn()  正太分布</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8、randn(d0, d1, ..., dn)  正太分布</span></span><br><span class="line">In [<span class="number">27</span>]: np.random.randn(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">array([[ <span class="number">1.05035386</span>,  <span class="number">0.77231903</span>, <span class="number">-0.33446991</span>, <span class="number">-0.54562315</span>, <span class="number">-0.84341866</span>],</span><br><span class="line">       [ <span class="number">0.6616944</span> ,  <span class="number">0.89325969</span>, <span class="number">-0.89042489</span>,  <span class="number">1.61227272</span>, <span class="number">-0.05136764</span>],</span><br><span class="line">       [<span class="number">-0.5346068</span> , <span class="number">-2.39236557</span>, <span class="number">-0.54563468</span>, <span class="number">-1.07850467</span>,  <span class="number">0.56603284</span>],</span><br><span class="line">       [<span class="number">-0.33361988</span>,  <span class="number">1.11445864</span>, <span class="number">-0.11636709</span>,  <span class="number">0.57361067</span>,  <span class="number">0.80099792</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-9-normal-正太分布"><a href="#2-9-normal-正太分布" class="headerlink" title="2.9 normal() 正太分布"></a>2.9 normal() 正太分布</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9、normal(loc=0.0, scale=1.0, size=None) 正太分布</span></span><br><span class="line">In [<span class="number">28</span>]: np.random.normal(loc=<span class="number">170</span>,scale=<span class="number">1</span>,size=<span class="number">20</span>)</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">array([<span class="number">168.56872023</span>, <span class="number">168.30641964</span>, <span class="number">169.98891802</span>, <span class="number">168.6781631</span> ,</span><br><span class="line">       <span class="number">169.63611345</span>, <span class="number">167.81502056</span>, <span class="number">169.69833366</span>, <span class="number">169.05166886</span>,</span><br><span class="line">       <span class="number">170.96688262</span>, <span class="number">168.30677654</span>, <span class="number">170.15970816</span>, <span class="number">169.59783795</span>,</span><br><span class="line">       <span class="number">170.77979873</span>, <span class="number">170.20138558</span>, <span class="number">169.75464312</span>, <span class="number">172.16309013</span>,</span><br><span class="line">       <span class="number">169.37900208</span>, <span class="number">171.23951841</span>, <span class="number">169.7903996</span> , <span class="number">168.62081606</span>])</span><br></pre></td></tr></table></figure><h3 id="2-10-random-sample-生成0到1的随机数"><a href="#2-10-random-sample-生成0到1的随机数" class="headerlink" title="2.10 random_sample() 生成0到1的随机数"></a>2.10 random_sample() 生成0到1的随机数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10、random_sample(size=None) 生成0到1的随机数</span></span><br><span class="line"><span class="comment">#np.random.random(size=20)</span></span><br><span class="line">In [<span class="number">29</span>]: r = np.random.random(size=(<span class="number">200</span>,<span class="number">100</span>,<span class="number">4</span>)) <span class="comment">#生成一张图片</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: plt.imshow(r)</span><br><span class="line">Out[<span class="number">30</span>]: &lt;matplotlib.image.AxesImage at <span class="number">0x22293b60dd8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_23_0.png" alt=""></p><h1 id="三、Numpy查看数组属性"><a href="#三、Numpy查看数组属性" class="headerlink" title="三、Numpy查看数组属性"></a>三、Numpy查看数组属性</h1><h2 id="1-数组元素个数"><a href="#1-数组元素个数" class="headerlink" title="1.数组元素个数"></a>1.数组元素个数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: b</span><br><span class="line">Out[<span class="number">33</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: b.size</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="2-数组形状"><a href="#2-数组形状" class="headerlink" title="2.数组形状"></a>2.数组形状</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: b.shape</span><br><span class="line">Out[<span class="number">35</span>]: (<span class="number">5</span>,)</span><br></pre></td></tr></table></figure><h2 id="3-数组维度"><a href="#3-数组维度" class="headerlink" title="3.数组维度"></a>3.数组维度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: b.ndim</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-数组元素类型"><a href="#4-数组元素类型" class="headerlink" title="4.数组元素类型"></a>4.数组元素类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: b.dtype</span><br><span class="line">Out[<span class="number">37</span>]: dtype(<span class="string">'int32'</span>)</span><br></pre></td></tr></table></figure><h1 id="四、数组的基本操作"><a href="#四、数组的基本操作" class="headerlink" title="四、数组的基本操作"></a>四、数组的基本操作</h1><h2 id="1-索引"><a href="#1-索引" class="headerlink" title="1.索引"></a>1.索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: array1 = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,(<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: array1</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line">array([[<span class="number">85</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">92</span>],</span><br><span class="line">       [<span class="number">42</span>, <span class="number">49</span>, <span class="number">76</span>, <span class="number">85</span>],</span><br><span class="line">       [<span class="number">42</span>,  <span class="number">1</span>, <span class="number">80</span>, <span class="number">99</span>],</span><br><span class="line">       [<span class="number">33</span>, <span class="number">91</span>, <span class="number">74</span>, <span class="number">95</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: array1[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">41</span>]: <span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="2-切片"><a href="#2-切片" class="headerlink" title="2.切片"></a>2.切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切片时，左闭右开</span></span><br><span class="line">In [<span class="number">42</span>]: array1[<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">array([[<span class="number">76</span>, <span class="number">85</span>],</span><br><span class="line">       [<span class="number">80</span>, <span class="number">99</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: array2 = np.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: array2</span><br><span class="line">Out[<span class="number">44</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将数组反转</span></span><br><span class="line">In [<span class="number">45</span>]: array2[::<span class="number">-1</span>]</span><br><span class="line">Out[<span class="number">45</span>]: array([<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过两个：：进行切片</span></span><br><span class="line">In [<span class="number">46</span>]: print(array2[::<span class="number">2</span>])</span><br><span class="line">[<span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: print(array2[::<span class="number">-2</span>])</span><br><span class="line">[<span class="number">9</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="3-变形"><a href="#3-变形" class="headerlink" title="3.变形"></a>3.变形</h2><ul><li>使用reshape函数，注意参数用tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: n = np.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: n</span><br><span class="line">Out[<span class="number">50</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: n.shape</span><br><span class="line">Out[<span class="number">51</span>]: (<span class="number">10</span>,)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用reshape函数进行变形</span></span><br><span class="line">In [<span class="number">52</span>]: n.reshape((<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line">Out[<span class="number">52</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: n1 = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: n1</span><br><span class="line">Out[<span class="number">54</span>]:</span><br><span class="line">array([[[<span class="number">48</span>,  <span class="number">8</span>,  <span class="number">2</span>, <span class="number">35</span>, <span class="number">65</span>],</span><br><span class="line">        [<span class="number">81</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">76</span>],</span><br><span class="line">        [<span class="number">94</span>, <span class="number">65</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">78</span>],</span><br><span class="line">        [<span class="number">48</span>, <span class="number">57</span>,  <span class="number">7</span>,  <span class="number">3</span>, <span class="number">63</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">56</span>, <span class="number">27</span>,  <span class="number">4</span>, <span class="number">21</span>, <span class="number">28</span>],</span><br><span class="line">        [<span class="number">92</span>, <span class="number">10</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">82</span>],</span><br><span class="line">        [<span class="number">88</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">76</span>, <span class="number">99</span>],</span><br><span class="line">        [<span class="number">49</span>,  <span class="number">6</span>, <span class="number">39</span>, <span class="number">21</span>, <span class="number">50</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">84</span>, <span class="number">87</span>, <span class="number">65</span>, <span class="number">15</span>, <span class="number">52</span>],</span><br><span class="line">        [<span class="number">94</span>, <span class="number">44</span>, <span class="number">40</span>,  <span class="number">2</span>, <span class="number">94</span>],</span><br><span class="line">        [ <span class="number">7</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">18</span>, <span class="number">94</span>],</span><br><span class="line">        [<span class="number">94</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">54</span>,  <span class="number">6</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: n1.shape</span><br><span class="line">Out[<span class="number">55</span>]: (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: n1.reshape(<span class="number">3</span>*<span class="number">4</span>*<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">56</span>]:</span><br><span class="line">array([<span class="number">48</span>,  <span class="number">8</span>,  <span class="number">2</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">76</span>, <span class="number">94</span>, <span class="number">65</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">78</span>, <span class="number">48</span>, <span class="number">57</span>,</span><br><span class="line">        <span class="number">7</span>,  <span class="number">3</span>, <span class="number">63</span>, <span class="number">56</span>, <span class="number">27</span>,  <span class="number">4</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">92</span>, <span class="number">10</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">82</span>, <span class="number">88</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">76</span>,</span><br><span class="line">       <span class="number">99</span>, <span class="number">49</span>,  <span class="number">6</span>, <span class="number">39</span>, <span class="number">21</span>, <span class="number">50</span>, <span class="number">84</span>, <span class="number">87</span>, <span class="number">65</span>, <span class="number">15</span>, <span class="number">52</span>, <span class="number">94</span>, <span class="number">44</span>, <span class="number">40</span>,  <span class="number">2</span>, <span class="number">94</span>,  <span class="number">7</span>,</span><br><span class="line">       <span class="number">90</span>, <span class="number">78</span>, <span class="number">18</span>, <span class="number">94</span>, <span class="number">94</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">54</span>,  <span class="number">6</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用负数直接转换成一维数组</span></span><br><span class="line">In [<span class="number">57</span>]: n1.reshape(<span class="number">-1</span>)</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line">array([<span class="number">48</span>,  <span class="number">8</span>,  <span class="number">2</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">76</span>, <span class="number">94</span>, <span class="number">65</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">78</span>, <span class="number">48</span>, <span class="number">57</span>,</span><br><span class="line">        <span class="number">7</span>,  <span class="number">3</span>, <span class="number">63</span>, <span class="number">56</span>, <span class="number">27</span>,  <span class="number">4</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">92</span>, <span class="number">10</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">82</span>, <span class="number">88</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">76</span>,</span><br><span class="line">       <span class="number">99</span>, <span class="number">49</span>,  <span class="number">6</span>, <span class="number">39</span>, <span class="number">21</span>, <span class="number">50</span>, <span class="number">84</span>, <span class="number">87</span>, <span class="number">65</span>, <span class="number">15</span>, <span class="number">52</span>, <span class="number">94</span>, <span class="number">44</span>, <span class="number">40</span>,  <span class="number">2</span>, <span class="number">94</span>,  <span class="number">7</span>,</span><br><span class="line">       <span class="number">90</span>, <span class="number">78</span>, <span class="number">18</span>, <span class="number">94</span>, <span class="number">94</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">54</span>,  <span class="number">6</span>])</span><br></pre></td></tr></table></figure><h2 id="4-级联"><a href="#4-级联" class="headerlink" title="4.级联"></a>4.级联</h2><ul><li>np.concatenate()级联需要注意的点：<ul><li>1.级联的参数是列表：一定要加中括号或小括号</li><li>2.维度必须相同</li><li>3.形状相符</li><li>4.【重点】级联的方向默认是shape这个tuple的第一个值所代表的维度方向</li><li>5.可通过axis参数改变级联的方向</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: n1 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: n1</span><br><span class="line">Out[<span class="number">60</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment">#列级联</span></span><br><span class="line">In [<span class="number">61</span>]: np.concatenate((n1,n1),axis = <span class="number">0</span>)</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment">#行级联</span></span><br><span class="line">In [<span class="number">62</span>]: np.concatenate((n1,n1),axis = <span class="number">1</span>)</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><h3 id="np-hstack与np-vstack"><a href="#np-hstack与np-vstack" class="headerlink" title="np.hstack与np.vstack"></a>np.hstack与np.vstack</h3><ul><li>水平级联与垂直级联，处理自己。进行维度的变更</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: n2 = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: n2</span><br><span class="line">Out[<span class="number">64</span>]: array([<span class="number">73</span>, <span class="number">65</span>, <span class="number">92</span>, <span class="number">23</span>, <span class="number">32</span>, <span class="number">47</span>, <span class="number">78</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">37</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vertical 垂直</span></span><br><span class="line">In [<span class="number">65</span>]: n3 = np.vstack(n2) </span><br><span class="line">                            </span><br><span class="line">In [<span class="number">66</span>]: print(n3.shape)    </span><br><span class="line">(<span class="number">10</span>, <span class="number">1</span>)                     </span><br><span class="line">                            </span><br><span class="line">In [<span class="number">67</span>]: n3                 </span><br><span class="line">Out[<span class="number">67</span>]:                    </span><br><span class="line">array([[<span class="number">73</span>],                </span><br><span class="line">       [<span class="number">65</span>],                </span><br><span class="line">       [<span class="number">92</span>],                </span><br><span class="line">       [<span class="number">23</span>],                </span><br><span class="line">       [<span class="number">32</span>],                </span><br><span class="line">       [<span class="number">47</span>],                </span><br><span class="line">       [<span class="number">78</span>],                </span><br><span class="line">       [<span class="number">83</span>],                </span><br><span class="line">       [<span class="number">97</span>],                </span><br><span class="line">       [<span class="number">37</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 水平</span></span><br><span class="line">In [<span class="number">68</span>]: n4 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: n4</span><br><span class="line">Out[<span class="number">69</span>]: array([list([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), list([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])], dtype=object)</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: np.hstack(n4)</span><br><span class="line">Out[<span class="number">70</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">71</span>]: np.hstack(n3)</span><br><span class="line">Out[<span class="number">71</span>]: array([<span class="number">73</span>, <span class="number">65</span>, <span class="number">92</span>, <span class="number">23</span>, <span class="number">32</span>, <span class="number">47</span>, <span class="number">78</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">37</span>])</span><br></pre></td></tr></table></figure><h2 id="5-切分"><a href="#5-切分" class="headerlink" title="5.切分"></a>5.切分</h2><ul><li>与级联类似，常用函数：<ul><li>np.split</li><li>np.vsplit</li><li>np.hsplit</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">72</span>]: n5 = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: n5</span><br><span class="line">Out[<span class="number">73</span>]:</span><br><span class="line">array([[<span class="number">122</span>, <span class="number">102</span>,  <span class="number">37</span>,  <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>],</span><br><span class="line">       [ <span class="number">48</span>,  <span class="number">84</span>,  <span class="number">27</span>, <span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">       [ <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>],</span><br><span class="line">       [ <span class="number">96</span>,  <span class="number">23</span>,  <span class="number">72</span>,  <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">       [<span class="number">120</span>,  <span class="number">31</span>, <span class="number">104</span>, <span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: np.split(n5,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">Out[<span class="number">74</span>]:</span><br><span class="line">[array([[<span class="number">122</span>, <span class="number">102</span>,  <span class="number">37</span>,  <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>]]),</span><br><span class="line"> array([[ <span class="number">48</span>,  <span class="number">84</span>,  <span class="number">27</span>, <span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">        [ <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>]]),</span><br><span class="line"> array([[ <span class="number">96</span>,  <span class="number">23</span>,  <span class="number">72</span>,  <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">        [<span class="number">120</span>,  <span class="number">31</span>, <span class="number">104</span>, <span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#水平切分，即按行进行切分</span></span><br><span class="line">In [<span class="number">75</span>]: np.split(n5,(<span class="number">1</span>,<span class="number">3</span>),axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">75</span>]:</span><br><span class="line">[array([[<span class="number">122</span>],</span><br><span class="line">        [ <span class="number">48</span>],</span><br><span class="line">        [ <span class="number">17</span>],</span><br><span class="line">        [ <span class="number">96</span>],</span><br><span class="line">        [<span class="number">120</span>]]), array([[<span class="number">102</span>,  <span class="number">37</span>],</span><br><span class="line">        [ <span class="number">84</span>,  <span class="number">27</span>],</span><br><span class="line">        [<span class="number">125</span>, <span class="number">142</span>],</span><br><span class="line">        [ <span class="number">23</span>,  <span class="number">72</span>],</span><br><span class="line">        [ <span class="number">31</span>, <span class="number">104</span>]]), array([[ <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>],</span><br><span class="line">        [<span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">        [<span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>],</span><br><span class="line">        [ <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">        [<span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: np.split(n5,(<span class="number">1</span>,<span class="number">3</span>))[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">76</span>]:</span><br><span class="line">array([[ <span class="number">48</span>,  <span class="number">84</span>,  <span class="number">27</span>, <span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">       [ <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">81</span>]: cat.shape</span><br><span class="line">Out[<span class="number">81</span>]: (<span class="number">333</span>, <span class="number">500</span>, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">In [<span class="number">77</span>]: <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: cat1 = np.split(cat,(<span class="number">100</span>,<span class="number">200</span>))[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: plt.imshow(cat1)</span><br><span class="line">Out[<span class="number">79</span>]: &lt;matplotlib.image.AxesImage at <span class="number">0x22293e9b978</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_24_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#垂直切分</span></span><br><span class="line">In [<span class="number">82</span>]: np.vsplit(n5,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">Out[<span class="number">82</span>]:</span><br><span class="line">[array([[<span class="number">122</span>, <span class="number">102</span>,  <span class="number">37</span>,  <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>]]),</span><br><span class="line"> array([[ <span class="number">48</span>,  <span class="number">84</span>,  <span class="number">27</span>, <span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">        [ <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>]]),</span><br><span class="line"> array([[ <span class="number">96</span>,  <span class="number">23</span>,  <span class="number">72</span>,  <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">        [<span class="number">120</span>,  <span class="number">31</span>, <span class="number">104</span>, <span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#水平切分</span></span><br><span class="line">In [<span class="number">83</span>]: np.hsplit(n5,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">[array([[<span class="number">122</span>],</span><br><span class="line">        [ <span class="number">48</span>],</span><br><span class="line">        [ <span class="number">17</span>],</span><br><span class="line">        [ <span class="number">96</span>],</span><br><span class="line">        [<span class="number">120</span>]]), array([[<span class="number">102</span>,  <span class="number">37</span>],</span><br><span class="line">        [ <span class="number">84</span>,  <span class="number">27</span>],</span><br><span class="line">        [<span class="number">125</span>, <span class="number">142</span>],</span><br><span class="line">        [ <span class="number">23</span>,  <span class="number">72</span>],</span><br><span class="line">        [ <span class="number">31</span>, <span class="number">104</span>]]), array([[ <span class="number">69</span>,  <span class="number">28</span>, <span class="number">102</span>, <span class="number">131</span>],</span><br><span class="line">        [<span class="number">119</span>,   <span class="number">7</span>,  <span class="number">65</span>,  <span class="number">61</span>],</span><br><span class="line">        [<span class="number">145</span>, <span class="number">132</span>,  <span class="number">21</span>,  <span class="number">57</span>],</span><br><span class="line">        [ <span class="number">45</span>,  <span class="number">77</span>,  <span class="number">54</span>,  <span class="number">65</span>],</span><br><span class="line">        [<span class="number">132</span>,  <span class="number">64</span>,  <span class="number">72</span>, <span class="number">145</span>]])]</span><br></pre></td></tr></table></figure><h2 id="6-副本"><a href="#6-副本" class="headerlink" title="6.副本"></a>6.副本</h2><ul><li>所有赋值运算不会为ndarray的任何元素创建副本，对赋值后的对象的操作也对原来的对象生效。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: a = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: n = np.array(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: n</span><br><span class="line">Out[<span class="number">86</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">87</span>]: n[<span class="number">2</span>] = <span class="number">512</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: n</span><br><span class="line">Out[<span class="number">88</span>]: array([  <span class="number">0</span>,   <span class="number">1</span>, <span class="number">512</span>,   <span class="number">3</span>,   <span class="number">4</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当数据是ndarray,用=赋值，内存没有改变</span></span><br><span class="line">In [<span class="number">89</span>]: n2 = n</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: n2[<span class="number">2</span>] = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">91</span>]: display(n,n2)</span><br><span class="line">array([   <span class="number">0</span>,    <span class="number">1</span>, <span class="number">1024</span>,    <span class="number">3</span>,    <span class="number">4</span>])</span><br><span class="line">array([   <span class="number">0</span>,    <span class="number">1</span>, <span class="number">1024</span>,    <span class="number">3</span>,    <span class="number">4</span>])</span><br></pre></td></tr></table></figure><ul><li>使用copy()函数创建副本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">92</span>]: n3 = n.copy()</span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: n3</span><br><span class="line">Out[<span class="number">93</span>]: array([   <span class="number">0</span>,    <span class="number">1</span>, <span class="number">1024</span>,    <span class="number">3</span>,    <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: n3[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: display(n,n3)</span><br><span class="line">array([   <span class="number">0</span>,    <span class="number">1</span>, <span class="number">1024</span>,    <span class="number">3</span>,    <span class="number">4</span>])</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h1 id="五、Numpy计算"><a href="#五、Numpy计算" class="headerlink" title="五、Numpy计算"></a>五、Numpy计算</h1><h2 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h2><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/student_data.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 条件判断</span></span><br><span class="line">In [<span class="number">97</span>]: stus_score = np.array([[<span class="number">80</span>,<span class="number">88</span>],[<span class="number">82</span>,<span class="number">81</span>],[<span class="number">84</span>,<span class="number">75</span>],[<span class="number">86</span>,<span class="number">83</span>],[<span class="number">75</span>,<span class="number">81</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: stus_score &gt; <span class="number">80</span></span><br><span class="line">Out[<span class="number">98</span>]:</span><br><span class="line">array([[<span class="keyword">False</span>,  <span class="keyword">True</span>],</span><br><span class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>],</span><br><span class="line">       [ <span class="keyword">True</span>, <span class="keyword">False</span>],</span><br><span class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>],</span><br><span class="line">       [<span class="keyword">False</span>,  <span class="keyword">True</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三目运算（如果数值小于80，替换为0，如果大于80，替换为90）</span></span><br><span class="line">In [<span class="number">100</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: np.where(stus_score &lt; <span class="number">80</span>, <span class="number">0</span>, <span class="number">90</span>)</span><br><span class="line">Out[<span class="number">101</span>]:</span><br><span class="line">array([[<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">       [<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">       [<span class="number">90</span>,  <span class="number">0</span>],</span><br><span class="line">       [<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">       [ <span class="number">0</span>, <span class="number">90</span>]])</span><br></pre></td></tr></table></figure><h2 id="统计运算"><a href="#统计运算" class="headerlink" title="统计运算"></a>统计运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴最大值amax(参数1: 数组; 参数2: axis=0/1; 0表示列1表示行)</span></span><br><span class="line">stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"><span class="comment"># 求每一列的最大值(0表示列)</span></span><br><span class="line">In [<span class="number">106</span>]: print(<span class="string">"每一行的最大值为:"</span>)</span><br><span class="line">每一行的最大值为:</span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: print(<span class="string">"每一列的最大值为:"</span>)</span><br><span class="line">     ...: result = np.amax(stus_score, axis=<span class="number">0</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...: print(<span class="string">"每一行的最大值为:"</span>)</span><br><span class="line">     ...: result = np.amax(stus_score, axis=<span class="number">1</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">每一列的最大值为:</span><br><span class="line">[<span class="number">86</span> <span class="number">88</span>]</span><br><span class="line">每一行的最大值为:</span><br><span class="line">[<span class="number">88</span> <span class="number">82</span> <span class="number">84</span> <span class="number">86</span> <span class="number">81</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴最大值amax(参数1: 数组; 参数2: axis=0/1/2;分别对应各个维度)</span></span><br><span class="line">In [<span class="number">108</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: n = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: n</span><br><span class="line">Out[<span class="number">110</span>]:</span><br><span class="line">array([[[ <span class="number">91</span>,  <span class="number">45</span>,  <span class="number">10</span>,  <span class="number">51</span>],</span><br><span class="line">        [<span class="number">102</span>,  <span class="number">88</span>, <span class="number">129</span>, <span class="number">100</span>],</span><br><span class="line">        [<span class="number">148</span>,  <span class="number">72</span>,  <span class="number">52</span>, <span class="number">114</span>],</span><br><span class="line">        [ <span class="number">99</span>,   <span class="number">5</span>,  <span class="number">67</span>,  <span class="number">26</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">23</span>, <span class="number">102</span>, <span class="number">125</span>, <span class="number">116</span>],</span><br><span class="line">        [<span class="number">140</span>,  <span class="number">61</span>, <span class="number">107</span>,  <span class="number">15</span>],</span><br><span class="line">        [ <span class="number">39</span>, <span class="number">125</span>, <span class="number">139</span>,  <span class="number">38</span>],</span><br><span class="line">        [ <span class="number">95</span>, <span class="number">148</span>, <span class="number">100</span>, <span class="number">109</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">92</span>,  <span class="number">68</span>, <span class="number">140</span>,  <span class="number">75</span>],</span><br><span class="line">        [ <span class="number">49</span>, <span class="number">113</span>,  <span class="number">68</span>,  <span class="number">70</span>],</span><br><span class="line">        [<span class="number">149</span>, <span class="number">107</span>,  <span class="number">78</span>,  <span class="number">69</span>],</span><br><span class="line">        [<span class="number">120</span>, <span class="number">109</span>,  <span class="number">27</span>, <span class="number">138</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">126</span>,  <span class="number">79</span>, <span class="number">113</span>,  <span class="number">89</span>],</span><br><span class="line">        [ <span class="number">29</span>, <span class="number">126</span>,   <span class="number">3</span>,  <span class="number">90</span>],</span><br><span class="line">        [ <span class="number">40</span>,  <span class="number">23</span>,  <span class="number">20</span>,  <span class="number">14</span>],</span><br><span class="line">        [ <span class="number">72</span>,  <span class="number">38</span>,  <span class="number">99</span>,  <span class="number">55</span>]]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">111</span>]: n.max(axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">111</span>]:</span><br><span class="line">array([[<span class="number">126</span>, <span class="number">102</span>, <span class="number">140</span>, <span class="number">116</span>],</span><br><span class="line">       [<span class="number">140</span>, <span class="number">126</span>, <span class="number">129</span>, <span class="number">100</span>],</span><br><span class="line">       [<span class="number">149</span>, <span class="number">125</span>, <span class="number">139</span>, <span class="number">114</span>],</span><br><span class="line">       [<span class="number">120</span>, <span class="number">148</span>, <span class="number">100</span>, <span class="number">138</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: n.max(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">112</span>]:</span><br><span class="line">array([[<span class="number">148</span>,  <span class="number">88</span>, <span class="number">129</span>, <span class="number">114</span>],</span><br><span class="line">       [<span class="number">140</span>, <span class="number">148</span>, <span class="number">139</span>, <span class="number">116</span>],</span><br><span class="line">       [<span class="number">149</span>, <span class="number">113</span>, <span class="number">140</span>, <span class="number">138</span>],</span><br><span class="line">       [<span class="number">126</span>, <span class="number">126</span>, <span class="number">113</span>,  <span class="number">90</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: n.max(axis=<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">113</span>]:</span><br><span class="line">array([[ <span class="number">91</span>, <span class="number">129</span>, <span class="number">148</span>,  <span class="number">99</span>],</span><br><span class="line">       [<span class="number">125</span>, <span class="number">140</span>, <span class="number">139</span>, <span class="number">148</span>],</span><br><span class="line">       [<span class="number">140</span>, <span class="number">113</span>, <span class="number">149</span>, <span class="number">138</span>],</span><br><span class="line">       [<span class="number">126</span>, <span class="number">126</span>,  <span class="number">40</span>,  <span class="number">99</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴最小值amin</span></span><br><span class="line">In [<span class="number">114</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"><span class="comment"># 求每一行的最小值(0表示列)</span></span><br><span class="line">In [<span class="number">115</span>]: print(<span class="string">"每一列的最小值为:"</span>)</span><br><span class="line">     ...: result = np.amin(stus_score, axis=<span class="number">0</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...: <span class="comment"># 求每一行的最小值(1表示行)</span></span><br><span class="line">     ...: print(<span class="string">"每一行的最小值为:"</span>)</span><br><span class="line">     ...: result = np.amin(stus_score, axis=<span class="number">1</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">每一列的最小值为:</span><br><span class="line">[<span class="number">75</span> <span class="number">75</span>]</span><br><span class="line">每一行的最小值为:</span><br><span class="line">[<span class="number">80</span> <span class="number">81</span> <span class="number">75</span> <span class="number">83</span> <span class="number">75</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴平均值mean</span></span><br><span class="line">In [<span class="number">116</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line">In [<span class="number">117</span>]: <span class="comment"># 求每一行的平均值(0表示列)</span></span><br><span class="line">     ...: print(<span class="string">"每一列的平均值:"</span>)</span><br><span class="line">     ...: result = np.mean(stus_score, axis=<span class="number">0</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...: <span class="comment"># 求每一行的平均值(1表示行)</span></span><br><span class="line">     ...: print(<span class="string">"每一行的平均值:"</span>)</span><br><span class="line">     ...: result = np.mean(stus_score, axis=<span class="number">1</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">每一列的平均值:</span><br><span class="line">[<span class="number">81.4</span> <span class="number">81.6</span>]</span><br><span class="line">每一行的平均值:</span><br><span class="line">[<span class="number">84.</span>  <span class="number">81.5</span> <span class="number">79.5</span> <span class="number">84.5</span> <span class="number">78.</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方差std</span></span><br><span class="line">In [<span class="number">118</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: <span class="comment"># 求每一行的方差(0表示列)</span></span><br><span class="line">     ...: print(<span class="string">"每一列的方差:"</span>)</span><br><span class="line">     ...: result = np.std(stus_score, axis=<span class="number">0</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...: <span class="comment"># 求每一行的方差(1表示行)</span></span><br><span class="line">     ...: print(<span class="string">"每一行的方差:"</span>)</span><br><span class="line">     ...: result = np.std(stus_score, axis=<span class="number">1</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">每一列的方差:</span><br><span class="line">[<span class="number">3.77359245</span> <span class="number">4.1761226</span> ]</span><br><span class="line">每一行的方差:</span><br><span class="line">[<span class="number">4.</span>  <span class="number">0.5</span> <span class="number">4.5</span> <span class="number">1.5</span> <span class="number">3.</span> ]</span><br></pre></td></tr></table></figure><h2 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组与数的运算</span></span><br><span class="line">In [<span class="number">120</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">122</span>]: print(<span class="string">"加之前："</span>)</span><br><span class="line">     ...: print(stus_score)</span><br><span class="line">     ...:</span><br><span class="line">     ...: <span class="comment">#为所有平时成绩都加5分</span></span><br><span class="line">     ...: stus_score[:,<span class="number">0</span>]=stus_score[:,<span class="number">0</span>]+<span class="number">5</span></span><br><span class="line">     ...: print(<span class="string">"加之后："</span>)</span><br><span class="line">     ...: print(stus_score)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">加之前：</span><br><span class="line">[[<span class="number">80</span> <span class="number">88</span>]</span><br><span class="line"> [<span class="number">82</span> <span class="number">81</span>]</span><br><span class="line"> [<span class="number">84</span> <span class="number">75</span>]</span><br><span class="line"> [<span class="number">86</span> <span class="number">83</span>]</span><br><span class="line"> [<span class="number">75</span> <span class="number">81</span>]]</span><br><span class="line">加之后：</span><br><span class="line">[[<span class="number">85</span> <span class="number">88</span>]</span><br><span class="line"> [<span class="number">87</span> <span class="number">81</span>]</span><br><span class="line"> [<span class="number">89</span> <span class="number">75</span>]</span><br><span class="line"> [<span class="number">91</span> <span class="number">83</span>]</span><br><span class="line"> [<span class="number">80</span> <span class="number">81</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组也支持加减乘除运算</span></span><br><span class="line">In [<span class="number">123</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">     ...: b = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">     ...: c = a + b</span><br><span class="line">     ...: d = a - b</span><br><span class="line">     ...: e = a * b</span><br><span class="line">     ...: f = a / b</span><br><span class="line">     ...: print(<span class="string">"a+b="</span>,c)</span><br><span class="line">     ...: print(<span class="string">"a-b="</span>,d)</span><br><span class="line">     ...: print(<span class="string">"a*b="</span>,e)</span><br><span class="line">     ...: print(<span class="string">"a/b="</span>,f)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">a+b= [<span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span>]</span><br><span class="line">a-b= [ <span class="number">-9</span> <span class="number">-18</span> <span class="number">-27</span> <span class="number">-36</span>]</span><br><span class="line">a*b= [ <span class="number">10</span>  <span class="number">40</span>  <span class="number">90</span> <span class="number">160</span>]</span><br><span class="line">a/b= [<span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span>]</span><br></pre></td></tr></table></figure><h2 id="矩阵运算np-dot"><a href="#矩阵运算np-dot" class="headerlink" title="矩阵运算np.dot()"></a>矩阵运算np.dot()</h2><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/根据权重计算成绩.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算规则(计算学生总成绩)</span></span><br><span class="line"><span class="comment">#（M行，N列）*（N行，Z列）=（M行，Z列）</span></span><br><span class="line">In [<span class="number">125</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: stus_score = np.array([[<span class="number">80</span>, <span class="number">88</span>], [<span class="number">82</span>, <span class="number">81</span>], [<span class="number">84</span>, <span class="number">75</span>], [<span class="number">86</span>, <span class="number">83</span>], [<span class="number">75</span>, <span class="number">81</span>]])</span><br><span class="line">     ...: <span class="comment">#平时成绩占40%,期末成绩占60%,计算结果</span></span><br><span class="line">     ...: q = np.array([[<span class="number">0.4</span>],[<span class="number">0.6</span>]])</span><br><span class="line">     ...: result = np.dot(stus_score,q)</span><br><span class="line">     ...: print(<span class="string">"最终结果为："</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">最终结果为：</span><br><span class="line">[[<span class="number">84.8</span>]</span><br><span class="line"> [<span class="number">81.4</span>]</span><br><span class="line"> [<span class="number">78.6</span>]</span><br><span class="line"> [<span class="number">84.2</span>]</span><br><span class="line"> [<span class="number">78.6</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵拼接</span></span><br><span class="line"><span class="comment">## 矩阵垂直拼接</span></span><br><span class="line">In [<span class="number">127</span>]: print(<span class="string">"v1为:"</span>)</span><br><span class="line">     ...: v1 = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">     ...:       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">     ...: print(v1)</span><br><span class="line">     ...: print(<span class="string">"v2为:"</span>)</span><br><span class="line">     ...: v2 = [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">     ...:       [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]</span><br><span class="line">     ...: print(v2)</span><br><span class="line">     ...:</span><br><span class="line">v1为:</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">v2为:</span><br><span class="line">[[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>], [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直拼接</span></span><br><span class="line">In [<span class="number">128</span>]: result = np.vstack((v1, v2))</span><br><span class="line">     ...: print(<span class="string">"v1和v2垂直拼接的结果为"</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">v1和v2垂直拼接的结果为</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵水平拼接</span></span><br><span class="line">In [<span class="number">129</span>]: print(<span class="string">"v1为:"</span>)</span><br><span class="line">     ...: v1 = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">     ...:       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">     ...: print(v1)</span><br><span class="line">     ...: print(<span class="string">"v2为:"</span>)</span><br><span class="line">     ...: v2 = [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">     ...:       [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]</span><br><span class="line">     ...: print(v2)</span><br><span class="line">     ...:</span><br><span class="line">v1为:</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">v2为:</span><br><span class="line">[[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>], [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直拼接</span></span><br><span class="line">In [<span class="number">130</span>]: result = np.hstack((v1, v2))</span><br><span class="line">     ...: print(<span class="string">"v1和v2水平拼接的结果为"</span>)</span><br><span class="line">     ...: print(result)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">v1和v2水平拼接的结果为</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]</span><br></pre></td></tr></table></figure><h2 id="矩阵的广播"><a href="#矩阵的广播" class="headerlink" title="矩阵的广播"></a>矩阵的广播</h2><ul><li>ndarray广播的两条规则：<ul><li>规则一：为缺失的维度补1</li><li>规则二：假定缺失元素用已有值填充</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例1：m = np.ones((2,3)) a = np.arange(3)求m+a</span></span><br><span class="line">In [<span class="number">131</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: m = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">     ...: a = np.arange(<span class="number">3</span>)</span><br><span class="line">     ...: display(m,a)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#numpy广播，维度不同，自动补全</span></span><br><span class="line">In [<span class="number">133</span>]: m + a</span><br><span class="line">Out[<span class="number">133</span>]:</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例2：a = np.arange(3).reshape((3,1)) b = np.arange(3) 求a+b</span></span><br><span class="line">In [<span class="number">134</span>]: a = np.arange(<span class="number">3</span>).reshape((<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line">     ...: b = np.arange(<span class="number">3</span>)</span><br><span class="line">     ...: display(a,b)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">array([[<span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>]])</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">135</span>]: a + b</span><br><span class="line">Out[<span class="number">135</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><h1 id="六、排序"><a href="#六、排序" class="headerlink" title="六、排序"></a>六、排序</h1><h2 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h2><ul><li>np.sort()与ndarray.sort()，区别:<ul><li>np.sort()不改变输入</li><li>ndarray.sort()本地处理，不占用空间，改变输入</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">136</span>]: n1 = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: n1</span><br><span class="line">Out[<span class="number">137</span>]:</span><br><span class="line">array([ <span class="number">80</span>,  <span class="number">11</span>,  <span class="number">31</span>,  <span class="number">68</span>,  <span class="number">83</span>,  <span class="number">73</span>,  <span class="number">42</span>,   <span class="number">6</span>,  <span class="number">40</span>, <span class="number">125</span>, <span class="number">147</span>, <span class="number">147</span>,  <span class="number">88</span>,</span><br><span class="line">       <span class="number">117</span>,  <span class="number">85</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: n2 = n1.sort()</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: display(n1,n2)</span><br><span class="line">array([  <span class="number">6</span>,  <span class="number">11</span>,  <span class="number">31</span>,  <span class="number">40</span>,  <span class="number">42</span>,  <span class="number">68</span>,  <span class="number">73</span>,  <span class="number">80</span>,  <span class="number">83</span>,  <span class="number">85</span>,  <span class="number">88</span>, <span class="number">117</span>, <span class="number">125</span>,</span><br><span class="line">       <span class="number">147</span>, <span class="number">147</span>])</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">140</span>]: n3 = np.sort(n1)</span><br><span class="line">     ...: display(n1,n3)</span><br><span class="line">     ...:</span><br><span class="line">     ...:</span><br><span class="line">array([  <span class="number">6</span>,  <span class="number">11</span>,  <span class="number">31</span>,  <span class="number">40</span>,  <span class="number">42</span>,  <span class="number">68</span>,  <span class="number">73</span>,  <span class="number">80</span>,  <span class="number">83</span>,  <span class="number">85</span>,  <span class="number">88</span>, <span class="number">117</span>, <span class="number">125</span>,</span><br><span class="line">       <span class="number">147</span>, <span class="number">147</span>])</span><br><span class="line">array([  <span class="number">6</span>,  <span class="number">11</span>,  <span class="number">31</span>,  <span class="number">40</span>,  <span class="number">42</span>,  <span class="number">68</span>,  <span class="number">73</span>,  <span class="number">80</span>,  <span class="number">83</span>,  <span class="number">85</span>,  <span class="number">88</span>, <span class="number">117</span>, <span class="number">125</span>,</span><br><span class="line">       <span class="number">147</span>, <span class="number">147</span>])</span><br></pre></td></tr></table></figure><h2 id="2-部分排序"><a href="#2-部分排序" class="headerlink" title="2.部分排序"></a>2.部分排序</h2><ul><li>np.partition(a,k)<ul><li>当k为正时：我们想要得到最小的k个数</li><li>当k为负时：我们想要得到最大的k个数</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">141</span>]: n4 = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: n4</span><br><span class="line">Out[<span class="number">142</span>]:</span><br><span class="line">array([ <span class="number">37</span>,  <span class="number">74</span>,  <span class="number">41</span>,  <span class="number">53</span>,  <span class="number">31</span>,  <span class="number">11</span>,  <span class="number">23</span>, <span class="number">108</span>,  <span class="number">12</span>, <span class="number">128</span>,  <span class="number">27</span>,  <span class="number">88</span>,  <span class="number">74</span>,</span><br><span class="line">       <span class="number">114</span>,  <span class="number">97</span>, <span class="number">127</span>,  <span class="number">60</span>,  <span class="number">47</span>, <span class="number">130</span>, <span class="number">135</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">143</span>]: np.partition(n4,<span class="number">-5</span>)</span><br><span class="line">Out[<span class="number">143</span>]:</span><br><span class="line">array([ <span class="number">37</span>,  <span class="number">12</span>,  <span class="number">41</span>,  <span class="number">27</span>,  <span class="number">31</span>,  <span class="number">11</span>,  <span class="number">23</span>,  <span class="number">47</span>,  <span class="number">74</span>,  <span class="number">60</span>,  <span class="number">53</span>,  <span class="number">74</span>,  <span class="number">88</span>,</span><br><span class="line">        <span class="number">97</span>, <span class="number">108</span>, <span class="number">114</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">130</span>, <span class="number">135</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">144</span>]: np.partition(n4,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">144</span>]:</span><br><span class="line">array([ <span class="number">12</span>,  <span class="number">23</span>,  <span class="number">11</span>,  <span class="number">27</span>,  <span class="number">31</span>,  <span class="number">37</span>,  <span class="number">41</span>,  <span class="number">47</span>, <span class="number">108</span>,  <span class="number">74</span>,  <span class="number">53</span>,  <span class="number">88</span>,  <span class="number">74</span>,</span><br><span class="line">       <span class="number">114</span>,  <span class="number">97</span>, <span class="number">127</span>,  <span class="number">60</span>, <span class="number">128</span>, <span class="number">130</span>, <span class="number">135</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取数组中最大的k个数</span></span><br><span class="line">In [<span class="number">145</span>]: np.partition(n4,<span class="number">-2</span>)[<span class="number">-2</span>:]</span><br><span class="line">Out[<span class="number">145</span>]: array([<span class="number">130</span>, <span class="number">135</span>])</span><br></pre></td></tr></table></figure><h2 id="numpy案例"><a href="#numpy案例" class="headerlink" title="numpy案例"></a>numpy案例</h2><ul><li>使用numpy将图片进行翻转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dianxin = plt.imread(<span class="string">'./image/dianxin.jpg'</span>)</span><br><span class="line">plt.imshow(dianxin)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f47d25630&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_110_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将图片在竖直方向翻转</span></span><br><span class="line">dianxin1 = dianxin[::<span class="number">-1</span>]</span><br><span class="line">plt.imshow(dianxin1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f47b61278&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_111_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在水平方向翻转</span></span><br><span class="line">dianxin2 = dianxin[::,::<span class="number">-1</span>]</span><br><span class="line">plt.imshow(dianxin2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f48df3320&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_112_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 即在水平方向翻转又在垂直方向翻转</span></span><br><span class="line">dianxin3 = dianxin[::<span class="number">-1</span>,::<span class="number">-1</span>]</span><br><span class="line">plt.imshow(dianxin3)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f48e60a20&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_113_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改变图片颜色</span></span><br><span class="line">dianxin4 = dianxin[::,::,<span class="number">-2</span>]</span><br><span class="line">plt.imshow(dianxin4)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f47bb9400&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_114_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改图片，是图片模糊</span></span><br><span class="line">dianxin5 = dianxin[::<span class="number">3</span>,::<span class="number">3</span>]</span><br><span class="line">plt.imshow(dianxin5)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x17f47d3fd68&gt;</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/output_115_1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python数据分析 </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jupyter_notebook</title>
      <link href="/Python/2018/10/26/Jupyter-notebook/"/>
      <url>/Python/2018/10/26/Jupyter-notebook/</url>
      
        <content type="html"><![CDATA[<h1 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h1><ul><li>notebook是Jupyter项目的重要组件之一，它是一个代码、文本（有标记或无标记）、数据可视化或其它输出的交互式文档。Jupyter Notebook需要与内核互动，内核是Jupyter与其它编程语言的交互编程协议。Python的Jupyter内核是使用IPython。要启动Jupyter，在命令行中输入<code>jupyter notebook</code>:</li></ul><h2 id="一、IPython帮助文档"><a href="#一、IPython帮助文档" class="headerlink" title="一、IPython帮助文档"></a>一、IPython帮助文档</h2><h3 id="使用help"><a href="#使用help" class="headerlink" title="使用help()"></a>使用help()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用help()</span></span><br><span class="line"><span class="comment">## 通过以下命令获得帮助文档</span></span><br><span class="line"><span class="comment">#或者输入help（）执行程序再输入要查看的相应方法名</span></span><br><span class="line">In [<span class="number">1</span>]: help(len)</span><br><span class="line">Help on built-<span class="keyword">in</span> function len <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">len(obj, /)</span><br><span class="line">    Return the number of items <span class="keyword">in</span> a container.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: help(type)</span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">type</span> <span class="title">in</span> <span class="title">module</span> <span class="title">builtins</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">type</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">type</span><span class="params">(object_or_name, bases, dict)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">type</span><span class="params">(object)</span> -&gt; the object's type</span></span><br><span class="line"><span class="class"> |  type(name, bases, dict) -&gt; a new type</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  Methods defined here:</span></span><br><span class="line"> |</span><br><span class="line"> |  __call__(self, /, *args, **kwargs)</span><br><span class="line"> |      Call self <span class="keyword">as</span> a function.</span><br><span class="line"> |</span><br><span class="line"> |  __delattr__(self, name, /)</span><br><span class="line"> |      Implement delattr(self, name).</span><br><span class="line"> |</span><br><span class="line"> |  __dir__(...)</span><br><span class="line"> |      __dir__() -&gt; list</span><br><span class="line"> |      specialized __dir__ implementation <span class="keyword">for</span> types</span><br><span class="line"> |</span><br><span class="line"> |  __getattribute__(self, name, /)</span><br><span class="line"> |      Return getattr(self, name).</span><br><span class="line"> |</span><br><span class="line"> |  __init__(self, /, *args, **kwargs)</span><br><span class="line"> |      Initialize self.  See help(type(self)) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |</span><br><span class="line"> |  __instancecheck__(...)</span><br><span class="line"> |      __instancecheck__() -&gt; bool</span><br><span class="line"> |      check <span class="keyword">if</span> an object <span class="keyword">is</span> an instance</span><br><span class="line"> |</span><br><span class="line"> |  __new__(*args, **kwargs)</span><br><span class="line"> |      Create <span class="keyword">and</span> <span class="keyword">return</span> a new object.  See help(type) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |</span><br><span class="line"> |  __prepare__(...)</span><br><span class="line"> |      __prepare__() -&gt; dict</span><br><span class="line"> |      used to create the namespace <span class="keyword">for</span> the <span class="class"><span class="keyword">class</span> <span class="title">statement</span></span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__repr__</span><span class="params">(self, /)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">Return</span> <span class="title">repr</span><span class="params">(self)</span>.</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__setattr__</span><span class="params">(self, name, value, /)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">Implement</span> <span class="title">setattr</span><span class="params">(self, name, value)</span>.</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">__sizeof__</span><span class="params">(...)</span></span></span><br><span class="line"><span class="class"> |      <span class="title">__sizeof__</span><span class="params">()</span> -&gt; int</span></span><br><span class="line"><span class="class"> |      return memory consumption of the type object</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  __subclasscheck__(...)</span></span><br><span class="line"><span class="class"> |      __subclasscheck__() -&gt; bool</span></span><br><span class="line"><span class="class"> |      check if a class is a subclass</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  __subclasses__(...)</span></span><br><span class="line"><span class="class"> |      __subclasses__() -&gt; list of immediate subclasses</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  mro(...)</span></span><br><span class="line"><span class="class"> |      mro() -&gt; list</span></span><br><span class="line"><span class="class"> |      return a type's method resolution order</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  ----------------------------------------------------------------------</span></span><br><span class="line"><span class="class"> |  Data descriptors defined here:</span></span><br><span class="line"> |</span><br><span class="line"> |  __abstractmethods__</span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |</span><br><span class="line"> |  __text_signature__</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data <span class="keyword">and</span> other attributes defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __base__ = &lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;</span></span><br><span class="line"><span class="class"> |      <span class="title">The</span> <span class="title">most</span> <span class="title">base</span> <span class="title">type</span></span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"> |  __bases__ = (&lt;class 'object'&gt;,)</span><br><span class="line"> |</span><br><span class="line"> |  __basicsize__ = <span class="number">864</span></span><br><span class="line"> |</span><br><span class="line"> |  __dictoffset__ = <span class="number">264</span></span><br><span class="line"> |</span><br><span class="line"> |  __flags__ = <span class="number">-2146675712</span></span><br><span class="line"> |</span><br><span class="line"> |  __itemsize__ = <span class="number">40</span></span><br><span class="line"> |</span><br><span class="line"> |  __mro__ = (&lt;class 'type'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"> |</span><br><span class="line"> |  __weakrefoffset__ = <span class="number">368</span></span><br></pre></td></tr></table></figure><h3 id="使用？"><a href="#使用？" class="headerlink" title="使用？"></a>使用？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用？</span></span><br><span class="line">In [4]: len?</span><br><span class="line">Signature: len(obj, /)</span><br><span class="line">Docstring: Return the number of items <span class="keyword">in</span> a container.</span><br><span class="line">Type:      builtin_function_or_method</span><br></pre></td></tr></table></figure><h3 id="自省"><a href="#自省" class="headerlink" title="自省??"></a>自省??</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算1到100的数之和</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        sum += i</span><br><span class="line">    print(<span class="string">'sum = %d'</span> % sum)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_number??</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Signature: add_number(n)</span><br><span class="line">Source:   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算1到100的数之和</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        sum += i</span><br><span class="line">    print(<span class="string">'sum = %d'</span> % sum)</span><br><span class="line">File:      d:\myproject\python\jupyter\&lt;ipython-input<span class="number">-20</span>-ad8522950c02&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure><h3 id="tab自动补全"><a href="#tab自动补全" class="headerlink" title="tab自动补全"></a>tab自动补全</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog_img/tab.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sc</span><br></pre></td></tr></table></figure><h2 id="二、IPython魔法指令"><a href="#二、IPython魔法指令" class="headerlink" title="二、IPython魔法指令"></a>二、IPython魔法指令</h2><h3 id="1、运行外部Python文件"><a href="#1、运行外部Python文件" class="headerlink" title="1、运行外部Python文件"></a>1、运行外部Python文件</h3><ul><li>%run *.py运行外部文件（默认是在当前目录）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建一个ipython_test.py文件，内容如下：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x + y) / z</span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">c = <span class="number">7.5</span></span><br><span class="line">result = f(a, b, c)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: %run ipython_test.py</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: result</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">1.4666666666666666</span></span><br><span class="line">In [<span class="number">10</span>]: a</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="2、加载外部python文件"><a href="#2、加载外部python文件" class="headerlink" title="2、加载外部python文件"></a>2、加载外部python文件</h3><ul><li>%load *.py加载外部文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: %load ipython_test.py</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="comment"># %load ipython_test.py</span></span><br><span class="line">    ...: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    ...:     <span class="keyword">return</span> (x + y) / z</span><br><span class="line">    ...: a = <span class="number">5</span></span><br><span class="line">    ...: b = <span class="number">6</span></span><br><span class="line">    ...: c = <span class="number">7.5</span></span><br><span class="line">    ...: result = f(a, b, c)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: result</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1.4666666666666666</span></span><br></pre></td></tr></table></figure><h3 id="3、运行计时"><a href="#3、运行计时" class="headerlink" title="3、运行计时"></a>3、运行计时</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>)]</span><br><span class="line">    ...: b = np.array(a)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算程序运行时间</span></span><br><span class="line">In [<span class="number">16</span>]: %time b * b</span><br><span class="line">Wall time: <span class="number">1</span> ms</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">array([   <span class="number">1</span>,    <span class="number">4</span>,    <span class="number">9</span>,   <span class="number">16</span>,   <span class="number">25</span>,   <span class="number">36</span>,   <span class="number">49</span>,   <span class="number">64</span>,   <span class="number">81</span>,  <span class="number">100</span>,  <span class="number">121</span>,</span><br><span class="line">        <span class="number">144</span>,  <span class="number">169</span>,  <span class="number">196</span>,  <span class="number">225</span>,  <span class="number">256</span>,  <span class="number">289</span>,  <span class="number">324</span>,  <span class="number">361</span>,  <span class="number">400</span>,  <span class="number">441</span>,  <span class="number">484</span>,</span><br><span class="line">        <span class="number">529</span>,  <span class="number">576</span>,  <span class="number">625</span>,  <span class="number">676</span>,  <span class="number">729</span>,  <span class="number">784</span>,  <span class="number">841</span>,  <span class="number">900</span>,  <span class="number">961</span>, <span class="number">1024</span>, <span class="number">1089</span>,</span><br><span class="line">       <span class="number">1156</span>, <span class="number">1225</span>, <span class="number">1296</span>, <span class="number">1369</span>, <span class="number">1444</span>, <span class="number">1521</span>, <span class="number">1600</span>, <span class="number">1681</span>, <span class="number">1764</span>, <span class="number">1849</span>, <span class="number">1936</span>,</span><br><span class="line">       <span class="number">2025</span>, <span class="number">2116</span>, <span class="number">2209</span>, <span class="number">2304</span>, <span class="number">2401</span>, <span class="number">2500</span>, <span class="number">2601</span>, <span class="number">2704</span>, <span class="number">2809</span>, <span class="number">2916</span>, <span class="number">3025</span>,</span><br><span class="line">       <span class="number">3136</span>, <span class="number">3249</span>, <span class="number">3364</span>, <span class="number">3481</span>, <span class="number">3600</span>, <span class="number">3721</span>, <span class="number">3844</span>, <span class="number">3969</span>, <span class="number">4096</span>, <span class="number">4225</span>, <span class="number">4356</span>,</span><br><span class="line">       <span class="number">4489</span>, <span class="number">4624</span>, <span class="number">4761</span>, <span class="number">4900</span>, <span class="number">5041</span>, <span class="number">5184</span>, <span class="number">5329</span>, <span class="number">5476</span>, <span class="number">5625</span>, <span class="number">5776</span>, <span class="number">5929</span>,</span><br><span class="line">       <span class="number">6084</span>, <span class="number">6241</span>, <span class="number">6400</span>, <span class="number">6561</span>, <span class="number">6724</span>, <span class="number">6889</span>, <span class="number">7056</span>, <span class="number">7225</span>, <span class="number">7396</span>, <span class="number">7569</span>, <span class="number">7744</span>,</span><br><span class="line">       <span class="number">7921</span>, <span class="number">8100</span>, <span class="number">8281</span>, <span class="number">8464</span>, <span class="number">8649</span>, <span class="number">8836</span>, <span class="number">9025</span>, <span class="number">9216</span>, <span class="number">9409</span>, <span class="number">9604</span>, <span class="number">9801</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算平均运行时间</span></span><br><span class="line">In [<span class="number">17</span>]: %timeit b * b</span><br><span class="line"><span class="number">678</span> ns ± <span class="number">118</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br></pre></td></tr></table></figure><h3 id="4、查看当前会话中的所有函数与变量"><a href="#4、查看当前会话中的所有函数与变量" class="headerlink" title="4、查看当前会话中的所有函数与变量"></a>4、查看当前会话中的所有函数与变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前会话中的所有变量与函数名称：</span></span><br><span class="line">In [<span class="number">18</span>]: %who</span><br><span class="line">a        add_number      b       c       f       np      result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前会话中的所有变量与函数名称的详细信息：</span></span><br><span class="line">In [<span class="number">19</span>]: %whos</span><br><span class="line">Variable     Type        Data/Info</span><br><span class="line">----------------------------------</span><br><span class="line">a            list        n=<span class="number">99</span></span><br><span class="line">add_number   function    &lt;function add_number at <span class="number">0x000002DBBF818D08</span>&gt;</span><br><span class="line">b            ndarray     <span class="number">99</span>: <span class="number">99</span> elems, type `int32`, <span class="number">396</span> bytes</span><br><span class="line">c            float       <span class="number">7.5</span></span><br><span class="line">f            function    &lt;function f at <span class="number">0x000002DBBF818BF8</span>&gt;</span><br><span class="line">np           module      &lt;module <span class="string">'numpy'</span> <span class="keyword">from</span> <span class="string">'F:\&lt;...&gt;ges\\numpy\\__init__.py'</span>&gt;</span><br><span class="line">result       float       <span class="number">1.4666666666666666</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回一个字符串列表，列表中的元素是当前会话中的所有变量和函数名：</span></span><br><span class="line">In [<span class="number">20</span>]: %who_ls</span><br><span class="line">Out[<span class="number">20</span>]: [<span class="string">'a'</span>, <span class="string">'add_number'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'np'</span>, <span class="string">'result'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: !ls</span><br><span class="line">douban_movie.csv</span><br><span class="line">emp.csv</span><br><span class="line">image</span><br><span class="line">ipython_test.py</span><br><span class="line">Jupyter Notebook.ipynb</span><br><span class="line">Numpy.ipynb</span><br><span class="line">Pandas绗旇��</span><br><span class="line">pydata</span><br><span class="line">Python楂樼骇鐗规��.ipynb</span><br><span class="line">Python鍑芥暟寮忕紪绋�.ipynb</span><br><span class="line">Python鍩虹��.ipynb</span><br><span class="line">Python鍩虹��-鍑芥暟.ipynb</span><br><span class="line">Python鍩虹��闆嗗悎.ipynb</span><br><span class="line">Python鍩虹��鍒楄〃.ipynb</span><br><span class="line">Python鍩虹��鍏冪粍.ipynb</span><br><span class="line">Python鍩虹��瀛楀吀.ipynb</span><br><span class="line">Python缁冧範棰�.ipynb</span><br><span class="line">tram.csv</span><br><span class="line">trans_result.xlsx</span><br><span class="line">Untitled.ipynb</span><br><span class="line">Untitled1.ipynb</span><br></pre></td></tr></table></figure><h3 id="5、列出所有魔法"><a href="#5、列出所有魔法" class="headerlink" title="5、列出所有魔法"></a>5、列出所有魔法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: %lsmagic</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">Available line magics:</span><br><span class="line">%alias  %alias_magic  %autocall  %autoindent  %automagic  %bookmark  %cd  %cls  %colors  %config  %copy  %cpaste  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %notebook  %page  %paste  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode</span><br><span class="line"></span><br><span class="line">Available cell magics:</span><br><span class="line">%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex</span><br><span class="line">%%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile</span><br><span class="line"></span><br><span class="line">Automagic <span class="keyword">is</span> ON, % prefix IS NOT needed <span class="keyword">for</span> line magics.</span><br></pre></td></tr></table></figure><h2 id="三、notebook快捷键"><a href="#三、notebook快捷键" class="headerlink" title="三、notebook快捷键"></a>三、notebook快捷键</h2><h3 id="1、命令模式"><a href="#1、命令模式" class="headerlink" title="1、命令模式"></a>1、命令模式</h3><ul><li>Enter:转入编辑模式</li><li>Shift-Enter:运行本单元，选中下个单元</li><li>Ctrl-Enter:运行本单元，选中下个单元</li><li>Alt-Enter:运行本单元，在下面插入一个单元</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2、Python-解释器</title>
      <link href="/Python/2018/10/25/2%E3%80%81Python-%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
      <url>/Python/2018/10/25/2%E3%80%81Python-%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h1><ul><li>Linux/Unix的系统上，Python解释器通常被安装在/usr/local/bin/python3.x这样的有效路径（目录）里。</li><li>我们可以将路径/usr/local/bin添加到您的Linux/Unix操作系统的环境变量中，这样您就可通过shell 终端输入下面的命令来启动 Python 。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.x</span><br></pre></td></tr></table></figure><ul><li>在Windows系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在C:\Python36下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set path=%path%;C:\python36</span><br></pre></td></tr></table></figure><hr><h2 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h2><ul><li>我们可以在命令提示符中输入“Python”命令来启动Python解释器：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><ul><li>执行以上命令后，出现如下窗口信息：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.3</span> |Anaconda custom (<span class="number">64</span>-bit)| (default, Oct <span class="number">15</span> <span class="number">2017</span>, <span class="number">03</span>:<span class="number">27</span>:<span class="number">45</span>)</span><br><span class="line"><span class="number">1900</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>在python提示符中输入以下语句，然后按回车键查看运行效果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello Python!'</span>)</span><br></pre></td></tr></table></figure><ul><li>以上命令执行结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure><ul><li>当键入一个多行结构时，续行是必须的，我们可以看如下if语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>the_world_is_flat = <span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> the_world_is_flat:</span><br><span class="line"><span class="meta">... </span>   print(<span class="string">'Be careful not to fall off!'</span>)</span><br><span class="line">...</span><br><span class="line">Be careful <span class="keyword">not</span> to fall off!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h2><ul><li>将如下代码拷贝至hello.py文件中：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello Python!'</span>)</span><br></pre></td></tr></table></figure><ul><li>通过以下命令执行该脚本：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><ul><li>输出结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure><ul><li>在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以向SHELL脚本一样可直接执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3.6</span></span><br></pre></td></tr></table></figure><ul><li>然后修改脚本权限，使其有执行权限，命令如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">755</span> hello.py</span><br></pre></td></tr></table></figure><ul><li>执行以下命令：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.py</span><br></pre></td></tr></table></figure><ul><li>输出结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello Python!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1、基本数据类型</title>
      <link href="/Python/2018/10/24/1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/Python/2018/10/24/1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>python的六个标准内置对象  <ul><li>数字             1234,3.1415,3+4j,Deciaml,Fraction</li><li>字符串           ‘spam’,”guido’s”</li><li>列表              [1,[2,’three’],4]</li><li>元组              (1,’spam’,4,’U’)</li><li>字典              {‘food’:’spam’,’taste’:’yum’}</li><li>集合              set(‘abc’),{‘a’,’b’,’c’}</li></ul></li></ul><h2 id="Numbers（数字）"><a href="#Numbers（数字）" class="headerlink" title="Numbers（数字）"></a>Numbers（数字）</h2><p>Python 3支持int、float、bool、complex（复数）。</p><ul><li>数值类型的赋值和计算都是很直观的，就像大多数语言一样。内置的type()函数可以用来查询变量所指的对象类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d = <span class="number">20</span>,<span class="number">5.5</span>,<span class="keyword">True</span>,<span class="number">3</span>+<span class="number">4j</span></span><br><span class="line">print(type(a),type(b),type(c),type(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt; &lt;<span class="title">class</span> '<span class="title">float</span>'&gt; &lt;<span class="title">class</span> '<span class="title">bool</span>'&gt; &lt;<span class="title">class</span> '<span class="title">complex</span>'&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数值运算：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = 4+5     #加法</span><br><span class="line">b = 4.3-2   #减法</span><br><span class="line">c = 3*7     #乘法</span><br><span class="line">d = 2/4     #除法，得到一个浮点数</span><br><span class="line">e = 2//4    #除法，得到一个整数</span><br><span class="line">f = 17%3    #取余</span><br><span class="line">g = 2**5    #乘方</span><br><span class="line">print(a,b,c,d,e,f,g)</span><br><span class="line">9 2.3 21 0.5 0 2 32</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。</li><li>4、在混合计算时，Pyhton会把整型转换成为浮点数。</li></ul><hr><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><ul><li>Python中的字符串str用单引号(‘ ‘)或双引号(“ “)括起来，同时使用反斜杠()转义特殊字符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Yes,he doesn\'t'</span></span><br><span class="line">print(s,type(s),len(s))</span><br><span class="line">Yes,he doesn<span class="string">'t &lt;class '</span>st<span class="string">r'&gt; 14</span></span><br></pre></td></tr></table></figure><ul><li>如果不想让反斜杠发生转义，可以在字符串前面加r,表示原始字符串：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'C:\some\name'</span>)</span><br><span class="line">C:\some</span><br><span class="line">ame</span><br><span class="line">print(<span class="string">r'C:\some\name'</span>)</span><br><span class="line">C:\some\name</span><br></pre></td></tr></table></figure><p>另外，反斜杠可以作为换行符，表示下一行是上一行的延续。还可以使用”””…”””或者’’’…’’’跨越多行。</p><ul><li>字符串可以使用 + 运算符串连接在一起，或者用 * 运算符重复：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'str'</span>+<span class="string">'ing'</span>,<span class="string">'my'</span>*<span class="number">3</span>)</span><br><span class="line">string mymymy</span><br></pre></td></tr></table></figure><p>Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少。</p><ul><li>注意，没有单独的字符类型，一个字符就是长度为1的字符串。 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'Python'</span></span><br><span class="line">print(word[<span class="number">0</span>],word[<span class="number">5</span>])</span><br><span class="line">P n</span><br><span class="line"></span><br><span class="line">print(word[<span class="number">-1</span>],word[<span class="number">-6</span>])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><p>还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量[头下标:尾下标]。</p><ul><li>截取的范围是前闭后开的，并且两个索引都可以省略： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'ilovepython'</span></span><br><span class="line">a = word[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">b = word[:]</span><br><span class="line">c = word[<span class="number">5</span>:]</span><br><span class="line">d = word[<span class="number">-10</span>:<span class="number">-6</span>]</span><br><span class="line">print(a,b,c,d)</span><br><span class="line">love ilovepython python love</span><br></pre></td></tr></table></figure><p>与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。<br> <strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><hr><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><ul><li>列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'him'</span>,<span class="number">25</span>,<span class="number">100</span>,<span class="string">'her'</span>]</span><br><span class="line">print(a)</span><br><span class="line">[<span class="string">'him'</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="string">'her'</span>]</span><br></pre></td></tr></table></figure><p>和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。详细的在这里就不赘述了。</p><ul><li>列表还支持串联操作，使用+操作符： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a + [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure><ul><li>与Python字符串不一样的是，列表中的元素是可以改变的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line">a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>]=[]    <span class="comment">#删除</span></span><br><span class="line">a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>List内置类很多方法，例如append()、pop()等等，在后面会讲到。<br> <strong>注意:</strong></p><ul><li>1、List写在中括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><hr><h2 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple(元组)"></a>Tuple(元组)</h2><p>元组（Tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。</p><ul><li>元组中的元素类型也可以不相同：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1992</span>,<span class="number">2018</span>,<span class="string">'physics'</span>,<span class="string">'math'</span>)</span><br><span class="line">print(a,type(a),len(a))</span><br><span class="line">(<span class="number">1992</span>, <span class="number">2018</span>, <span class="string">'physics'</span>, <span class="string">'math'</span>) &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt; 4</span></span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片。</p><ul><li>其实，可以把字符串看做一种特殊的元组：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(tup[<span class="number">0</span>],tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">tup[<span class="number">0</span>]= <span class="number">11</span>      <span class="comment">#修改元组元素的操作是非法的(不可修改)</span></span><br><span class="line"><span class="number">1</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><ul><li>构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()       <span class="comment">#空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,)    <span class="comment">#一个元组，需要在元素后面添加逗号</span></span><br><span class="line">print(tup1,tup2)</span><br><span class="line">() (<span class="number">20</span>,)</span><br></pre></td></tr></table></figure><ul><li>另外，元组也支持用+操作符：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup1,tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(tup1+tup2)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li>string、list和tuple都属于sequence(序列)。</li></ul><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法和列表一样。</li><li>3、注意构造包含0或1个元素的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><hr><h2 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a>Sets（集合）</h2><ul><li>集合（set）是一个无序不重复元素的集。</li><li><code>基本功能是进行成员关系测试和消除重复元素。</code></li><li>可以使用大括号或者set()函数创建set集合，注意：创建一个空集合必须用set()而不是 { }，因为{ }是用来创建一个空字典。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;<span class="string">'Tom'</span>,<span class="string">'Jim'</span>,<span class="string">'Mary'</span>,<span class="string">'Tom'</span>,<span class="string">'Jack'</span>,<span class="string">'Rose'</span>&#125;</span><br><span class="line">print(student)      <span class="comment">#重复的元素被自动去掉</span></span><br><span class="line">&#123;<span class="string">'Tom'</span>, <span class="string">'Rose'</span>, <span class="string">'Mary'</span>, <span class="string">'Jack'</span>, <span class="string">'Jim'</span>&#125;</span><br><span class="line"><span class="string">'Rose'</span> <span class="keyword">in</span> student   <span class="comment">#membership testing(成员测试)</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">a</span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line"></span><br><span class="line">a - b   <span class="comment">#a和b的差集</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line"></span><br><span class="line">a | b   <span class="comment">#a和b的并集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line"></span><br><span class="line">a &amp; b   <span class="comment">#a和b的交集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line">a ^ b   <span class="comment">#a和b中不同时存在的元素</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Dictionaries（字典）"><a href="#Dictionaries（字典）" class="headerlink" title="Dictionaries（字典）"></a>Dictionaries（字典）</h2><ul><li>字典（dictionaries）是Python中另一个非常有用的内置数据类型。</li><li>字典是一种映射类型（mapping type），它是一个无序的键：值对集合。</li><li>关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。</li><li>在同一个字典中，关键字还必须互不相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&#125;           <span class="comment">#创建空字典</span></span><br><span class="line">tel = &#123;<span class="string">'Jack'</span>:<span class="number">1557</span>,<span class="string">'Tom'</span>:<span class="number">1320</span>,<span class="string">'Rose'</span>:<span class="number">1886</span>&#125;</span><br><span class="line">tel</span><br><span class="line">&#123;<span class="string">'Jack'</span>: <span class="number">1557</span>, <span class="string">'Rose'</span>: <span class="number">1886</span>, <span class="string">'Tom'</span>: <span class="number">1320</span>&#125;</span><br><span class="line"></span><br><span class="line">tel[<span class="string">'Jack'</span>]        <span class="comment">#主要的操作：通过key查询</span></span><br><span class="line"><span class="number">1557</span></span><br><span class="line"><span class="keyword">del</span> tel[<span class="string">'Rose'</span>]     <span class="comment">#删除一个键值对</span></span><br><span class="line">tel[<span class="string">'Mary'</span>] = <span class="number">4127</span>  <span class="comment">#添加一个键值对</span></span><br><span class="line">tel</span><br><span class="line">&#123;<span class="string">'Jack'</span>: <span class="number">1557</span>, <span class="string">'Mary'</span>: <span class="number">4127</span>, <span class="string">'Tom'</span>: <span class="number">1320</span>&#125;</span><br><span class="line"></span><br><span class="line">list(tel.keys())    <span class="comment">#返回所有key组成的list</span></span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Tom'</span>, <span class="string">'Mary'</span>]</span><br><span class="line"></span><br><span class="line">sorted(tel.keys())  <span class="comment">#按key排序</span></span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Mary'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">'Tom'</span> <span class="keyword">in</span> tel        <span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">'Mary'</span> <span class="keyword">not</span> <span class="keyword">in</span> tel   <span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li>构造函数dict()直接从键值对sequence中构建字典，当然也可以进行推到，如下 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict([(<span class="string">'sape'</span>,<span class="number">4139</span>),(<span class="string">'guido'</span>,<span class="number">4127</span>),(<span class="string">'jack'</span>,<span class="number">4098</span>)])</span><br><span class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;x:x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"></span><br><span class="line">dict(sape=<span class="number">4139</span>,guido=<span class="number">4127</span>,jack=<span class="number">4098</span>)</span><br><span class="line">&#123;<span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</li></ul><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用{ }。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kafka文件存储机制</title>
      <link href="/kafka/2018/05/05/kafka%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6/"/>
      <url>/kafka/2018/05/05/kafka%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-kafka文件存储机制"><a href="#1-kafka文件存储机制" class="headerlink" title="1.kafka文件存储机制"></a>1.kafka文件存储机制</h1><p>Kafka部分名词解释如下：</p><ul><li>Broker：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群。</li><li>Topic：一类消息，例如page view日志、click日志等都可以以topic的形式存在，Kafka集群能够同时负责多个topic的分发。</li><li>Partition：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。</li><li>Segment：partition物理上由多个segment组成，下面2.2和2.3有详细说明。</li><li>offset：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset,用于partition唯一标识一条消息.</li></ul><p>分析过程分为以下4个步骤：</p><ul><li>topic中partition存储分布</li><li>partiton中文件存储方式</li><li>partiton中segment文件存储结构</li><li>在partition中如何通过offset查找message</li></ul><p>通过上述4过程详细分析，我们就可以清楚认识到kafka文件存储机制的奥秘。</p><h2 id="1-1-topic中partition存储分布"><a href="#1-1-topic中partition存储分布" class="headerlink" title="1.1 topic中partition存储分布"></a>1.1 topic中partition存储分布</h2><p>假设实验环境中Kafka集群只有一个broker，xxx/message-folder为数据文件存储根目录，在Kafka  broker中server.properties文件配置(参数log.dirs=xxx/message-folder)，例如创建2个topic名称分别为report_push、launch_info, partitions数量都为partitions=4 存储路径和目录规则为： xxx/message-folder </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|--report_push-0</span><br><span class="line">|--report_push-1</span><br><span class="line">|--report_push-2</span><br><span class="line">|--report_push-3</span><br><span class="line">|--launch_info-0</span><br><span class="line">|--launch_info-1</span><br><span class="line">|--launch_info-2</span><br><span class="line">|--launch_info-3</span><br></pre></td></tr></table></figure><p>在Kafka文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1。 如果是多broker分布情况，请参考<a href="http://blog.csdn.net/lizhitao/article/details/41778193" target="_blank" rel="noopener">kafka集群partition分布原理分析</a> </p><h2 id="1-2-partition中文件存储方式"><a href="#1-2-partition中文件存储方式" class="headerlink" title="1.2 partition中文件存储方式"></a>1.2 partition中文件存储方式</h2><p>下面示意图形象说明了partition中文件存储方式: </p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/kafka/kafka-1.jpg" alt="kafka-1"></p><ul><li>每个partion(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除。</li><li>每个partiton只需要支持顺序读写就行了，segment文件生命周期由服务端配置参数决定。</li></ul><p>这样做的好处就是能快速删除无用文件，有效提高磁盘利用率。</p><h2 id="1-3-partition中segment文件存储结构"><a href="#1-3-partition中segment文件存储结构" class="headerlink" title="1.3 partition中segment文件存储结构"></a>1.3 partition中segment文件存储结构</h2><p>从1.2节了解到Kafka文件系统partition存储方式，本节深入分析partion中segment file组成和物理结构。</p><ul><li>segment file组成：由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀”.index”和“.log”分别表示为segment索引文件、数据文件.</li><li>segment文件命名规则：partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。</li></ul><p>下面文件列表是笔者在Kafka broker上做的一个实验，创建一个topicXXX包含1  partition，设置每个segment大小为500MB,并启动producer向Kafka  broker写入大量数据,如下图所示segment文件列表形象说明了上述2个规则：</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/kafka/kafka-2.jpg" alt="kafka-2"></p><p>以上述图中一对segment file文件为例，说明segment中index&lt;—-&gt;data file对应关系物理结构如下： </p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/kafka/kafka-3.jpg" alt="kafka-3"></p><p>上述图中索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。<br>其中以索引文件中元数据3,497为例，依次在数据文件中表示第3个message(在全局partiton表示第368772个message)、以及该消息的物理偏移地址为497。</p><p>从上述图了解到segment data file由许多message组成，下面详细说明message物理结构如下：</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/kafka/kafka-4.jpg" alt="kafka-4"></p><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><table><thead><tr><th style="text-align:left">关键字</th><th>解释说明</th></tr></thead><tbody><tr><td style="text-align:left">8 byte offset</td><td>在parition(分区)内的每条消息都有一个有序的id号，这个id号被称为偏移(offset),它可以唯一确定每条消息在parition(分区)内的位置。即offset表示partiion的第多少message</td></tr><tr><td style="text-align:left">4 byte message size</td><td>message大小</td></tr><tr><td style="text-align:left">4 byte CRC32</td><td>用crc32校验message</td></tr><tr><td style="text-align:left">1 byte “magic”</td><td>表示本次发布Kafka服务程序协议版本号</td></tr><tr><td style="text-align:left">1 byte “attributes”</td><td>表示为独立版本、或标识压缩类型、或编码类型。</td></tr><tr><td style="text-align:left">4 byte key length</td><td>表示key的长度,当key为-1时，K byte key字段不填</td></tr><tr><td style="text-align:left">K byte key</td><td>可选</td></tr><tr><td style="text-align:left">value bytes payload</td><td>表示实际消息数据。</td></tr></tbody></table><h2 id="1-4-在partition中如何通过offset查找message"><a href="#1-4-在partition中如何通过offset查找message" class="headerlink" title="1.4 在partition中如何通过offset查找message"></a>1.4 在partition中如何通过offset查找message</h2><p>例如读取offset=368776的message，需要通过下面2个步骤查找。</p><ul><li>第一步查找segment file<br>上述图2为例，其中00000000000000000000.index表示最开始的文件，起始偏移量(offset)为0.第二个文件00000000000000368769.index的消息量起始偏移量为368770  = 368769 + 1.同样，第三个文件00000000000000737337.index的起始偏移量为737338=737337 +  1，其他后续文件依次类推，以起始偏移量命名并排序这些文件，只要根据offset <strong>二分查找</strong>文件列表，就可以快速定位到具体文件。<br>当offset=368776时定位到00000000000000368769.index|log</li><li>第二步通过segment file查找message<br>通过第一步定位到segment  file，当offset=368776时，依次定位到00000000000000368769.index的元数据物理位置和00000000000000368769.log的物理偏移地址，然后再通过00000000000000368769.log顺序查找直到offset=368776为止。</li></ul><p>从上述图3可知这样做的优点，segment index  file采取稀疏索引存储方式，它减少索引文件大小，通过mmap可以直接内存操作，稀疏索引为数据文件的每个对应message设置一个元数据指针,它比稠密索引节省了更多的存储空间，但查找起来需要消耗更多的时间。    </p><h1 id="2-Kafka文件存储机制-实际运行效果"><a href="#2-Kafka文件存储机制-实际运行效果" class="headerlink" title="2. Kafka文件存储机制-实际运行效果"></a>2. Kafka文件存储机制-实际运行效果</h1><p>实验环境：</p><ul><li>Kafka集群：由2台虚拟机组成</li><li>cpu：4核</li><li>物理内存：8GB</li><li>网卡：千兆网卡</li><li>jvm heap: 4GB</li><li>详细Kafka服务端配置及其优化请参考：<a href="http://blog.csdn.net/lizhitao/article/details/25667831" target="_blank" rel="noopener">kafka server.properties配置详解</a></li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/kafka/kafka-5.jpg" alt="kafka-5"></p><p>从上述图可以看出，Kafka运行时很少有大量读磁盘的操作，主要是定期批量写磁盘操作，因此操作磁盘很高效。这跟Kafka文件存储中读写message的设计是息息相关的。Kafka中读写message有如下特点:</p><p>写message</p><ul><li>消息从java堆转入page cache(即物理内存)。</li><li>由异步线程刷盘,消息从page cache刷入磁盘。</li></ul><p>读message</p><ul><li>消息直接从page cache转入socket发送出去。</li><li>当从page cache没有找到相应数据时，此时会产生磁盘IO,从磁<br>盘Load消息到page cache,然后直接从socket发出去</li></ul><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p> Kafka高效文件存储设计特点</p><ul><li>Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用。</li><li>通过索引信息可以快速定位message和确定response的最大大小。</li><li>通过index元数据全部映射到memory，可以避免segment file的IO磁盘操作。</li><li>通过索引文件稀疏存储，可以大幅降低index文件元数据占用空间大小。</li></ul>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3、Spark-RDD常用算子操作</title>
      <link href="/Spark/2018/04/27/3%E3%80%81Spark-RDD%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
      <url>/Spark/2018/04/27/3%E3%80%81Spark-RDD%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="RDD常用算子操作"><a href="#RDD常用算子操作" class="headerlink" title="RDD常用算子操作"></a>RDD常用算子操作</h1><ul><li><p>启动spark-shell 进行测试：</p></li><li><p>spark-shell –master spark://node-1:7077</p></li><li><h4 id="练习1：map、filter"><a href="#练习1：map、filter" class="headerlink" title="练习1：map、filter"></a>练习1：map、filter</h4></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过并行化生成rdd</span></span><br><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment">//对rdd1里的每一个元素乘2然后排序</span></span><br><span class="line"><span class="keyword">val</span> rdd2 = rdd1.map(_ * <span class="number">2</span>).sortBy(x =&gt; x, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">//过滤出大于等于5的元素</span></span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd2.filter(_ &gt;= <span class="number">5</span>)</span><br><span class="line"><span class="comment">//将元素以数组的方式在客户端显示</span></span><br><span class="line">rdd3.collect</span><br><span class="line">结果：</span><br><span class="line"><span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li><h4 id="练习2：flatMap"><a href="#练习2：flatMap" class="headerlink" title="练习2：flatMap"></a>练习2：flatMap</h4></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">Array</span>(<span class="string">"a b c"</span>, <span class="string">"d e f"</span>, <span class="string">"h i j"</span>))</span><br><span class="line"><span class="comment">//将rdd1里面的每一个元素先切分在压平</span></span><br><span class="line"><span class="keyword">val</span> rdd2 = rdd1.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">rdd2.collect</span><br><span class="line">结果：</span><br><span class="line"><span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(a, b, c, d, e, f, h, i, j)</span><br></pre></td></tr></table></figure><ul><li><h4 id="练习3：交集、并集"><a href="#练习3：交集、并集" class="headerlink" title="练习3：交集、并集"></a>练习3：交集、并集</h4></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">//求并集</span></span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.union(rdd2)</span><br><span class="line"><span class="comment">//求交集</span></span><br><span class="line"><span class="keyword">val</span> rdd4 = rdd1.intersection(rdd2)</span><br><span class="line"><span class="comment">//去重</span></span><br><span class="line">rdd3.distinct.collect</span><br><span class="line"><span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">rdd4.collect</span><br><span class="line"><span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li><h4 id="练习4：join、groupByKey"><a href="#练习4：join、groupByKey" class="headerlink" title="练习4：join、groupByKey"></a>练习4：join、groupByKey</h4></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>((<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"jerry"</span>, <span class="number">3</span>), (<span class="string">"kitty"</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>((<span class="string">"jerry"</span>, <span class="number">2</span>), (<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"shuke"</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment">//求join</span></span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.join(rdd2)</span><br><span class="line">rdd3.collect</span><br><span class="line"><span class="type">Array</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = <span class="type">Array</span>((tom,(<span class="number">1</span>,<span class="number">1</span>)), (jerry,(<span class="number">3</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="comment">//求并集</span></span><br><span class="line"><span class="keyword">val</span> rdd4 = rdd1 union rdd2</span><br><span class="line">rdd4.collect</span><br><span class="line"><span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((tom,<span class="number">1</span>), (jerry,<span class="number">3</span>), (kitty,<span class="number">2</span>), (jerry,<span class="number">2</span>), (tom,<span class="number">1</span>), (shuke,<span class="number">2</span>))</span><br><span class="line"><span class="comment">//按key进行分组</span></span><br><span class="line"><span class="keyword">val</span> rdd5=rdd4.groupByKey</span><br><span class="line">rdd5.collect</span><br><span class="line"><span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = <span class="type">Array</span>((tom,<span class="type">CompactBuffer</span>(<span class="number">1</span>, <span class="number">1</span>)), (shuke,<span class="type">CompactBuffer</span>(<span class="number">2</span>)), (kitty,<span class="type">CompactBuffer</span>(<span class="number">2</span>)), (jerry,<span class="type">CompactBuffer</span>(<span class="number">2</span>, <span class="number">3</span>)))</span><br></pre></td></tr></table></figure><ul><li><h4 id="练习5：cogroup"><a href="#练习5：cogroup" class="headerlink" title="练习5：cogroup"></a>练习5：cogroup</h4></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>((<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"tom"</span>, <span class="number">2</span>), (<span class="string">"jerry"</span>, <span class="number">3</span>), (<span class="string">"kitty"</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>((<span class="string">"jerry"</span>, <span class="number">2</span>), (<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"jim"</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment">//cogroup</span></span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.cogroup(rdd2)</span><br><span class="line"><span class="comment">//注意cogroup与groupByKey的区别</span></span><br><span class="line">rdd3.collect</span><br><span class="line"><span class="type">Array</span>[(<span class="type">String</span>, (<span class="type">Iterable</span>[<span class="type">Int</span>], <span class="type">Iterable</span>[<span class="type">Int</span>]))] = <span class="type">Array</span>((jim,(<span class="type">CompactBuffer</span>(),<span class="type">CompactBuffer</span>(<span class="number">2</span>))), (tom,(<span class="type">CompactBuffer</span>(<span class="number">2</span>, <span class="number">1</span>),<span class="type">CompactBuffer</span>(<span class="number">1</span>))), (jerry,(<span class="type">CompactBuffer</span>(<span class="number">3</span>),<span class="type">CompactBuffer</span>(<span class="number">2</span>))), (kitty,(<span class="type">CompactBuffer</span>(<span class="number">2</span>),<span class="type">CompactBuffer</span>())))</span><br></pre></td></tr></table></figure><ul><li><h4 id="练习6：reduce"><a href="#练习6：reduce" class="headerlink" title="练习6：reduce"></a>练习6：reduce</h4></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment">//reduce聚合</span></span><br><span class="line"><span class="keyword">val</span> rdd2 = rdd1.reduce(_ + _)</span><br><span class="line">rdd2.collect</span><br></pre></td></tr></table></figure><ul><li><h4 id="练习7：reduceByKey、sortByKey"><a href="#练习7：reduceByKey、sortByKey" class="headerlink" title="练习7：reduceByKey、sortByKey"></a>练习7：reduceByKey、sortByKey</h4></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>((<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"jerry"</span>, <span class="number">3</span>), (<span class="string">"kitty"</span>, <span class="number">2</span>),  (<span class="string">"shuke"</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>((<span class="string">"jerry"</span>, <span class="number">2</span>), (<span class="string">"tom"</span>, <span class="number">3</span>), (<span class="string">"shuke"</span>, <span class="number">2</span>), (<span class="string">"kitty"</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.union(rdd2)</span><br><span class="line"><span class="comment">//按key进行聚合</span></span><br><span class="line"><span class="keyword">val</span> rdd4 = rdd3.reduceByKey(_ + _)</span><br><span class="line">rdd4.collect</span><br><span class="line"><span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((tom,<span class="number">4</span>), (shuke,<span class="number">3</span>), (kitty,<span class="number">7</span>), (jerry,<span class="number">5</span>))</span><br><span class="line"><span class="comment">//按value的降序排序</span></span><br><span class="line"><span class="keyword">val</span> rdd5 = rdd4.map(t =&gt; (t._2, t._1)).sortByKey(<span class="literal">false</span>).map(t =&gt; (t._2, t._1))</span><br><span class="line">rdd5.collect</span><br><span class="line"><span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((kitty,<span class="number">7</span>), (jerry,<span class="number">5</span>), (tom,<span class="number">4</span>), (shuke,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><ul><li><h4 id="练习8：repartition、coalesce"><a href="#练习8：repartition、coalesce" class="headerlink" title="练习8：repartition、coalesce"></a>练习8：repartition、coalesce</h4></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="number">1</span> to <span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">//利用repartition改变rdd1分区数</span></span><br><span class="line"><span class="comment">//减少分区</span></span><br><span class="line">rdd1.repartition(<span class="number">2</span>).partitions.size</span><br><span class="line"><span class="comment">//增加分区</span></span><br><span class="line">rdd1.repartition(<span class="number">4</span>).partitions.size</span><br><span class="line"><span class="comment">//利用coalesce改变rdd1分区数</span></span><br><span class="line"><span class="comment">//减少分区</span></span><br><span class="line">rdd1.coalesce(<span class="number">2</span>).partitions.size</span><br><span class="line"></span><br><span class="line">注意：repartition可以增加和减少rdd中的分区数，coalesce只能减少rdd分区数，增加rdd分区数不会生效。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hive相关问题</title>
      <link href="/hive/2018/04/10/hive%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/hive/2018/04/10/hive%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spark-2-3-0-与-hive-2-1-1整合存在的问题"><a href="#1-spark-2-3-0-与-hive-2-1-1整合存在的问题" class="headerlink" title="1.spark 2.3.0 与 hive 2.1.1整合存在的问题"></a>1.spark 2.3.0 与 hive 2.1.1整合存在的问题</h1><p><strong><code>Hive Schema version 1.2.0 does not match metastore&#39;s schema version 2.1.0 Metastore is not upgraded or corrupt</code></strong></p><p>启动spark-sql日志显示上面错误，原因是，spark2.x之后默认支持与hive-1.2.0的整合，因此在与hive2.1.1的整合时，在hive-2.1.1的默认配置文件<code>hive-default.xml.template</code>中的<code>hive.metastore.schema.verification</code>默认为true,即默认开启版本校验，需要将该设置置为<code>false</code>.</p><h1 id="2-Spark与hive整合之后查询超过25个字段的表无法显示结果"><a href="#2-Spark与hive整合之后查询超过25个字段的表无法显示结果" class="headerlink" title="2. Spark与hive整合之后查询超过25个字段的表无法显示结果"></a>2. Spark与hive整合之后查询超过25个字段的表无法显示结果</h1><p><strong><code>WARN Utils: Truncated the string representation of a plan since it was too large. This behavior can be adjusted by setting &#39;spark.debug.maxToStringFields&#39; in SparkEnv.conf.</code></strong></p><p>在spark/conf目录下的spark-default.conf文件中添加下面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark.debug.maxToStringFields 10</span><br></pre></td></tr></table></figure><h1 id="3-hive提交任务后报错"><a href="#3-hive提交任务后报错" class="headerlink" title="3.hive提交任务后报错"></a>3.hive提交任务后报错</h1><ul><li>Invalid resource request, requested memory &lt; 0, or requested memory &gt; max configured, requestedMemory=1536, maxMemory=1024</li></ul><p>这两个配置需要调整大一些：yarn.scheduler.maximum-allocation-mb yarn.nodemanager.resource.memory-mb</p><p>或者将虚拟机内存调大</p>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4、Spark-SQL</title>
      <link href="/Spark/2018/04/02/4%E3%80%81Spark-SQL/"/>
      <url>/Spark/2018/04/02/4%E3%80%81Spark-SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="1-学习目标"><a href="#1-学习目标" class="headerlink" title="1. 学习目标"></a>1. 学习目标</h1><ul><li>目标1：掌握Spark SQL原理</li><li>目标2：掌握DataFrame/DataSet数据结构和使用方式</li><li>目标3：熟练使用Spark SQL完成计算任务</li></ul><h1 id="2-Spark-SQL"><a href="#2-Spark-SQL" class="headerlink" title="2. Spark SQL"></a>2. Spark SQL</h1><h2 id="2-1-Spark-SQL概述"><a href="#2-1-Spark-SQL概述" class="headerlink" title="2.1 Spark SQL概述"></a>2.1 Spark SQL概述</h2><h3 id="2-1-1-Spark-SQL的历史"><a href="#2-1-1-Spark-SQL的历史" class="headerlink" title="2.1.1 Spark SQL的历史"></a>2.1.1 Spark SQL的历史</h3><ul><li>Shark是一个为Spark设计的大规模数据仓库系统，它与Hive兼容。Shark建立在Hive的代码基础上，并通过将Hive的部分物理执行计划交换出来。这个方法使得Shark的用户可以加速Hive的查询，但是Shark继承了Hive的大且复杂的代码使得Shark很难优化和维护，同时Shark依赖于Spark的版本。随着我们遇到了性能优化的上限，以及集成SQL的一些复杂的分析功能，我们发现Hive的MapReduce设计的框架限制了Shark的发展。在2014年7月1日的Spark Summit上，Databricks宣布终止对Shark的开发，将重点放到Spark SQL上。</li></ul><h3 id="2-1-2-什么是Spark-SQL"><a href="#2-1-2-什么是Spark-SQL" class="headerlink" title="2.1.2 什么是Spark SQL"></a>2.1.2 什么是Spark SQL</h3><ul><li>Spark SQL是Spark用来处理结构化数据的一个模块，它提供了一个编程抽象叫做DataFrame并且作为分布式SQL查询引擎的作用</li><li>相比于Spark RDD API，Spark SQL包含了对结构化数据和在其上运算的更多信息，Spark SQL使用这些信息进行了额外的优化，使对结构化数据的操作更加高效和方便。</li><li>有多种方式去使用Spark SQL，包括<code>SQL、DataFrames API和Datasets API</code>。但无论是哪种API或者是编程语言，它们都是基于同样的执行引擎，因此你可以在不同的API之间随意切换，它们各有各的特点，看你喜欢那种风格。</li></ul><h3 id="2-1-3-Spark-SQL的特点"><a href="#2-1-3-Spark-SQL的特点" class="headerlink" title="2.1.3 Spark SQL的特点"></a>2.1.3 Spark SQL的特点</h3><ul><li>Hive，它是将Hive SQL转换成MapReduce然后提交到集群中去执行，大大简化了编写MapReduce程序的复杂性，由于MapReduce这种计算模型执行效率比较慢，所以Spark SQL应运而生，它是将Spark SQL转换成RDD，然后提交到集群中去运行，执行效率非常快！</li><li>1.易整合<ul><li>将sql查询与spark程序无缝混合，可以使用java、scala、python、R等语言的API操作。</li></ul></li><li>2.统一的数据访问<ul><li>以相同的方式连接到任何数据</li></ul></li><li>3.兼容Hive<ul><li>支持hiveSQL的语法</li></ul></li><li>4.标准的数据连接<ul><li>可以使用行业标准的JDBC连接操作关系型数据库</li></ul></li></ul><h2 id="2-2-DataFrame"><a href="#2-2-DataFrame" class="headerlink" title="2.2 DataFrame"></a>2.2 DataFrame</h2><h3 id="2-2-1-什么是DataFrame"><a href="#2-2-1-什么是DataFrame" class="headerlink" title="2.2.1 什么是DataFrame"></a>2.2.1 什么是DataFrame</h3><ul><li>DataFrame的前身是SchemaRDD，从Spark 1.3.0开始SchemaRDD更名为DataFrame。与SchemaRDD的主要区别是：DataFrame不再直接继承自RDD，而是自己实现了RDD的绝大多数功能。你仍旧可以在DataFrame上调用rdd方法将其转换为一个RDD。</li><li>在Spark中，DataFrame是一种以RDD为基础的分布式数据集，类似于传统数据库的二维表格，DataFrame带有Schema元信息，即DataFrame所表示的二维表数据集的每一列都带有名称和类型，但底层做了更多的优化。DataFrame可以从很多数据源构建，比如：已经存在的RDD、结构化文件、外部数据库、Hive表。</li></ul><h3 id="2-2-2-DataFrame与RDD的区别"><a href="#2-2-2-DataFrame与RDD的区别" class="headerlink" title="2.2.2 DataFrame与RDD的区别"></a>2.2.2 DataFrame与RDD的区别</h3><ul><li>RDD可看作是分布式的对象的集合，Spark并不知道对象的详细模式信息，DataFrame可看作是分布式的Row对象的集合，其提供了由列组成的详细模式信息，使得Spark SQL可以进行某些形式的执行优化。DataFrame和普通的RDD的逻辑框架区别如下所示：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-13.jpg" alt="spark-13"></p><ul><li>上图直观地体现了DataFrame和RDD的区别。</li><li>左侧的RDD[Person]虽然以Person为类型参数，但Spark框架本身不了解 Person类的内部结构。</li><li>而右侧的DataFrame却提供了详细的结构信息，使得Spark SQL可以清楚地知道该数据集中包含哪些列，每列的名称和类型各是什么，DataFrame多了数据的结构信息，即schema。这样看起来就像一张表了，DataFrame还配套了新的操作数据的方法，DataFrame API（如df.select())和SQL(select id, name fromxx_table where …)。</li><li><code>此外DataFrame还引入了off-heap</code>,意味着JVM堆以外的内存, 这些内存直接受操作系统管理（而不是JVM）。Spark能够以二进制的形式序列化数据(不包括结构)到off-heap中, 当要操作数据时, 就直接操作off-heap内存. 由于Spark理解schema, 所以知道该如何操作。</li><li>RDD是分布式的Java对象的集合。DataFrame是分布式的Row对象的集合。DataFrame除了提供了比RDD更丰富的算子以外，更重要的特点是提升执行效率、减少数据读取以及执行计划的优化。</li><li>有了DataFrame这个高一层的抽象后，我们处理数据更加简单了，甚至可以用SQL来处理数据了，对开发者来说，易用性有了很大的提升。</li><li>不仅如此，通过DataFrame API或SQL处理数据，会自动经过Spark 优化器（Catalyst）的优化，即使你写的程序或SQL不高效，也可以运行的很快。</li></ul><h3 id="2-2-3-DataFrame与RDD的优缺点"><a href="#2-2-3-DataFrame与RDD的优缺点" class="headerlink" title="2.2.3 DataFrame与RDD的优缺点"></a>2.2.3 DataFrame与RDD的优缺点</h3><ul><li>RDD的优缺点：<ul><li>优点:</li><li>（1）编译时类型安全 <ul><li>编译时就能检查出类型错误</li></ul></li><li>（2）面向对象的编程风格 <ul><li>直接通过对象调用方法的形式来操作数据</li></ul></li><li>缺点:</li><li>（1）序列化和反序列化的性能开销<ul><li>​无论是集群间的通信, 还是IO操作都需要对对象的结构和数据进行序列化和反序列化。</li></ul></li><li>（2）GC的性能开销 <ul><li>频繁的创建和销毁对象,势必会增加GC</li></ul></li></ul></li><li>DataFrame通过引入schema和off-heap（不在堆里面的内存，指的是除了不在堆的内存，使用操作系统上的内存），解决了RDD的缺点, Spark通过schame就能够读懂数据, 因此在通信和IO时就只需要序列化和反序列化数据, 而结构的部分就可以省略了；通过off-heap引入，可以快速的操作数据，避免大量的GC。但是却丢了RDD的优点，DataFrame不是类型安全的, API也不是面向对象风格的。</li></ul><h3 id="2-2-4-读取数据源创建DataFrame"><a href="#2-2-4-读取数据源创建DataFrame" class="headerlink" title="2.2.4 读取数据源创建DataFrame"></a>2.2.4 读取数据源创建DataFrame</h3><h4 id="读取文本文件创建DataFrame"><a href="#读取文本文件创建DataFrame" class="headerlink" title="读取文本文件创建DataFrame"></a>读取文本文件创建DataFrame</h4><ul><li>在spark2.0版本之前，Spark SQL中SQLContext是创建DataFrame和执行SQL的入口，可以利用hiveContext通过hive sql语句操作hive表数据，兼容hive操作，并且hiveContext继承自SQLContext。在spark2.0之后，这些都统一于SparkSession，SparkSession 封装了 SparkContext，SqlContext，通过SparkSession可以获取到SparkConetxt,SqlContext对象。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-14.jpg" alt="spark-14"></p><ul><li>（1）在本地创建一个文件，有三列，分别是id、name、age，用空格分隔，然后上传到hdfs上。person.txt内容为：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 zhangsan 20</span><br><span class="line">2 lisi 29</span><br><span class="line">3 wangwu 25</span><br><span class="line">4 zhaoliu 30</span><br><span class="line">5 tianqi 35</span><br><span class="line">6 kobe 40</span><br></pre></td></tr></table></figure><p>上传数据文件到HDFS上：</p><p>hdfs dfs -put person.txt /</p><ul><li>（2）在spark shell执行下面命令，读取数据，将每一行的数据使用列分隔符分割</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先执行 spark-shell --master local[2]</span><br><span class="line">val lineRDD=sc.textFile("/person.txt").map(_.split(" "))</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-15.jpg" alt="spark-15"></p><ul><li>（3）定义case class（相当于表的schema）</li></ul><p>case class Person(id:Int,name:String, age:Int)</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-16.jpg" alt="spark-16"></p><ul><li>（4）将RDD和case class关联</li></ul><p>val personRDD =lineRDD.map(x =&gt; Person(x(0).toInt, x(1), x(2).toInt))</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-17.jpg" alt="spark-17"></p><ul><li>（5）将RDD转换成DataFrame</li></ul><p>val personDF = personRDD.toDF</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-18.jpg" alt="spark-18"></p><ul><li>（6）对DataFrame进行处理</li></ul><p>personDF.show</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-19.jpg" alt="spark-19"></p><p>personDF.printSchema</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-20.jpg" alt="spark-20"></p><ul><li>（7）通过SparkSession构建DataFrame</li></ul><p>使用spark-shell中已经初始化好的SparkSession对象spark生成DataFrame<br>val dataFrame=spark.read.text(“/person.txt”)</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-21.jpg" alt="spark-21"></p><h4 id="读取json文件创建DataFrame"><a href="#读取json文件创建DataFrame" class="headerlink" title="读取json文件创建DataFrame"></a>读取json文件创建DataFrame</h4><ul><li><p>（1）数据文件</p><p>使用spark安装包下的</p><p>/hadoop/apps/server/spark/examples/src/main/resources/people.json文件</p></li><li><p>（2）在spark shell执行下面命令，读取数据</p></li></ul><p>val jsonDF=spark.read.json(“file:///hadoop/apps/server/spark/examples/src/main/resources/people.json”)</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-22.jpg" alt="spark-22"></p><ul><li>（3）接下来就可以使用DataFrame的函数操作</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-23.jpg" alt="spark-23"></p><h4 id="读取parquet列式存储格式文件创建DataFrame"><a href="#读取parquet列式存储格式文件创建DataFrame" class="headerlink" title="读取parquet列式存储格式文件创建DataFrame"></a>读取parquet列式存储格式文件创建DataFrame</h4><ul><li><p>（1）数据文件</p><p>使用spark安装包下的</p><p>/hadoop/apps/server/spark/examples/src/main/resources/users.parquet文件</p></li><li><p>（2）在spark shell执行下面命令，读取数据</p></li></ul><p>val parquetDF=spark.read.parquet(“file:///hadoop/apps/server/spark/examples/src/main/resources/users.parquet”)</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-24.jpg" alt="spark-24"></p><ul><li>（3）接下来就可以使用DataFrame的函数操作</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-25.jpg" alt="spark-25"></p><h2 id="2-3-DataFrame常用操作"><a href="#2-3-DataFrame常用操作" class="headerlink" title="2.3 DataFrame常用操作"></a>2.3 DataFrame常用操作</h2><h3 id="2-3-1-DSL风格语法"><a href="#2-3-1-DSL风格语法" class="headerlink" title="2.3.1 DSL风格语法"></a>2.3.1 DSL风格语法</h3><ul><li><p>DataFrame提供了一个领域特定语言(DSL)来操作结构化数据。</p><p>下面是一些使用示例</p></li><li><p>（1）查看DataFrame中的内容，通过调用show方法</p><p>personDF.show</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-26.jpg" alt="spark-26"></p></li><li><p>（2）查看DataFrame部分列中的内容</p></li></ul><p>查看name字段的数据<br>方法一：personDF.select(personDF.col(“name”)).show<br>方法二：personDF.select(“name”).show</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-27.jpg" alt="spark-27"></p><p>查看name和age字段数据</p><p>personDF.select(“name”,”age”).show</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-28.jpg" alt="spark-28"></p><ul><li>（3）打印DataFrame的Schema信息</li></ul><p>personDF.printSchema</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-29.jpg" alt="spark-29"></p><ul><li>（4）查询所有的name和age，并将age+1</li></ul><p><code>personDF.select($&quot;name&quot;,$&quot;age&quot;,$&quot;age&quot;+1).show</code></p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-30.jpg" alt="spark-30"></p><ul><li>（5）过滤age大于等于25的，使用filter方法过滤</li></ul><p>personDF.filter($”age”&gt;=25).show</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-31.jpg" alt="spark-31"></p><ul><li>（6）统计年龄大于25的人数</li></ul><p>personDF.filter($”age”&gt;=25).count()</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-32.jpg" alt="spark-32"></p><ul><li>按年龄进行分组并统计相同年龄的人数</li></ul><p>personDF.groupBy(“age”).count().show</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-33.jpg" alt="spark-33"></p><h3 id="2-3-2-SQL风格语法"><a href="#2-3-2-SQL风格语法" class="headerlink" title="2.3.2 SQL风格语法"></a>2.3.2 SQL风格语法</h3><ul><li>DataFrame的一个强大之处就是我们可以将它看作是一个关系型数据表，然后可以通过在程序中使用spark.sql() 来执行SQL语句查询，结果返回一个DataFrame。</li><li>如果想使用SQL风格的语法，需要将DataFrame注册成表,采用如下的方式：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personDF.registerTempTable("t_person")</span><br></pre></td></tr></table></figure><ul><li>（1）查询年龄最大的前两名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark.sql("<span class="keyword">select</span> * <span class="keyword">from</span> t_person <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">2</span><span class="string">").show</span></span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-34.jpg" alt="spark-34"></p><ul><li>（2）显示表的Schema信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark.sql("desc t_person").show</span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-35.jpg" alt="spark-35"></p><ul><li>（3）查询年龄大于25的人的信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark.sql("<span class="keyword">select</span> * <span class="keyword">from</span> t_person <span class="keyword">where</span> age &gt; <span class="number">25</span><span class="string">").show</span></span><br></pre></td></tr></table></figure><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-36.jpg" alt="spark-36"></p><h2 id="2-4-DataSet"><a href="#2-4-DataSet" class="headerlink" title="2.4 DataSet"></a>2.4 DataSet</h2><h3 id="2-4-1-什么是DataSet"><a href="#2-4-1-什么是DataSet" class="headerlink" title="2.4.1 什么是DataSet"></a>2.4.1 什么是DataSet</h3><ul><li>DataSet是分布式的数据集合，Dataset提供了强类型支持，也是在RDD的每行数据加了类型约束。DataSet是在Spark1.6中添加的新的接口。它集中了RDD的优点（强类型和可以用强大lambda函数）以及使用了Spark SQL优化的执行引擎。DataSet可以通过JVM的对象进行构建，可以用函数式的转换（map/flatmap/filter）进行多种操作。</li></ul><h3 id="2-4-2-DataFrame、DataSet、RDD的区别"><a href="#2-4-2-DataFrame、DataSet、RDD的区别" class="headerlink" title="2.4.2 DataFrame、DataSet、RDD的区别"></a>2.4.2 DataFrame、DataSet、RDD的区别</h3><ul><li>假设RDD中有两行数据长这样：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-37.jpg" alt="spark-37"></p><ul><li>DataFrame中的数据长这样：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-38.jpg" alt="spark-38"></p><ul><li>那么DataSet中的数据长这样：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-39.jpg" alt="spark-39"></p><ul><li>DataSet包含了DataFrame的功能，Spark2.0中两者统一，DataFrame表示为DataSet[Row]，即DataSet的子集。<ul><li>（1）DataSet可以在编译时检查类型</li><li>（2）并且是面向对象的编程接口</li></ul></li><li>相比DataFrame，Dataset提供了编译时类型检查，对于分布式程序来讲，提交一次作业太费劲了（要编译、打包、上传<em>、</em>运行），到提交到集群运行时才发现错误，这会浪费大量的时间，这也是引入Dataset的一个重要原因。</li></ul><h3 id="2-4-3-DataFrame与DataSet互相转换"><a href="#2-4-3-DataFrame与DataSet互相转换" class="headerlink" title="2.4.3 DataFrame与DataSet互相转换"></a>2.4.3 DataFrame与DataSet互相转换</h3><ul><li>DataFrame和DataSet可以相互转化。<ul><li>（1）DataFrame转为 DataSet<ul><li>df.as[ElementType] 这样可以把DataFrame转化为DataSet。</li></ul></li><li>（2）DataSet转为DataFrame <ul><li>ds.toDF() 这样可以把DataSet转化为DataFrame。</li></ul></li></ul></li></ul><h3 id="2-4-4-创建DataSet"><a href="#2-4-4-创建DataSet" class="headerlink" title="2.4.4 创建DataSet"></a>2.4.4 创建DataSet</h3><ul><li>（1）通过spark.createDataset创建</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-40.jpg" alt="spark-40"></p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-41.jpg" alt="spark-41"></p><ul><li>（2）通toDS方法生成DataSet</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-42.jpg" alt="spark-42"></p><ul><li>（3）通过DataFrame转化生成</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-43.jpg" alt="spark-43"></p><h1 id="3-以编程方式执行Spark-SQL查询"><a href="#3-以编程方式执行Spark-SQL查询" class="headerlink" title="3. 以编程方式执行Spark SQL查询"></a>3. 以编程方式执行Spark SQL查询</h1><h2 id="3-1-编写Spark-SQL程序实现RDD转换成DataFrame"><a href="#3-1-编写Spark-SQL程序实现RDD转换成DataFrame" class="headerlink" title="3.1 编写Spark SQL程序实现RDD转换成DataFrame"></a>3.1 编写Spark SQL程序实现RDD转换成DataFrame</h2><ul><li>前面我们学习了如何在Spark Shell中使用SQL完成查询，现在我们通过IDEA编写Spark SQL查询程序。</li><li>Spark官网提供了两种方法来实现从RDD转换得到DataFrame，第一种方法是利用反射机制，推导包含某种类型的RDD，通过反射将其转换为指定类型的DataFrame，适用于提前知道RDD的schema。第二种方法通过编程接口与RDD进行交互获取schema，并动态创建DataFrame，在运行时决定列及其类型。</li><li>首先在maven项目的pom.xml中添加SparkSQL的依赖。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-1-通过反射对端Schema"><a href="#3-1-1-通过反射对端Schema" class="headerlink" title="3.1.1 通过反射对端Schema"></a>3.1.1 通过反射对端Schema</h3><ul><li>Scala支持使用case class类型导入RDD转换为DataFrame，通过case class创建schema，case class的参数名称会被利用反射机制作为列名。这种RDD可以高效的转换为DataFrame并注册为表。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctyun.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * RDD转化成DataFrame：利用反射机制</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassSchema</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.构建sparkSession指定appName、master地址</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().appName(<span class="string">"CaseClassSchema"</span>).master(<span class="string">"local[2]"</span>).getOrCreate()</span><br><span class="line">    <span class="comment">//2.从sparkSession获取sparkContext对象</span></span><br><span class="line">    <span class="keyword">val</span> sc: <span class="type">SparkContext</span> = spark.sparkContext</span><br><span class="line">    <span class="comment">//3、加载数据</span></span><br><span class="line">    sc.setLogLevel(<span class="string">"WARN"</span>)</span><br><span class="line">    <span class="keyword">val</span> data: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"d:\\data\\people.txt"</span>)</span><br><span class="line">    <span class="comment">//4.切分每一行记录</span></span><br><span class="line">    <span class="keyword">val</span> arrayRDD: <span class="type">RDD</span>[<span class="type">Array</span>[<span class="type">String</span>]] = data.map(_.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.将RDD与Person类关联</span></span><br><span class="line">    <span class="keyword">val</span> personRDD: <span class="type">RDD</span>[<span class="type">Person</span>] = arrayRDD.map(x=&gt;<span class="type">Person</span>(x(<span class="number">0</span>).toInt,x(<span class="number">1</span>),x(<span class="number">2</span>).toInt))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.创建dataFrame,需要导入隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="keyword">val</span> personDF: <span class="type">DataFrame</span> = personRDD.toDF</span><br><span class="line">    <span class="comment">//todo-------------------DSL语法操作 start--------------</span></span><br><span class="line">    <span class="comment">//1、显示DataFrame的数据，默认显示20行</span></span><br><span class="line">    personDF.show()</span><br><span class="line">    <span class="comment">//2、显示DataFrame的schema信息</span></span><br><span class="line">    personDF.printSchema()</span><br><span class="line">    <span class="comment">//3、显示DataFrame记录数</span></span><br><span class="line">    println(personDF.count())</span><br><span class="line">    <span class="comment">//4、显示DataFrame的所有字段</span></span><br><span class="line">    personDF.columns.foreach(x=&gt;print(x + <span class="string">","</span>))</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//5、取出DataFrame的第一行记录</span></span><br><span class="line">    println(personDF.head())</span><br><span class="line">    <span class="comment">//6、显示DataFrame中name字段的所有值</span></span><br><span class="line">    personDF.select(<span class="string">"name"</span>).show()</span><br><span class="line">    <span class="comment">//7、过滤出DataFrame中年龄大于25的记录</span></span><br><span class="line">   personDF.filter($<span class="string">"age"</span>&gt;<span class="number">25</span>).show()</span><br><span class="line">    <span class="comment">//8、统计DataFrame中年龄大于25的人数</span></span><br><span class="line">    println(personDF.filter($<span class="string">"age"</span>&gt;<span class="number">25</span>).count())</span><br><span class="line">    <span class="comment">//9、统计DataFrame中按照年龄进行分组，求每个组的人数</span></span><br><span class="line">    personDF.groupBy($<span class="string">"age"</span>).count().show()</span><br><span class="line">    <span class="comment">//todo-------------------DSL语法操作 end-------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo--------------------SQL操作风格 start-----------</span></span><br><span class="line">    <span class="comment">//todo:将DataFrame注册成表</span></span><br><span class="line">    personDF.createTempView(<span class="string">"person"</span>)</span><br><span class="line">    <span class="comment">//todo:传入sql语句，进行操作</span></span><br><span class="line">    spark.sql(<span class="string">"select * from person"</span>).show()</span><br><span class="line">    spark.sql(<span class="string">"select count(1) from person where age &gt; 25"</span>).show()</span><br><span class="line">    spark.sql(<span class="string">"select age,count(age) from person group by age"</span>).show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo--------------------SQL操作风格 end-------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    sc.stop()</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">id: <span class="type">Int</span>, name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2-通过StructType直接指定Schema"><a href="#3-1-2-通过StructType直接指定Schema" class="headerlink" title="3.1.2 通过StructType直接指定Schema"></a>3.1.2 通过StructType直接指定Schema</h3><ul><li>当case class不能提前定义好时，可以通过以下三步创建DataFrame<ul><li>（1）将RDD转为包含Row对象的RDD</li><li>（2）基于StructType类型创建schema，与第一步创建的RDD相匹配</li><li>（3）通过sparkSession的createDataFrame方法对第一步的RDD应用schema创建DataFrame</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctyun.spark_sql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;<span class="type">IntegerType</span>, <span class="type">StringType</span>, <span class="type">StructField</span>, <span class="type">StructType</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * RDD转换成DataFrame：通过指定schema构建DataFrame</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparksqlSchema</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建SparkSession指定scheam和master</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().appName(<span class="string">"SparksqlSchema"</span>).master(<span class="string">"local[2]"</span>).getOrCreate()</span><br><span class="line">    <span class="comment">//2.通过sparksession创建sparkContext</span></span><br><span class="line">    <span class="keyword">val</span> sc: <span class="type">SparkContext</span> = spark.sparkContext</span><br><span class="line">    sc.setLogLevel(<span class="string">"WARN"</span>)</span><br><span class="line">    <span class="comment">//3.获取数据文件</span></span><br><span class="line">    <span class="keyword">val</span> data: <span class="type">RDD</span>[<span class="type">Array</span>[<span class="type">String</span>]] = sc.textFile(<span class="string">"d:\\data\\people.txt"</span>).map(_.split(<span class="string">" "</span>))</span><br><span class="line">    <span class="comment">//4.加载数据到row中</span></span><br><span class="line">    <span class="keyword">val</span> personRDD: <span class="type">RDD</span>[<span class="type">Row</span>] = data.map(x=&gt;<span class="type">Row</span>(x(<span class="number">0</span>).toInt,x(<span class="number">1</span>),x(<span class="number">2</span>).toInt))</span><br><span class="line">    <span class="comment">//5.创建schema</span></span><br><span class="line">    <span class="keyword">val</span> schema: <span class="type">StructType</span> = <span class="type">StructType</span>(<span class="type">Seq</span>(</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"id"</span>, <span class="type">IntegerType</span>, <span class="literal">false</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"name"</span>, <span class="type">StringType</span>, <span class="literal">false</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"age"</span>, <span class="type">IntegerType</span>, <span class="literal">false</span>)</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用personRDD与schema创建DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> personDF: <span class="type">DataFrame</span> = spark.createDataFrame(personRDD,schema)</span><br><span class="line">    <span class="comment">//8.DSL操作DataFrame数据结果</span></span><br><span class="line">    personDF.show()</span><br><span class="line">    personDF.printSchema()</span><br><span class="line">    <span class="comment">//9.将DataFrame注册成表</span></span><br><span class="line">    personDF.createTempView(<span class="string">"person"</span>)</span><br><span class="line">    <span class="comment">//sql语句操作</span></span><br><span class="line">    spark.sql(<span class="string">"select * from person"</span>).show()</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">"select count(1) from person where age &gt; 25"</span>).show()</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">"select age,count(1) from person group by age"</span>).show()</span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    sc.stop()</span><br><span class="line">    spark.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-编写Spark-SQL程序操作HiveContext"><a href="#3-2-编写Spark-SQL程序操作HiveContext" class="headerlink" title="3.2 编写Spark SQL程序操作HiveContext"></a>3.2 编写Spark SQL程序操作HiveContext</h2><ul><li>HiveContext是对应spark-hive这个项目,与hive有部分耦合, 支持hql,是SqlContext的子类，在Spark2.0之后，HiveContext和SqlContext在SparkSession进行了统一，可以通过操作SparkSession来操作HiveContext和SqlContext。</li></ul><h3 id="3-2-1-添加pom依赖"><a href="#3-2-1-添加pom依赖" class="headerlink" title="3.2.1 添加pom依赖"></a>3.2.1 添加pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-代码实现"><a href="#3-2-2-代码实现" class="headerlink" title="3.2.2 代码实现"></a>3.2.2 代码实现</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctyun.spark_sql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * SparkSQL操作hive sql</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HiveSupport</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建sparksession</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder()</span><br><span class="line">      .appName(<span class="string">"HiveSupport"</span>)</span><br><span class="line">      .master(<span class="string">"local[2]"</span>)</span><br><span class="line">        .config(<span class="string">"spark.sql.warehouse.dir"</span>,<span class="string">"d:\\data\\spark-warehouse"</span>)</span><br><span class="line">        .enableHiveSupport()<span class="comment">//开启支持hive</span></span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="comment">//2.通过sparksession创建sparkContext</span></span><br><span class="line">    <span class="keyword">val</span> sc: <span class="type">SparkContext</span> = spark.sparkContext</span><br><span class="line">    sc.setLogLevel(<span class="string">"WARN"</span>)</span><br><span class="line">    <span class="comment">//3.获取数据文件</span></span><br><span class="line">    <span class="keyword">val</span> data: <span class="type">RDD</span>[<span class="type">Array</span>[<span class="type">String</span>]] = sc.textFile(<span class="string">"d:\\data\\people.txt"</span>).map(_.split(<span class="string">" "</span>))</span><br><span class="line">    <span class="comment">//4.执行hive sql</span></span><br><span class="line">    spark.sql(<span class="string">"drop table default.person"</span>)</span><br><span class="line">    spark.sql(<span class="string">"create table if not exists default.person(id int,name string,age int)row format "</span> +</span><br><span class="line">      <span class="string">"delimited fields terminated by ' '"</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">"load data local inpath 'data/people.txt' into table default.person"</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">"select * from default.person"</span>).show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    sc.stop()</span><br><span class="line">    spark.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-数据源"><a href="#4-数据源" class="headerlink" title="4. 数据源"></a>4. 数据源</h1><h2 id="4-1-JDBC"><a href="#4-1-JDBC" class="headerlink" title="4.1 JDBC"></a>4.1 JDBC</h2><ul><li>Spark SQL可以通过JDBC从关系型数据库中读取数据的方式创建DataFrame，通过对DataFrame一系列的计算后，还可以将数据再写回关系型数据库中。</li></ul><h3 id="4-1-1-SparkSql从MySQL中加载数据"><a href="#4-1-1-SparkSql从MySQL中加载数据" class="headerlink" title="4.1.1 SparkSql从MySQL中加载数据"></a>4.1.1 SparkSql从MySQL中加载数据</h3><ul><li>SparkSQL代码：</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctyun.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">SaveMode</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sparksql从mysql中加载数据</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataFromMysql</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建SparkSession对象</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().appName(<span class="string">"DataFromMysql"</span>).master(<span class="string">"local[2]"</span>).getOrCreate()</span><br><span class="line">    <span class="comment">//2.创建properties对象，设置mysql连接</span></span><br><span class="line">    <span class="keyword">val</span> properties: <span class="type">Properties</span> = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">    <span class="keyword">val</span> url=<span class="string">"jdbc:mysql://localhost:3306/spark"</span></span><br><span class="line">    <span class="keyword">val</span> url1 = <span class="string">"jdbc:mysql://192.168.137.111:3306/spark"</span></span><br><span class="line">    properties.setProperty(<span class="string">"user"</span>,<span class="string">"root"</span>)</span><br><span class="line">    properties.setProperty(<span class="string">"password"</span>,<span class="string">"root"</span>)</span><br><span class="line">    <span class="comment">//3.读取mysql中的数据</span></span><br><span class="line">    <span class="keyword">val</span> personDF: <span class="type">DataFrame</span> = spark.read.jdbc(url1,<span class="string">"student"</span>,properties)</span><br><span class="line">    <span class="comment">//4.显示mysql中表的数据</span></span><br><span class="line">    <span class="comment">//personDF.show()</span></span><br><span class="line">    <span class="comment">//5.将获取到的mysql中的数据注册到spark中</span></span><br><span class="line">    personDF.createOrReplaceTempView(<span class="string">"student_tmp"</span>)</span><br><span class="line">    <span class="keyword">val</span> data: <span class="type">DataFrame</span> = spark.sql(<span class="string">"select distinct * from student_tmp order by id"</span>)</span><br><span class="line">    <span class="comment">//这里测试目标表数据比较多时   目标表将被清空，数据并未被覆盖</span></span><br><span class="line">    data.write.mode(<span class="string">"overwrite"</span>).jdbc(url,<span class="string">"student"</span>,properties)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    spark.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2、Spark-RDD原理及入门</title>
      <link href="/Spark/2018/04/01/2%E3%80%81Spark-RDD%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%A5%E9%97%A8/"/>
      <url>/Spark/2018/04/01/2%E3%80%81Spark-RDD%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SparkRDD学习目标"><a href="#一、SparkRDD学习目标" class="headerlink" title="一、SparkRDD学习目标"></a>一、SparkRDD学习目标</h1><ul><li>目标1：掌握RDD的原理</li><li>目标2：熟练使用RDD的算子完成计算任务</li><li>目标3：掌握RDD的宽窄依赖</li><li>目标4：掌握RDD的缓存机制</li><li>目标5：掌握划分stage</li></ul><h1 id="二、RDD基础入门"><a href="#二、RDD基础入门" class="headerlink" title="二、RDD基础入门"></a>二、RDD基础入门</h1><h2 id="2-SparkRDD概述"><a href="#2-SparkRDD概述" class="headerlink" title="2. SparkRDD概述"></a>2. SparkRDD概述</h2><h3 id="2-1-什么是RDD"><a href="#2-1-什么是RDD" class="headerlink" title="2.1 什么是RDD"></a>2.1 什么是RDD</h3><ul><li>RDD（Resilient DistributedDataset）叫做弹性分布式数据集，是Spark中最基本的数据抽象，它代表一个不可变、可分区、里面的元素可并行计算的集合。RDD具有数据流模型的特点：自动容错、位置感知性调度和可伸缩性。RDD允许用户在执行多个查询时显式地将数据缓存在内存中，后续的查询能够重用这些数据，这极大地提升了查询速度。</li><li><code>Dataset：</code>一个数据集合，用于存放数据的。</li><li><code>Distributed：</code>RDD中的数据是分布式存储的，可用于分布式计算。</li><li><code>Resilient：</code>RDD中的数据可以存储在内存中或者磁盘中。</li></ul><h3 id="2-2-RDD的属性"><a href="#2-2-RDD的属性" class="headerlink" title="2.2 RDD的属性"></a>2.2 RDD的属性</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* Internally, each RDD is characterized by five main properties:</span><br><span class="line">*</span><br><span class="line">*  - A list of partitions</span><br><span class="line">*  - A function for computing each split</span><br><span class="line">*  - A list of dependencies on other RDDs</span><br><span class="line">*  - Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)</span><br><span class="line">*  - Optionally, a list of preferred locations to compute each split on (e.g. block locations for</span><br><span class="line">*    an HDFS file)</span><br></pre></td></tr></table></figure><ul><li><code>A list of partitions</code>：一个分区（Partition）列表，数据集的基本组成单位。<ul><li>对于RDD来说，每个分区都会被一个计算任务处理，并决定并行计算的粒度。用户可以在创建RDD时指定RDD的分区个数，如果没有指定，那么就会采用默认值。（比如：读取HDFS上数据文件产生的RDD分区数跟block的个数相等）</li></ul></li><li><code>A function for computing eachsplit</code> ：一个计算每个分区的函数。<ul><li>Spark中RDD的计算是以分区为单位的，每个RDD都会实现compute函数以达到这个目的。</li></ul></li><li><code>A list of dependencies on otherRDDs</code>：一个RDD会依赖于其他多个RDD，RDD之间的依赖关系。<ul><li>RDD的每次转换都会生成一个新的RDD，所以RDD之间就会形成类似于流水线一样的前后依赖关系。在部分分区数据丢失时，Spark可以通过这个依赖关系重新计算丢失的分区数据，而不是对RDD的所有分区进行重新计算。</li></ul></li><li><p><code>Optionally, a Partitioner forkey-value RDDs</code> (e.g. to say that the RDD is hash-partitioned)：一个Partitioner，即RDD的分区函数（可选项）。</p><ul><li>当前Spark中实现了两种类型的分区函数，一个是基于哈希的HashPartitioner，另外一  个是基于范围的RangePartitioner。只有对于key-value的RDD，才会有Partitioner，非key-value的RDD的Parititioner的值是None。Partitioner函数决定了parent RDD Shuffle输出时的分区数量。</li></ul></li><li><code>Optionally, a list of preferredlocations to compute each split on</code> (e.g. block locations for an HDFS file)：一个列表，存储每个Partition的优先位置(可选项)。<ul><li>对于一个HDFS文件来说，这个列表保存的就是每个Partition所在的块的位置。按照“移动数据不如移动计算”的理念，Spark在进行任务调度的时候，会尽可能地将计算任务分配到其所要处理数据块的存储位置（spark进行任务分配的时候尽可能选择那些存有数据的worker节点来进行任务计算）。</li></ul></li></ul><h3 id="2-3-为什么会产生RDD"><a href="#2-3-为什么会产生RDD" class="headerlink" title="2.3 为什么会产生RDD?"></a>2.3 为什么会产生RDD?</h3><ul><li>传统的MapReduce虽然具有自动容错、平衡负载和可拓展性的优点，但是其最大缺点是采用非循环式的数据流模型，使得在迭代计算中要进行大量的磁盘IO操作。RDD正是解决这一缺点的抽象方法。</li><li>RDD是Spark提供的最重要的抽象的概念，它是一种具有容错机制的特殊集合，可以分布在集群的节点上，以函数式编程来操作集合，进行各种并行操作。可以把RDD的结果数据进行缓存，方便进行多次重用，避免重复计算。</li></ul><h3 id="2-4-RDD在Spark中的地位及作用"><a href="#2-4-RDD在Spark中的地位及作用" class="headerlink" title="2.4 RDD在Spark中的地位及作用"></a>2.4 RDD在Spark中的地位及作用</h3><ul><li>为什么会有Spark？<ul><li>因为传统的并行计算模型无法有效的解决迭代计算（iterative）和交互式计算（interactive）；而Spark的使命便是解决这两个问题，这也是他存在的价值和理由。</li></ul></li><li>Spark如何解决迭代计算？<ul><li>其主要实现思想就是RDD，把所有计算的数据保存在分布式的内存中。迭代计算通常情况下都是对同一个数据集做反复的迭代计算，数据在内存中将大大提升IO操作。这也是Spark涉及的核心：内存计算。</li></ul></li><li>Spark如何实现交互式计算？<ul><li>因为Spark是用scala语言实现的，Spark和scala能够紧密的集成，所以Spark可以完美的运用scala的解释器，使得其中的scala可以向操作本地集合对象一样轻松操作分布式数据集。</li></ul></li><li>Spark和RDD的关系？<ul><li>RDD是一种具有容错性、基于内存计算的抽象方法，RDD是Spark Core的底层核心，Spark则是这个抽象方法的实现。</li></ul></li></ul><h3 id="2-5-RDD创建"><a href="#2-5-RDD创建" class="headerlink" title="2.5 RDD创建"></a>2.5 RDD创建</h3><ul><li>由一个已经存在的Scala集合创建。<ul><li>val rdd1 =sc.parallelize(Array(1,2,3,4,5,6,7,8))</li></ul></li><li>由外部存储系统的文件创建。包括本地的文件系统，还有所有Hadoop支持的数据集，比如HDFS、Cassandra、HBase等。<ul><li>val rdd2 =sc.textFile(“/words.txt”)</li></ul></li><li>已有的RDD经过算子转换生成新的RDD<ul><li>valrdd3=rdd2.flatMap(_.split(“ “))</li></ul></li></ul><h2 id="3-SparkRDD编程API"><a href="#3-SparkRDD编程API" class="headerlink" title="3. SparkRDD编程API"></a>3. SparkRDD编程API</h2><h3 id="3-1-RDD的算子分类"><a href="#3-1-RDD的算子分类" class="headerlink" title="3.1 RDD的算子分类"></a>3.1 RDD的算子分类</h3><ul><li>Transformation（转换）：根据数据集创建一个新的数据集，计算后返回一个新RDD；例如：一个rdd进行map操作后生了一个新的rdd。</li><li>Action（动作）：对rdd结果计算后返回一个数值value给驱动程序；</li><li>例如：collect算子将数据集的所有元素收集完成返回给驱动程序。</li></ul><h3 id="3-2-Transformation"><a href="#3-2-Transformation" class="headerlink" title="3.2 Transformation"></a>3.2 Transformation</h3><ul><li>RDD中的所有转换都是延迟加载的，也就是说，它们并不会直接计算结果。相反的，它们只是记住这些应用到基础数据集（例如一个文件）上的转换动作。只有当发生一个要求返回结果给Driver的动作时，这些转换才会真正运行。这种设计让Spark更加有效率地运行。</li></ul><p><code>常用的Transformation：</code></p><table><thead><tr><th><strong>转换</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>map(func)</strong></td><td>返回一个新的RDD，该RDD由每一个输入元素经过func函数转换后组成</td></tr><tr><td><strong>filter(func)</strong></td><td>返回一个新的RDD，该RDD由经过func函数计算后返回值为true的输入元素组成</td></tr><tr><td><strong>flatMap(func)</strong></td><td>类似于map，但是每一个输入元素可以被映射为0或多个输出元素（所以func应该返回一个序列，而不是单一元素）</td></tr><tr><td><strong>mapPartitions(func)</strong></td><td>类似于map，但独立地在RDD的每一个分片上运行，因此在类型为T的RDD上运行时，func的函数类型必须是Iterator[T] =&gt; Iterator[U]</td></tr><tr><td><strong>mapPartitionsWithIndex(func)</strong></td><td>类似于mapPartitions，但func带有一个整数参数表示分片的索引值，因此在类型为T的RDD上运行时，func的函数类型必须是  (Int,  Interator[T]) =&gt; Iterator[U]</td></tr><tr><td><strong>union(otherDataset)</strong></td><td>对源RDD和参数RDD求并集后返回一个新的RDD</td></tr><tr><td><strong>intersection(otherDataset)</strong></td><td>对源RDD和参数RDD求交集后返回一个新的RDD</td></tr><tr><td><strong>distinct([numTasks]))</strong></td><td>对源RDD进行去重后返回一个新的RDD</td></tr><tr><td><strong>groupByKey([numTasks])</strong></td><td>在一个(K,V)的RDD上调用，返回一个(K, Iterator[V])的RDD</td></tr><tr><td><strong>reduceByKey(func, [numTasks])</strong></td><td>在一个(K,V)的RDD上调用，返回一个(K,V)的RDD，使用指定的reduce函数，将相同key的值聚合到一起，与groupByKey类似，reduce任务的个数可以通过第二个可选的参数来设置</td></tr><tr><td><strong>sortByKey([ascending], [numTasks])</strong></td><td>在一个(K,V)的RDD上调用，K必须实现Ordered接口，返回一个按照key进行排序的(K,V)的RDD</td></tr><tr><td><strong>sortBy(func,[ascending], [numTasks])</strong></td><td>与sortByKey类似，但是更灵活</td></tr><tr><td><strong>join(otherDataset, [numTasks])</strong></td><td>在类型为(K,V)和(K,W)的RDD上调用，返回一个相同key对应的所有元素对在一起的(K,(V,W))的RDD</td></tr><tr><td><strong>cogroup(otherDataset, [numTasks])</strong></td><td>在类型为(K,V)和(K,W)的RDD上调用，返回一个(K,(Iterable<v>,Iterable<w>))类型的RDD</w></v></td></tr><tr><td><strong>coalesce(numPartitions)</strong></td><td>减少 RDD 的分区数到指定值。</td></tr><tr><td><strong>repartition(numPartitions)</strong></td><td>重新给 RDD 分区</td></tr><tr><td><strong>repartitionAndSortWithinPartitions(partitioner)</strong></td><td>重新给 RDD 分区，并且每个分区内以记录的 key 排序</td></tr></tbody></table><h3 id="3-3-Action"><a href="#3-3-Action" class="headerlink" title="3.3 Action"></a>3.3 Action</h3><table><thead><tr><th><strong>动作</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>reduce(func)</strong></td><td>reduce将RDD中元素前两个传给输入函数，产生一个新的return值，新产生的return值与RDD中下一个元素（第三个元素）组成两个元素，再被传给输入函数，直到最后只有一个值为止。</td></tr><tr><td><strong>collect()</strong></td><td>在驱动程序中，以数组的形式返回数据集的所有元素</td></tr><tr><td><strong>count()</strong></td><td>返回RDD的元素个数</td></tr><tr><td><strong>first()</strong></td><td>返回RDD的第一个元素（类似于take(1)）</td></tr><tr><td><strong>take(n)</strong></td><td>返回一个由数据集的前n个元素组成的数组</td></tr><tr><td><strong>takeOrdered(n, [ordering])</strong></td><td>返回自然顺序或者自定义顺序的前 n 个元素</td></tr><tr><td><strong>saveAsTextFile(path)</strong></td><td>将数据集的元素以textfile的形式保存到HDFS文件系统或者其他支持的文件系统，对于每个元素，Spark将会调用toString方法，将它装换为文件中的文本</td></tr><tr><td><strong>saveAsSequenceFile(path)</strong></td><td>将数据集中的元素以Hadoop sequencefile的格式保存到指定的目录下，可以使HDFS或者其他Hadoop支持的文件系统。</td></tr><tr><td><strong>saveAsObjectFile(path)</strong></td><td>将数据集的元素，以 Java 序列化的方式保存到指定的目录下</td></tr><tr><td><strong>countByKey()</strong></td><td>针对(K,V)类型的RDD，返回一个(K,Int)的map，表示每一个key对应的元素个数。</td></tr><tr><td><strong>foreach(func)</strong></td><td>在数据集的每一个元素上，运行函数func</td></tr><tr><td><strong>foreachPartition(func)</strong></td><td>在数据集的每一个分区上，运行函数func</td></tr></tbody></table><h2 id="4-RDD的依赖关系"><a href="#4-RDD的依赖关系" class="headerlink" title="4.RDD的依赖关系"></a>4.RDD的依赖关系</h2><h3 id="4-1-RDD的依赖"><a href="#4-1-RDD的依赖" class="headerlink" title="4.1 RDD的依赖"></a>4.1 RDD的依赖</h3><ul><li>RDD和它依赖的父RDD的关系有两种不同的类型，即窄依赖（narrow dependency）和宽依赖（wide dependency）。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-54.jpg" alt="spark-54"></p><h3 id="4-2-窄依赖"><a href="#4-2-窄依赖" class="headerlink" title="4.2 窄依赖"></a>4.2 窄依赖</h3><ul><li>窄依赖指的是每一个父RDD的Partition最多被子RDD的一个Partition使用</li><li>总结：窄依赖我们形象的比喻为独生子女</li></ul><h3 id="4-3-宽依赖"><a href="#4-3-宽依赖" class="headerlink" title="4.3 宽依赖"></a>4.3 宽依赖</h3><ul><li>宽依赖指的是多个子RDD的Partition会依赖同一个父RDD的Partition</li><li>总结：宽依赖我们形象的比喻为超生 </li></ul><h3 id="4-4-Lineage-血统"><a href="#4-4-Lineage-血统" class="headerlink" title="4.4 Lineage(血统)"></a>4.4 Lineage(血统)</h3><ul><li>RDD只支持粗粒度转换，即只记录单个块上执行的单个操作。将创建RDD的一系列Lineage（即血统）记录下来，以便恢复丢失的分区。RDD的Lineage会记录RDD的元数据信息和转换行为，当该RDD的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的数据分区。</li></ul><h2 id="5-RDD的缓存"><a href="#5-RDD的缓存" class="headerlink" title="5.RDD的缓存"></a>5.RDD的缓存</h2><ul><li>Spark速度非常快的原因之一，就是在不同操作中可以在内存中持久化或者缓存数据集。当持久化某个RDD后，每一个节点都将把计算分区结果保存在内存中，对此RDD或衍生出的RDD进行的其他动作中重用。这使得后续的动作变得更加迅速。RDD相关的持久化和缓存，是Spark最重要的特征之一。可以说，缓存是Spark构建迭代式算法和快速交互式查询的关键。</li></ul><h3 id="5-1-RDD缓存方式"><a href="#5-1-RDD缓存方式" class="headerlink" title="5.1 RDD缓存方式"></a>5.1 RDD缓存方式</h3><ul><li>RDD通过persist方法或cache方法可以将前面的计算结果缓存，但是并不是这两个方法被调用时立即缓存，而是触发后面的action时，该RDD将会被缓存在计算节点的内存中，并供后面重用。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-55.jpg" alt="spark-55"></p><ul><li>通过查看源码发现cache最终也是调用了persist方法，默认的存储级别都是仅在内存存储一份，Spark的存储级别还有好多种，存储级别在object StorageLevel中定义的。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-56.jpg" alt="spark-56"></p><ul><li>缓存有可能丢失，或者存储于内存的数据由于内存不足而被删除，RDD的缓存容错机制保证了即使缓存丢失也能保证计算的正确执行。通过基于RDD的一系列转换，丢失的数据会被重算，由于RDD的各个Partition是相对独立的，因此只需要计算丢失的部分即可，并不需要重算全部Partition。</li></ul><h2 id="6-DAG的生成"><a href="#6-DAG的生成" class="headerlink" title="6.DAG的生成"></a>6.DAG的生成</h2><h3 id="6-1-什么是DAG"><a href="#6-1-什么是DAG" class="headerlink" title="6.1 什么是DAG"></a>6.1 什么是DAG</h3><ul><li>DAG(Directed Acyclic Graph)叫做有向无环图，原始的RDD通过一系列的转换就形成了DAG，根据RDD之间依赖关系的不同将DAG划分成不同的Stage(调度阶段)。对于窄依赖，partition的转换处理在一个Stage中完成计算。对于宽依赖，由于有Shuffle的存在，只能在parent RDD处理完成后，才能开始接下来的计算，因此宽依赖是划分Stage的依据。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-57.jpg" alt="spark-57"></p><h2 id="7-Spark任务调度"><a href="#7-Spark任务调度" class="headerlink" title="7. Spark任务调度"></a>7. Spark任务调度</h2><h3 id="7-1任务调度流程图"><a href="#7-1任务调度流程图" class="headerlink" title="7.1任务调度流程图"></a>7.1任务调度流程图</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-58.jpg" alt="spark-58"></p><ul><li>各个RDD之间存在着依赖关系，这些依赖关系就形成有向无环图DAG，DAGScheduler对这些依赖关系形成的DAG进行Stage划分，划分的规则很简单，从后往前回溯，遇到窄依赖加入本stage，遇见宽依赖进行Stage切分。完成了Stage的划分。DAGScheduler基于每个Stage生成TaskSet,并将TaskSet提交给TaskScheduler。TaskScheduler 负责具体的task调度,最后在Worker节点上启动task。</li></ul><h3 id="7-2-DAGScheduler"><a href="#7-2-DAGScheduler" class="headerlink" title="7.2 DAGScheduler"></a>7.2 DAGScheduler</h3><ul><li>（1）DAGScheduler对DAG有向无环图进行Stage划分。</li><li>（2）记录哪个RDD或者 Stage 输出被物化（缓存），通常在一个复杂的shuffle之后，通常物化一下(cache、persist)，方便之后的计算。</li><li>（3）重新提交shuffle输出丢失的stage（stage内部计算出错）给TaskScheduler</li><li>（4）将 Taskset 传给底层调度器<ul><li>spark-cluster TaskScheduler</li><li>yarn-cluster YarnClusterScheduler</li><li>yarn-client YarnClientClusterScheduler</li></ul></li></ul><h3 id="7-3-TaskScheduler"><a href="#7-3-TaskScheduler" class="headerlink" title="7.3 TaskScheduler"></a>7.3 TaskScheduler</h3><ul><li>（1）为每一个TaskSet构建一个TaskSetManager 实例管理这个TaskSet 的生命周期</li><li>（2）数据本地性决定每个Task最佳位置</li><li>（3）提交 taskset( 一组task) 到集群运行并监控</li><li>（4）推测执行，碰到计算缓慢任务需要放到别的节点上重试</li><li>（5）重新提交Shuffle输出丢失的Stage给DAGScheduler</li></ul><h1 id="三、RDD容错机制之checkpoint"><a href="#三、RDD容错机制之checkpoint" class="headerlink" title="三、RDD容错机制之checkpoint"></a>三、RDD容错机制之checkpoint</h1><h2 id="10-checkpoint是什么"><a href="#10-checkpoint是什么" class="headerlink" title="10. checkpoint是什么"></a>10. checkpoint是什么</h2><ul><li>（1）、Spark 在生产环境下经常会面临transformation的RDD非常多（例如一个Job中包含1万个RDD）或者具体transformation的RDD本身计算特别复杂或者耗时（例如计算时长超过1个小时），这个时候就要考虑对计算结果数据持久化保存；</li><li>（2）、Spark是擅长多步骤迭代的，同时擅长基于Job的复用，这个时候如果能够对曾经计算的过程产生的数据进行复用，就可以极大的提升效率；</li><li>（3）、如果采用persist把数据放在内存中，虽然是快速的，但是也是最不可靠的；如果把数据放在磁盘上，也不是完全可靠的！<strong>例如磁盘会损坏，系统管理员可能清空磁盘</strong>。</li><li>（4）、Checkpoint的产生就是为了相对而言更加可靠的持久化数据，在Checkpoint的时候可以指定把数据放在本地，并且是多副本的方式，但是在生产环境下是放在HDFS上，这就天然的借助了HDFS高容错、高可靠的特征来完成了最大化的可靠的持久化数据的方式；</li><li>假如进行一个1万个算子操作，在9000个算子的时候persist，数据还是有可能丢失的，但是如果checkpoint，数据丢失的概率几乎为0。</li></ul><h2 id="11-checkpoint原理机制"><a href="#11-checkpoint原理机制" class="headerlink" title="11.checkpoint原理机制"></a>11.checkpoint原理机制</h2><ul><li>（1）当RDD使用cache机制从内存中读取数据，如果数据没有读到，会使用checkpoint机制读取数据。此时如果没有checkpoint机制，那么就需要找到父RDD重新计算数据了，因此checkpoint是个很重要的容错机制。checkpoint就是对于一个RDD <a href="">chain</a>（链）如果后面需要反复使用某些中间结果RDD，可能因为一些故障导致该中间数据丢失，那么就可以针对该RDD启动checkpoint机制，使用checkpoint首先需要调用sparkContext的setCheckpointDir方法，设置一个容错文件系统目录，比如hdfs，然后对RDD调用checkpoint方法。之后在RDD所处的job运行结束后，会启动一个单独的job来将checkpoint过的数据写入之前设置的文件系统持久化，进行高可用。所以后面的计算在使用该RDD时，如果数据丢失了，但是还是可以从它的checkpoint中读取数据，不需要重新计算。</li><li>（2）persist或者cache与checkpoint的区别在于,前者持久化只是将数据保存在BlockManager中但是其lineage是不变的，但是后者checkpoint执行完后，rdd已经没有依赖RDD，只有一个checkpointRDD，checkpoint之后，RDD的lineage就改变了。persist或者cache持久化的数据丢失的可能性更大，因为可能磁盘或内存被清理，但是checkpoint的数据通常保存到hdfs上，放在了高容错文件系统。</li></ul><h1 id="四、Spark运行架构"><a href="#四、Spark运行架构" class="headerlink" title="四、Spark运行架构"></a>四、Spark运行架构</h1><h2 id="12-Spark运行基本流程"><a href="#12-Spark运行基本流程" class="headerlink" title="12. Spark运行基本流程"></a>12. Spark运行基本流程</h2><ul><li>Spark运行基本流程参见下面示意图：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-59.jpg" alt="spark-59"></p><p>–executor-memory 1g  –total-executor-cores 2</p><p>1)      构建Spark Application的运行环境（启动SparkContext），SparkContext向资源管理器（可以是Standalone、Mesos或YARN）注册并申请运行Executor资源；</p><p>2)     资源管理器分配Executor资源并启动Executor，Executor运行情况将随着心跳发送到资源管理器上；</p><p>3)    SparkContext构建成DAG图，将DAG图分解成Stage，并把Taskset发送给Task Scheduler。Executor向SparkContext申请Task，TaskScheduler将Task发放给Executor运行同时SparkContext将应用程序代码发放给Executor。</p><p>4)    Task在Executor上运行，运行完毕释放所有资源。</p><h2 id="13-Spark运行架构特点"><a href="#13-Spark运行架构特点" class="headerlink" title="13. Spark运行架构特点"></a>13. Spark运行架构特点</h2><ul><li>Spark运行架构特点：<ul><li>每个Application获取专属的executor进程，该进程在Application期间一直驻留，并以多线程方式运行tasks。</li><li>Spark任务与资源管理器无关，只要能够获取executor进程，并能保持相互通信就可以了。</li><li>提交SparkContext的Client应该靠近Worker节点（运行Executor的节点)，最好是在同一个Rack里，因为Spark程序运行过程中SparkContext和Executor之间有大量的信息交换；如果想在远程集群中运行，最好使用RPC将SparkContext提交给集群，不要远离Worker运行SparkContext。</li><li>Task采用了数据本地性和推测执行的优化机制。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1、Spark-安装及入门</title>
      <link href="/Spark/2018/03/30/1%E3%80%81Spark-%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%A5%E9%97%A8/"/>
      <url>/Spark/2018/03/30/1%E3%80%81Spark-%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-学习目标"><a href="#1-学习目标" class="headerlink" title="1. 学习目标"></a>1. 学习目标</h1><ul><li>目标1：熟悉Spark相关概念</li><li>目标2：搭建一个Spark集群</li><li>目标3：编写简单的Spark应用程序</li></ul><h1 id="2-Spark概述"><a href="#2-Spark概述" class="headerlink" title="2. Spark概述"></a>2. Spark概述</h1><h2 id="2-1-spark是什么"><a href="#2-1-spark是什么" class="headerlink" title="2.1 spark是什么"></a>2.1 spark是什么</h2><ul><li>Spark是一种快速、通用、可扩展的大数据分析引擎，2009年诞生于加州大学伯克利分校AMPLab，2010年开源，2013年6月成为Apache孵化项目，2014年2月成为Apache顶级项目。目前，Spark生态系统已经发展成为一个包含多个子项目的集合，其中包含SparkSQL、Spark Streaming、GraphX、MLlib等子项目，Spark是基于内存计算的大数据并行计算框架。Spark基于内存计算，提高了在大数据环境下数据处理的实时性，同时保证了高容错性和高可伸缩性，允许用户将Spark部署在大量廉价硬件之上，形成集群。Spark得到了众多大数据公司的支持，这些公司包括Hortonworks、IBM、Intel、Cloudera、MapR、Pivotal、百度、阿里、腾讯、京东、携程、优酷土豆。当前百度的Spark已应用于凤巢、大搜索、直达号、百度大数据等业务；阿里利用GraphX构建了大规模的图计算和图挖掘系统，实现了很多生产系统的推荐算法；腾讯Spark集群达到8000台的规模，是当前已知的世界上最大的Spark集群。</li><li>Spark是一个开源的类似于Hadoop MapReduce的通用的并行计算框架，Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Spark中的Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。</li></ul><p><code>Spark是MapReduce的替代方案，而且兼容HDFS、Hive，可融入Hadoop的生态系统，以弥补MapReduce的不足。</code></p><h2 id="2-2-Spark特点"><a href="#2-2-Spark特点" class="headerlink" title="2.2 Spark特点"></a>2.2 Spark特点</h2><h3 id="2-2-1-块"><a href="#2-2-1-块" class="headerlink" title="2.2.1 块"></a>2.2.1 块</h3><ul><li>与Hadoop的MapReduce相比，Spark基于内存的运算要快100倍以上，基于硬盘的运算也要快10倍以上。Spark实现了高效的DAG执行引擎，可以通过基于内存来高效处理数据流。<ul><li>spark任务中间结果数据可以不落地，直接保存在内存中</li><li>在MapReduce任务中，如果当前有100task，对应的会产生100个进程去运行（MapReduce是以进程的方式去运行任务）</li><li>在spark任务中，如果当前有100个task，对应它只需要开启100个线程去运行（spark是以线程的方式运行任务）</li></ul></li></ul><h3 id="2-2-2-易用"><a href="#2-2-2-易用" class="headerlink" title="2.2.2 易用"></a>2.2.2 易用</h3><ul><li>Spark支持Java、Python和Scala的API，还支持超过80种高级算法，使用户可以快速构建不同的应用。而且Spark支持交互式的Python和Scala的shell，可以非常方便地在这些shell中使用Spark集群来验证解决问题的方法。</li></ul><h3 id="2-2-3-通用"><a href="#2-2-3-通用" class="headerlink" title="2.2.3 通用"></a>2.2.3 通用</h3><ul><li>Spark提供了统一的解决方案。Spark可以用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）。这些不同类型的处理都可以在同一个应用中无缝使用。Spark统一的解决方案非常具有吸引力，毕竟任何公司都想用统一的平台去处理遇到的问题，减少开发和维护的人力成本和部署平台的物力成本。</li></ul><h3 id="2-2-4-兼容性"><a href="#2-2-4-兼容性" class="headerlink" title="2.2.4 兼容性"></a>2.2.4 兼容性</h3><ul><li>Spark可以非常方便地与其他的开源产品进行融合。比如，Spark可以使用Hadoop的YARN和Apache Mesos作为它的资源管理和调度器，并且可以处理所有Hadoop支持的数据，包括HDFS、HBase和Cassandra等。这对于已经部署Hadoop集群的用户特别重要，因为不需要做任何数据迁移就可以使用Spark的强大处理能力。Spark也可以不依赖于第三方的资源管理和调度器，它实现了Standalone作为其内置的资源管理和调度框架，这样进一步降低了Spark的使用门槛，使得所有人都可以非常容易地部署和使用Spark。此外，Spark还提供了在EC2上部署Standalone的Spark集群的工具。</li></ul><h1 id="3-Spark集群安装"><a href="#3-Spark集群安装" class="headerlink" title="3. Spark集群安装"></a>3. Spark集群安装</h1><ul><li>在这之前需要搭建好对应版本的hadoop集群</li><li>解压安装包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf spark-2.3.0-bin-hadoop2.7.tgz</span><br></pre></td></tr></table></figure><ul><li>配置环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export SPARK_HOME=/hadoop/apps/server/spark</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim spark-ecv.sh 修改文件（先把spark-env.sh.template重命名为spark-env.sh）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>配置java环境变量</span><br><span class="line">export JAVA_HOME=/hadoop/apps/server/jdk1.8.0_144</span><br><span class="line"><span class="meta">#</span>指定spark老大Master的IP</span><br><span class="line">export SPARK_MASTER_HOST=node-1</span><br><span class="line"><span class="meta">#</span>指定spark老大Master的端口</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"></span><br><span class="line">vim slaves 修改文件（先把slaves.template重命名为slaves）</span><br><span class="line"></span><br><span class="line">node-2 </span><br><span class="line">node-3</span><br></pre></td></tr></table></figure><ul><li>拷贝配置文件到其他主机<ul><li>通过scp命令将spark的安装目录拷贝到其他机器上</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp -r spark/ node-2:$PWD</span><br><span class="line">scp -r spark/ node-3:$PWD</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ul><li>启动spark</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在主节点上启动spark</span><br><span class="line"><span class="meta">$</span>SPARK_HOME/sbin/start-all.sh</span><br></pre></td></tr></table></figure><ul><li>停止spark</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在主节点上停止spark集群</span><br><span class="line"><span class="meta">$</span>SPARK_HOME/sbin/stop-all.sh</span><br></pre></td></tr></table></figure><ul><li>spark的web界面<ul><li>正常启动spark集群后，可以通过访问node-1:8080查看spark的web界面，查看相关信息。</li></ul></li></ul><h1 id="4-Spark-HA高可用集群"><a href="#4-Spark-HA高可用集群" class="headerlink" title="4. Spark HA高可用集群"></a>4. Spark HA高可用集群</h1><h2 id="4-1-高可用部署说明"><a href="#4-1-高可用部署说明" class="headerlink" title="4.1 高可用部署说明"></a>4.1 高可用部署说明</h2><ul><li>SparkStandalone集群是Master-Slaves架构的集群模式，和大部分的Master-Slaves结构集群一样，存在着Master单点故障的问题。如何解决这个单点故障的问题，Spark提供了两种方案：<ul><li>（1）基于文件系统的单点恢复(Single-NodeRecovery with Local File System)。<ul><li>主要用于开发或测试环境。当spark提供目录保存spark Application和worker的注册信息，并将他们的恢复状态写入该目录中，这时，一旦Master发生故障，就可以通过重新启动Master进程（sbin/start-master.sh），恢复已运行的spark Application和worker的注册信息。</li></ul></li><li>（2）基于zookeeper的StandbyMasters(Standby Masters with ZooKeeper)。<ul><li>用于生产模式。其基本原理是通过zookeeper来选举一个Master，其他的Master处于Standby状态。将spark集群连接到同一个ZooKeeper实例并启动多个Master，利用zookeeper提供的选举和状态保存功能，可以使一个Master被选举成活着的master，而其他Master处于Standby状态。如果现任Master死去，另一个Master会通过选举产生，并恢复到旧的Master状态，然后恢复调度。整个恢复过程可能要1-2分钟。</li></ul></li></ul></li></ul><h2 id="4-2-基于zookeeper的Spark-HA高可用集群部署"><a href="#4-2-基于zookeeper的Spark-HA高可用集群部署" class="headerlink" title="4.2 基于zookeeper的Spark HA高可用集群部署"></a>4.2 基于zookeeper的Spark HA高可用集群部署</h2><ul><li>该HA方案使用起来很简单，首先需要搭建一个zookeeper集群，然后启动zooKeeper集群，最后在不同节点上启动Master。具体配置如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) vim spark-env.sh</span><br><span class="line">注释掉export SPARK_MASTER_HOST=node-1</span><br><span class="line">(2) 在spark-env.sh添加SPARK_DAEMON_JAVA_OPTS，内容如下：</span><br><span class="line">export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER  -Dspark.deploy.zookeeper.url=node-1:2181,node-2:2181,node-3:2181  -Dspark.deploy.zookeeper.dir=/spark"</span><br></pre></td></tr></table></figure><p><strong><code>参数说明</code></strong></p><p><code>spark.deploy.recoveryMode</code>：恢复模式（Master重新启动的模式）                </p><p>​    有三种：(1)ZooKeeper(2) FileSystem (3)NONE</p><p><code>spark.deploy.zookeeper.url</code>：ZooKeeper的Server地址</p><p><code>spark.deploy.zookeeper.dir</code>：保存集群元数据信息的文件、目录。</p><p>​    包括Worker，Driver和Application。</p><p><code>注意：</code></p><ul><li>在普通模式下启动spark集群，只需要在主机上面执行start-all.sh 就可以了。</li><li>在高可用模式下启动spark集群，先需要在任意一台节点上启动start-all.sh命令。然后在另外一台节点上单独启动master。命令start-master.sh。</li></ul><h1 id="5-Spark角色介绍"><a href="#5-Spark角色介绍" class="headerlink" title="5. Spark角色介绍"></a>5. Spark角色介绍</h1><ul><li>Spark是基于内存计算的大数据并行计算框架。因为其基于内存计算，比Hadoop中MapReduce计算框架具有更高的实时性，同时保证了高效容错性和可伸缩性。从2009年诞生于AMPLab到现在已经成为Apache顶级开源项目，并成功应用于商业集群中，学习Spark就需要了解其架构。</li><li>Spark架构图如下：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-1.jpg" alt="spark-1"></p><ul><li>Spark架构使用了分布式计算中master-slave模型，master是集群中含有master进程的节点，slave是集群中含有worker进程的节点。<ul><li>Driver Program ：运⾏main函数并且新建SparkContext的程序。</li><li>Application：基于Spark的应用程序，包含了driver程序和集群上的executor。</li><li>Cluster Manager：指的是在集群上获取资源的外部服务。目前有三种类型<ul><li>（1）Standalone:spark原生的资源管理，由Master负责资源的分配</li><li>（2）ApacheMesos:与hadoop MR兼容性良好的一种资源调度框架</li><li>（3）HadoopYarn: 主要是指Yarn中的ResourceManager</li></ul></li><li>Worker Node： 集群中任何可以运行Application代码的节点，在Standalone模式中指的是通过slaves文件配置的Worker节点，在Spark on Yarn模式下就是NodeManager节点</li><li>Executor：是在一个worker node上为某应⽤启动的⼀个进程，该进程负责运⾏行任务，并且负责将数据存在内存或者磁盘上。每个应⽤都有各自独立的executor。</li><li>Task ：被送到某个executor上的工作单元。</li></ul></li></ul><h1 id="6-初识Spark程序"><a href="#6-初识Spark程序" class="headerlink" title="6. 初识Spark程序"></a>6. 初识Spark程序</h1><h2 id="6-1-执行第一个spark程序"><a href="#6-1-执行第一个spark程序" class="headerlink" title="6.1 执行第一个spark程序"></a>6.1 执行第一个spark程序</h2><ul><li>普通模式提交任务：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--class org.apache.spark.examples.JavaSparkPi \</span><br><span class="line">--master spark://node-1:7077 \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 1 \</span><br><span class="line">examples/jars/spark-examples_2.11-2.3.0.jar \</span><br><span class="line">100</span><br></pre></td></tr></table></figure><ul><li>该算法是利用蒙特·卡罗算法求圆周率PI，通过计算机模拟大量的随机数，最终会计算出比较精确的π。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-2.jpg" alt="spark-2"></p><h2 id="6-2-启动Spark-Shell"><a href="#6-2-启动Spark-Shell" class="headerlink" title="6.2 启动Spark-Shell"></a>6.2 启动Spark-Shell</h2><ul><li>spark-shell是Spark自带的交互式Shell程序，方便用户进行交互式编程，用户可以在该命令行下用scala编写spark程序。</li></ul><h3 id="6-2-1-运行spark-shell-–master-local-N-读取本地文件"><a href="#6-2-1-运行spark-shell-–master-local-N-读取本地文件" class="headerlink" title="6.2.1 运行spark-shell –master  local[N]读取本地文件"></a>6.2.1 运行spark-shell –master  local[N]读取本地文件</h3><ul><li><p>单机模式：通过本地N个线程跑任务，只运行一个SparkSubmit进程。</p></li><li><p>需求：读取本地文件，实现文件内的单词计数，本地文件words.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hello hadoop hadoop</span><br><span class="line">hello flume storm</span><br><span class="line">hello hadoop kafka storm</span><br><span class="line">spark spark sqoop</span><br><span class="line">hello storm spark</span><br><span class="line">hadoop hello flume</span><br></pre></td></tr></table></figure></li><li><p>运行spark-shell –master local[2]</p></li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-3.jpg" alt="spark-3"></p><ul><li>编写scala代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile("file:///home/hadoop/aa.txt").flatMap(_.sp)lit(" ")).map((_,1)).reduceByKey(_+_).collect</span><br></pre></td></tr></table></figure><p><code>代码说明：</code></p><p>sc：Spark-Shell中已经默认将SparkContext类初始化为对象sc。用户代码如果需要用到，则直接应用sc即可。</p><p>textFile:读取数据文件</p><p>flatMap:对文件中的每一行数据进行压平切分,这里按照空格分隔。</p><p>map:对出现的每一个单词记为1（word，1）</p><p>reduceByKey:对相同的单词出现的次数进行累加</p><p>collect:触发任务执行，收集结果数据。</p><ul><li>结果：</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-4.jpg" alt="spark-4"></p><h3 id="6-2-2-运行spark-shell-–master-local-N-读取HDFS上数据"><a href="#6-2-2-运行spark-shell-–master-local-N-读取HDFS上数据" class="headerlink" title="6.2.2 运行spark-shell –master local[N] 读取HDFS上数据"></a>6.2.2 运行spark-shell –master local[N] 读取HDFS上数据</h3><ul><li><p>整合spark和HDFS，修改配置文件</p><ul><li>在spark-env.sh ，添加HADOOP_CONF_DIR配置，指明了hadoop的配置文件后，默认它就是使用的hdfs上的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_CONF_DIR=/hadoop/apps/server/hadoop-2.7.4/etc/hadoop</span><br></pre></td></tr></table></figure></li><li><p>重启启动HDFS、spark集群</p></li><li><p>向hdfs上传一个文件到hdfs://node-1:/wordcount/input/words.txt</p></li><li><p>在spark shell 中用scala语言编写spark程序</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(&quot;/wordcount/input/words.txt&quot;).flatMap(_.split(&quot; &quot;)).map((_,1)).reduceByKey(_+_).collect</span><br></pre></td></tr></table></figure><h3 id="6-2-3-运行spark-shell指定具体的master地址"><a href="#6-2-3-运行spark-shell指定具体的master地址" class="headerlink" title="6.2.3 运行spark-shell指定具体的master地址"></a>6.2.3 运行spark-shell指定具体的master地址</h3><ul><li>需求：spark-shell运行时指定具体的master地址，读取HDFS上的数据，做单词计数，然后将结果保存在HDFS上。</li><li>执行启动命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spark-shell \</span><br><span class="line">--master spark://node-1:7077 \</span><br><span class="line">--executor-memory 1g \</span><br><span class="line">--total-executor-cores 2</span><br></pre></td></tr></table></figure><p><strong><code>参数说明：</code></strong></p><p><code>--master spark://node-1:7077</code> 指定Master的地址</p><p><code>--executor-memory 1g</code> 指定每个worker可用内存为1g</p><p><code>--total-executor-cores 2</code> 指定整个集群使用的cup核数为2个</p><p><code>注意：</code>如果启动sparkshell时没有指定master地址，但是也可以正常启动spark shell和执行spark shell中的程序，其实是启动了spark的local模式，该模式仅在本机启动一个进程，没有与集群建立联系。</p><ul><li>编写scala代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile("/wordcount/input/words.txt").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).saveAsTextFile("/wordcount/output")</span><br></pre></td></tr></table></figure><p>saveAsTextFile:保存结果数据到文件中</p><ul><li>查看hdfs上结果</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-5.jpg" alt="spark-5"></p><h2 id="6-3-在IDEA中编写WordCount程序"><a href="#6-3-在IDEA中编写WordCount程序" class="headerlink" title="6.3 在IDEA中编写WordCount程序"></a>6.3 在IDEA中编写WordCount程序</h2><ul><li>spark-shell仅在测试和验证我们的程序时使用的较多，在生产环境中，通常会在IDEA中编写程序，然后打成jar包，最后提交到集群。最常用的是创建一个Maven项目，利用Maven来管理jar包的依赖。</li><li>创建一个项目</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-6.jpg" alt="spark-6"></p><ul><li>选择Maven项目，然后点击next</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-7.jpg" alt="spark-7"></p><ul><li>填写maven的GAV,然后点击next</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-8.jpg" alt="spark-8"></p><ul><li>填写项目名称，然后点击finish</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-9.jpg" alt="spark-9"></p><ul><li>创建好maven项目后，点击Enable Auto-Import</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-10.jpg" alt="spark-10"></p><ul><li>配置maven的pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hadoop.version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">hadoop.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main/scala<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>src/test/scala<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-dependencyfile<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>$&#123;project.build.directory&#125;/.scala_dependencies<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span><span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加src/main/scala和src/test/scala，与pom.xml中的配置保持一致</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-11.jpg" alt="spark-11"></p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/spark/spark-12.jpg" alt="spark-12"></p><ul><li>编写spark程序</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.test.spark</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//设置spark的配置文件信息</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WordCount"</span>)</span><br><span class="line">    <span class="comment">//构建sparkcontext上下文对象，它是程序的入口,所有计算的源头</span></span><br><span class="line">    <span class="keyword">val</span> sc: <span class="type">SparkContext</span> = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="comment">//读取文件</span></span><br><span class="line">    <span class="keyword">val</span> file: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(args(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对文件中每一行单词进行压平切分</span></span><br><span class="line">    <span class="keyword">val</span> words: <span class="type">RDD</span>[<span class="type">String</span>] = file.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">    <span class="comment">//对每一个单词计数为1 转化为(单词，1)</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOne: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = words.map(x=&gt;(x,<span class="number">1</span>))</span><br><span class="line">    <span class="comment">//相同的单词进行汇总 前一个下划线表示累加数据，后一个下划线表示新数据</span></span><br><span class="line">    <span class="keyword">val</span> result: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordAndOne.reduceByKey(_+_)</span><br><span class="line">    <span class="comment">//保存数据到HDFS</span></span><br><span class="line">    result.saveAsTextFile(args(<span class="number">1</span>))</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用maven打包<ul><li>点击idea右侧的Maven Project选项</li><li>点击Lifecycle,选择package，然后点击Run Maven Build</li></ul></li><li>选择编译成功的jar包，并将该jar上传到Spark集群中的某个节点上</li><li>首先启动hdfs和Spark集群</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动hdfs</span><br><span class="line"><span class="meta">$</span>HADOOP_HOME/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><ul><li>使用spark-submit命令提交Spark应用（注意参数的顺序）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--class com.itheima.spark.WordCount \</span><br><span class="line">--master spark://node-1:7077 \</span><br><span class="line">--executor-memory 1g \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">/home/hadoop/demoJar/sparkDay01-wordcount.jar \</span><br><span class="line">/wordcount/input/words.txt \</span><br><span class="line">/wordcount/spark_out</span><br></pre></td></tr></table></figure><p>这里通过spark-submit提交任务到集群上。用的是spark的Standalone模式<br>Standalone模式是Spark内部默认实现的一种集群管理模式，这种模式是通过集群中的Master来统一管理资源。</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kafka安装及使用</title>
      <link href="/kafka/2018/03/18/kafka%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/kafka/2018/03/18/kafka%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="kafka的安装及使用"><a href="#kafka的安装及使用" class="headerlink" title="kafka的安装及使用"></a>kafka的安装及使用</h1><h2 id="1-kafka的安装"><a href="#1-kafka的安装" class="headerlink" title="1.kafka的安装"></a>1.kafka的安装</h2><h3 id="1-1zoopeeper集群安装"><a href="#1-1zoopeeper集群安装" class="headerlink" title="1.1zoopeeper集群安装"></a>1.1zoopeeper集群安装</h3><p><a href="https://www.marsm.top/2018/03/01/Zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">zoopeeper的安装参考其他文章</a></p><h3 id="1-2-kafka集群安装"><a href="#1-2-kafka集群安装" class="headerlink" title="1.2 kafka集群安装"></a>1.2 kafka集群安装</h3><ol><li>上传并解压安装包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里使用的是kafka_2.11-1.0.1.tgz这个版本</span><br><span class="line">tar -zxvf kafka_2.11-1.0.1.tgz</span><br></pre></td></tr></table></figure><ol start="2"><li>修改kafka配置文件</li></ol><p>第一台机器修改配置文件server.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">broker.id=0</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/export/servers/kafka_2.11-1.0.0/logs</span><br><span class="line">num.partitions=2</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.flush.interval.messages=10000</span><br><span class="line">log.flush.interval.ms=1000</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=node01:2181,node02:2181,node03:2181</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br><span class="line">delete.topic.enable=true</span><br><span class="line">host.name=node01</span><br></pre></td></tr></table></figure><p>第二台机器修改配置文件server.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">broker.id=1</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/export/servers/kafka_2.11-1.0.0/logs</span><br><span class="line">num.partitions=2</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.flush.interval.messages=10000</span><br><span class="line">log.flush.interval.ms=1000</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=node01:2181,node02:2181,node03:2181</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br><span class="line">delete.topic.enable=true</span><br><span class="line">host.name=node02</span><br></pre></td></tr></table></figure><p>第三台机器修改配置文件server.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">broker.id=2</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/export/servers/kafka_2.11-1.0.0/logs</span><br><span class="line">num.partitions=2</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.flush.interval.messages=10000</span><br><span class="line">log.flush.interval.ms=1000</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=node01:2181,node02:2181,node03:2181</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br><span class="line">delete.topic.enable=true</span><br><span class="line">host.name=node03</span><br></pre></td></tr></table></figure><p>更多机器一次添加即可。</p><ol start="3"><li>启动kafka集群<br>三台机器启动kafka服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-server-start.sh ./config/server.properties</span><br><span class="line">后台启动命令</span><br><span class="line">nohup .bin/kafka-server-start.sh ./config/server.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="2-kafka命令行的使用"><a href="#2-kafka命令行的使用" class="headerlink" title="2. kafka命令行的使用"></a>2. kafka命令行的使用</h2><ol><li>创建topic</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topic.sh --create --partitions 3 --replication-factor 2 --topic test --zookeeper node01:2181,node02:2181,node03:2181</span><br></pre></td></tr></table></figure><ol start="2"><li>模拟生产者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list node01:9092,node02:9092,node03:9092 --topic test</span><br></pre></td></tr></table></figure><ol start="3"><li>模拟消费者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --from-beginning --topic test --zookeeper node01:2181,node02:2181,node03:2181</span><br></pre></td></tr></table></figure><h2 id="3-kafka自定义分区"><a href="#3-kafka自定义分区" class="headerlink" title="3. kafka自定义分区"></a>3. kafka自定义分区</h2><ol><li>直接指定分区</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafkaProducer.send(new ProducerRecord&lt;String, String&gt;(&quot;testpart&quot;,1,&quot;0&quot;,&quot;value&quot;+i));</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义分区</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class KafkaCustomPartitioner implements Partitioner &#123;</span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int partition(String topic, Object arg1, byte[] keyBytes, Object arg3, byte[] arg4, Cluster cluster) &#123;</span><br><span class="line">List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">    int partitionNum = partitions.size();</span><br><span class="line">Random random = new Random();</span><br><span class="line">int partition = random.nextInt(partitionNum);</span><br><span class="line">    return partition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主代码中添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void kafkaProducer() throws Exception &#123;</span><br><span class="line">//1、准备配置文件</span><br><span class="line">    Properties props = new Properties();</span><br><span class="line">    props.put(&quot;bootstrap.servers&quot;, &quot;node01:9092,node02:9092,node03:9092&quot;);</span><br><span class="line">    props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line">    props.put(&quot;retries&quot;, 0);</span><br><span class="line">    props.put(&quot;batch.size&quot;, 16384);</span><br><span class="line">    props.put(&quot;linger.ms&quot;, 1);</span><br><span class="line">    props.put(&quot;buffer.memory&quot;, 33554432);</span><br><span class="line">    props.put(&quot;partitioner.class&quot;, &quot;cn.itcast.kafka.partitioner.KafkaCustomPartitioner&quot;);</span><br><span class="line">    props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">    props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">    //2、创建KafkaProducer</span><br><span class="line">    KafkaProducer&lt;String, String&gt; kafkaProducer = new KafkaProducer&lt;String, String&gt;(props);</span><br><span class="line">    for (int i=0;i&lt;100;i++)&#123;</span><br><span class="line">        //3、发送数据</span><br><span class="line">        kafkaProducer.send(new ProducerRecord&lt;String, String&gt;(&quot;testpart&quot;,&quot;0&quot;,&quot;value&quot;+i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kafkaProducer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-kafka的配置文件说明"><a href="#4-kafka的配置文件说明" class="headerlink" title="4. kafka的配置文件说明"></a>4. kafka的配置文件说明</h2><ol><li>server.properties配置文件说明</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#broker的全局唯一编号，不能重复</span><br><span class="line">broker.id=0</span><br><span class="line"></span><br><span class="line">#用来监听链接的端口，producer或consumer将在此端口建立连接</span><br><span class="line">port=9092</span><br><span class="line"></span><br><span class="line">#处理网络请求的线程数量</span><br><span class="line">num.network.threads=3</span><br><span class="line"></span><br><span class="line">#用来处理磁盘IO的现成数量</span><br><span class="line">num.io.threads=8</span><br><span class="line"></span><br><span class="line">#发送套接字的缓冲区大小</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line">#接受套接字的缓冲区大小</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line">#请求套接字的缓冲区大小</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"></span><br><span class="line">#kafka运行日志存放的路径</span><br><span class="line">log.dirs=/export/data/kafka/</span><br><span class="line"></span><br><span class="line">#topic在当前broker上的分片个数</span><br><span class="line">num.partitions=2</span><br><span class="line"></span><br><span class="line">#用来恢复和清理data下数据的线程数量</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line"></span><br><span class="line">#segment文件保留的最长时间，超时将被删除</span><br><span class="line">log.retention.hours=1</span><br><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line">#滚动生成新的segment文件的最大时间</span><br><span class="line">log.roll.hours=1</span><br><span class="line"></span><br><span class="line">#日志文件中每个segment的大小，默认为1G</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">==============================================================</span><br><span class="line">#周期性检查文件大小的时间</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"></span><br><span class="line">#日志清理是否打开</span><br><span class="line">log.cleaner.enable=true</span><br><span class="line"></span><br><span class="line">#broker需要使用zookeeper保存meta数据</span><br><span class="line">zookeeper.connect=zk01:2181,zk02:2181,zk03:2181</span><br><span class="line"></span><br><span class="line">#zookeeper链接超时时间</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line">#partion buffer中，消息的条数达到阈值，将触发flush到磁盘</span><br><span class="line">log.flush.interval.messages=10000</span><br><span class="line">#刷新数据到磁盘上越快，我们消费的数据就会越快</span><br><span class="line">#消息buffer的时间，达到阈值，将触发flush到磁盘</span><br><span class="line">log.flush.interval.ms=3000</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line">#删除topic需要server.properties中设置delete.topic.enable=true否则只是标记删除</span><br><span class="line">delete.topic.enable=true</span><br><span class="line"></span><br><span class="line">#此处的host.name为本机IP(重要),如果不改,则客户端会抛出:Producer connection to localhost:9092 unsuccessful 错误!</span><br><span class="line">host.name=kafka01</span><br><span class="line"></span><br><span class="line">advertised.host.name=192.168.140.128</span><br></pre></td></tr></table></figure><ol start="2"><li>producer生产者配置文件说明</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#指定kafka节点列表，用于获取metadata，不必全部指定</span><br><span class="line">metadata.broker.list=node01:9092,node02:9092,node03:9092</span><br><span class="line"># 指定分区处理类。默认kafka.producer.DefaultPartitioner，表通过key哈希到对应分区</span><br><span class="line">#partitioner.class=kafka.producer.DefaultPartitioner</span><br><span class="line"># 是否压缩，默认0表示不压缩，1表示用gzip压缩，2表示用snappy压缩。压缩后消息中会有头来指明消息压缩类型，故在消费者端消息解压是透明的无需指定。</span><br><span class="line">compression.codec=none</span><br><span class="line"># 指定序列化处理类</span><br><span class="line">serializer.class=kafka.serializer.DefaultEncoder</span><br><span class="line"># 如果要压缩消息，这里指定哪些topic要压缩消息，默认empty，表示不压缩。</span><br><span class="line">#compressed.topics=</span><br><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line"># 设置发送数据是否需要服务端的反馈,有三个值0,1,-1</span><br><span class="line"># 0: producer不会等待broker发送ack </span><br><span class="line"># 1: 当leader接收到消息之后发送ack </span><br><span class="line"># -1: 当所有的follower都同步消息成功后发送ack. </span><br><span class="line">request.required.acks=1</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line"># 在向producer发送ack之前,broker允许等待的最大时间 ，如果超时,broker将会向producer发送一个error ACK.意味着上一次消息因为某种原因未能成功(比如follower未能同步成功) </span><br><span class="line">request.timeout.ms=10000</span><br><span class="line"></span><br><span class="line"># 同步还是异步发送消息，默认“sync”表同步，&quot;async&quot;表异步。异步可以提高发送吞吐量,</span><br><span class="line">也意味着消息将会在本地buffer中,并适时批量发送，但是也可能导致丢失未发送过去的消息</span><br><span class="line">producer.type=async</span><br><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line"># 在async模式下,当message被缓存的时间超过此值后,将会批量发送给broker,默认为5000ms</span><br><span class="line"># 此值和batch.num.messages协同工作.</span><br><span class="line">queue.buffering.max.ms = 5000</span><br><span class="line"></span><br><span class="line"># 在async模式下,producer端允许buffer的最大消息量</span><br><span class="line"># 无论如何,producer都无法尽快的将消息发送给broker,从而导致消息在producer端大量沉积</span><br><span class="line"># 此时,如果消息的条数达到阀值,将会导致producer端阻塞或者消息被抛弃，默认为10000</span><br><span class="line">queue.buffering.max.messages=20000</span><br><span class="line"></span><br><span class="line"># 如果是异步，指定每次批量发送数据量，默认为200</span><br><span class="line">batch.num.messages=500</span><br><span class="line"></span><br><span class="line"># 当消息在producer端沉积的条数达到&quot;queue.buffering.max.meesages&quot;后 </span><br><span class="line"># 阻塞一定时间后,队列仍然没有enqueue(producer仍然没有发送出任何消息) </span><br><span class="line"># 此时producer可以继续阻塞或者将消息抛弃,此timeout值用于控制&quot;阻塞&quot;的时间 </span><br><span class="line"># -1: 无阻塞超时限制,消息不会被抛弃 (表示主节点和从节点都保存好了消息才会继续发送)</span><br><span class="line">#  1:表示主节点确认保存好了消息</span><br><span class="line">#  0:立即清空队列,消息被抛弃 </span><br><span class="line">queue.enqueue.timeout.ms=-1</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line"># 当producer接收到error ACK,或者没有接收到ACK时,允许消息重发的次数 </span><br><span class="line"># 因为broker并没有完整的机制来避免消息重复,所以当网络异常时(比如ACK丢失) </span><br><span class="line"># 有可能导致broker接收到重复的消息,默认值为3.</span><br><span class="line">message.send.max.retries=3</span><br><span class="line"></span><br><span class="line"># producer刷新topic metada的时间间隔,producer需要知道partition leader的位置,以及当前topic的情况 </span><br><span class="line"># 因此producer需要一个机制来获取最新的metadata,当producer遇到特定错误时,将会立即刷新 </span><br><span class="line"># (比如topic失效,partition丢失,leader失效等),此外也可以通过此参数来配置额外的刷新机制，默认值600000 </span><br><span class="line">topic.metadata.refresh.interval.ms=60000</span><br></pre></td></tr></table></figure><ol start="3"><li>consumer消费者配置文件说明</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line"># zookeeper连接服务器地址</span><br><span class="line">zookeeper.connect=zk01:2181,zk02:2181,zk03:2181</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line"># zookeeper的session过期时间，默认5000ms，用于检测消费者是否挂掉</span><br><span class="line">zookeeper.session.timeout.ms=5000</span><br><span class="line">#当消费者挂掉，其他消费者要等该指定时间才能检查到并且触发重新负载均衡</span><br><span class="line">zookeeper.connection.timeout.ms=10000</span><br><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line"># 指定多久消费者更新offset到zookeeper中。注意offset更新时基于time而不是每次获得的消息。一旦在更新zookeeper发生异常并重启，将可能拿到已拿到过的消息</span><br><span class="line">zookeeper.sync.time.ms=2000</span><br><span class="line">#指定消费 </span><br><span class="line">group.id=test</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line"># 当consumer消费一定量的消息之后,将会自动向zookeeper提交offset信息</span><br><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line"># 注意offset信息并不是每消费一次消息就向zk提交一次,而是现在本地保存(内存),并定期提交,默认为true</span><br><span class="line">auto.commit.enable=true</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line"># 自动更新时间。默认60 * 1000</span><br><span class="line">auto.commit.interval.ms=1000</span><br><span class="line"># 当前consumer的标识,可以设定,也可以有系统生成,主要用来跟踪消息消费情况,便于观察</span><br><span class="line">conusmer.id=xxx </span><br><span class="line"># 消费者客户端编号，用于区分不同客户端，默认客户端程序自动产生</span><br><span class="line">client.id=xxxx</span><br><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line"># 最大取多少块缓存到消费者(默认10)</span><br><span class="line">queued.max.message.chunks=50</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line"># 当有新的consumer加入到group时,将会reblance,此后将会有partitions的消费端迁移到新  的consumer上,如果一个consumer获得了某个partition的消费权限,那么它将会向zk注册 &quot;Partition Owner registry&quot;节点信息,但是有可能此时旧的consumer尚没有释放此节点, 此值用于控制,注册节点的重试次数. </span><br><span class="line">rebalance.max.retries=5</span><br><span class="line"></span><br><span class="line"># 获取消息的最大尺寸,broker不会像consumer输出大于此值的消息chunk 每次feth将得到多条消息,此值为总大小,提升此值,将会消耗更多的consumer端内存</span><br><span class="line">fetch.min.bytes=6553600</span><br><span class="line"></span><br><span class="line">==============================重要=============================</span><br><span class="line"># 当消息的尺寸不足时,server阻塞的时间,如果超时,消息将立即发送给consumer</span><br><span class="line">fetch.wait.max.ms=5000</span><br><span class="line">socket.receive.buffer.bytes=655360</span><br><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line"># 如果zookeeper没有offset值或offset值超出范围。那么就给个初始的offset。有smallest、largest、anything可选，分别表示给当前最小的offset、当前最大的offset、抛异常。默认largest</span><br><span class="line">auto.offset.reset=smallest</span><br><span class="line"># 指定序列化处理类</span><br><span class="line">derializer.class=kafka.serializer.DefaultDecoder</span><br></pre></td></tr></table></figure><h2 id="5-kafka特点"><a href="#5-kafka特点" class="headerlink" title="5. kafka特点"></a>5. kafka特点</h2><ol><li>第一点：顺序读写文件</li><li>第二点：pageCache页缓存</li></ol><p>这是kafka作为流式处理平台速度快的原因</p><h2 id="6-kafka与flume的整合"><a href="#6-kafka与flume的整合" class="headerlink" title="6. kafka与flume的整合"></a>6. kafka与flume的整合</h2><p><a href="https://www.marsm.top/2018/03/08/Flume/" target="_blank" rel="noopener">flume的安装参考其他文章</a></p><p>配置flume的采集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#为我们的source channel  sink起名</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">#指定我们的source收集到的数据发送到哪个管道</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">#指定我们的source数据收集策略</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /export/servers/flumedata</span><br><span class="line">a1.sources.r1.deletePolicy = never</span><br><span class="line">a1.sources.r1.fileSuffix = .COMPLETED</span><br><span class="line">a1.sources.r1.ignorePattern = ^(.)*\\.tmp$</span><br><span class="line">a1.sources.r1.inputCharset = GBK</span><br><span class="line">#指定我们的channel为memory,即表示所有的数据都装进memory当中</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">#指定我们的sink为kafka  sink，并指定我们的sink从哪个channel当中读取数据</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.topic = test</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = node01:9092,node02:9092,node03:9092</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = 1</span><br></pre></td></tr></table></figure><p>启动flume</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file conf/flume.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hadoop相关问题集</title>
      <link href="/HADOOP/2018/03/18/hadoop%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E9%9B%86/"/>
      <url>/HADOOP/2018/03/18/hadoop%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-手动开启或关闭HDFS的安全模式"><a href="#1-手动开启或关闭HDFS的安全模式" class="headerlink" title="1. 手动开启或关闭HDFS的安全模式"></a>1. 手动开启或关闭HDFS的安全模式</h2><ul><li>在hadoop启动namenode的时候，会启动安全模式（safemode），在该模式下，namenode会等待datanode向它发送块报告（block report），只有接收到的datanode上的块数量（datanodes  blocks）和实际的数量（total blocks）接近一致， 超过  datanodes blocks /  total blocks &gt;= 99.9%  这个阀值，就表示 块数量一致，就会推出安全模式。达到99.9%的阀值之后，文件系统不会立即推出安全模式，而是会等待30秒之后才会退出。</li><li><p>在安全模式下不可以进行以下操作：</p><ul><li>1）创建文件夹</li><li>2)上传文件</li><li>3）删除文件</li></ul></li><li><p>手动开启安全模式的命令如下:</p></li></ul><p><code>hdfs dfsadmin -safemode enter</code></p><ul><li>手动关闭安全模式的命令如下:</li></ul><p><code>hdfs dfsadmin -safemode leave</code></p>]]></content>
      
      
      <categories>
          
          <category> HADOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HADOOP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hive常用字符串函数(四)</title>
      <link href="/hive/2018/03/16/hive%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/hive/2018/03/16/hive%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-字符串长度计算函数：length"><a href="#1-字符串长度计算函数：length" class="headerlink" title="1.字符串长度计算函数：length"></a>1.字符串长度计算函数：length</h2><p>语法: length(string A)，<br>返回值: int<br>说明：返回字符串A的长度<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select length(&apos;iteblog&apos;) from iteblog;</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="2-字符串反转函数：reverse"><a href="#2-字符串反转函数：reverse" class="headerlink" title="2.字符串反转函数：reverse"></a>2.字符串反转函数：reverse</h2><p>语法: reverse(string A)<br>返回值: string<br>说明：返回字符串A的反转结果<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select reverse(iteblog&apos;) from iteblog;</span><br><span class="line">golbeti</span><br></pre></td></tr></table></figure><h2 id="3-字符串连接函数：concat"><a href="#3-字符串连接函数：concat" class="headerlink" title="3.字符串连接函数：concat"></a>3.字符串连接函数：concat</h2><p>语法: concat(string A, string B…)<br>返回值: string<br>说明：返回输入字符串连接后的结果，支持任意个输入字符串<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select concat(&apos;www&apos;,&apos;.iteblog&apos;,&apos;.com&apos;) from iteblog;</span><br><span class="line">www.iteblog.com</span><br></pre></td></tr></table></figure><h2 id="4-带分隔符字符串连接函数：concat-ws"><a href="#4-带分隔符字符串连接函数：concat-ws" class="headerlink" title="4.带分隔符字符串连接函数：concat_ws"></a>4.带分隔符字符串连接函数：concat_ws</h2><p>语法: concat_ws(string SEP, string A, string B…)<br>返回值: string<br>说明：返回输入字符串连接后的结果，SEP表示各个字符串间的分隔符<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select concat_ws(&apos;.&apos;,&apos;www&apos;,&apos;iteblog&apos;,&apos;com&apos;) from iteblog;</span><br><span class="line">www.iteblog.com</span><br></pre></td></tr></table></figure><h2 id="5-字符串截取函数：substr-substring"><a href="#5-字符串截取函数：substr-substring" class="headerlink" title="5.字符串截取函数：substr,substring"></a>5.字符串截取函数：substr,substring</h2><p>语法: substr(string A, int start),substring(string A, int start)<br>返回值: string<br>说明：返回字符串A从start位置到结尾的字符串<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select substr(&apos;iteblog&apos;,3) from iteblog;</span><br><span class="line">eblog</span><br><span class="line">hive&gt;  selectsubstr(&apos;iteblog&apos;,-1) from iteblog; </span><br><span class="line">g</span><br></pre></td></tr></table></figure><h2 id="6-字符串截取函数：substr-substring"><a href="#6-字符串截取函数：substr-substring" class="headerlink" title="6.字符串截取函数：substr,substring"></a>6.字符串截取函数：substr,substring</h2><p>语法: substr(string A, int start, int len),substring(string A, intstart, int len)<br>返回值: string<br>说明：返回字符串A从start位置开始，长度为len的字符串<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select substr(&apos;abcde&apos;,3,2) from iteblog;</span><br><span class="line">cd</span><br><span class="line">hive&gt; select substring(&apos;abcde&apos;,3,2) from iteblog;</span><br><span class="line">cd</span><br><span class="line">hive&gt;select substring(&apos;abcde&apos;,-2,2) from iteblog;</span><br><span class="line">de</span><br></pre></td></tr></table></figure><h2 id="7-字符串转大写函数：upper-ucase"><a href="#7-字符串转大写函数：upper-ucase" class="headerlink" title="7.字符串转大写函数：upper,ucase"></a>7.字符串转大写函数：upper,ucase</h2><p>语法: upper(string A) ucase(string A)<br>返回值: string<br>说明：返回字符串A的大写格式<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select upper(&apos;abSEd&apos;) from iteblog;</span><br><span class="line">ABSED</span><br><span class="line">hive&gt; select ucase(&apos;abSEd&apos;) from iteblog;</span><br><span class="line">ABSED</span><br></pre></td></tr></table></figure><h2 id="8-字符串转小写函数：lower-lcase"><a href="#8-字符串转小写函数：lower-lcase" class="headerlink" title="8.字符串转小写函数：lower,lcase"></a>8.字符串转小写函数：lower,lcase</h2><p>语法: lower(string A) lcase(string A)<br>返回值: string<br>说明：返回字符串A的小写格式<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select lower(&apos;abSEd&apos;) from iteblog;</span><br><span class="line">absed</span><br><span class="line">hive&gt; select lcase(&apos;abSEd&apos;) from iteblog;</span><br><span class="line">absed</span><br></pre></td></tr></table></figure><h2 id="9-去空格函数：trim"><a href="#9-去空格函数：trim" class="headerlink" title="9.去空格函数：trim"></a>9.去空格函数：trim</h2><p>语法: trim(string A)<br>返回值: string<br>说明：去除字符串两边的空格<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select trim(&apos; abc &apos;) from iteblog;</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h2 id="10-左边去空格函数：ltrim"><a href="#10-左边去空格函数：ltrim" class="headerlink" title="10.左边去空格函数：ltrim"></a>10.左边去空格函数：ltrim</h2><p>语法: ltrim(string A)<br>返回值: string<br>说明：去除字符串左边的空格<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select ltrim(&apos; abc &apos;) from iteblog;</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h2 id="11-右边去空格函数：rtrim"><a href="#11-右边去空格函数：rtrim" class="headerlink" title="11.右边去空格函数：rtrim"></a>11.右边去空格函数：rtrim</h2><p>语法: rtrim(string A)<br>返回值: string<br>说明：去除字符串右边的空格<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select rtrim(&apos; abc &apos;) from iteblog;</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h2 id="12-正则表达式替换函数：regexp-replace"><a href="#12-正则表达式替换函数：regexp-replace" class="headerlink" title="12.正则表达式替换函数：regexp_replace"></a>12.正则表达式替换函数：regexp_replace</h2><p>语法: regexp_replace(string A, string B, string C)<br>返回值: string<br>说明：将字符串A中的符合java正则表达式B的部分替换为C。注意，在有些情况下要使用转义字符,类似oracle中的regexp_replace函数。<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select regexp_replace(&apos;foobar&apos;, &apos;oo|ar&apos;, &apos;&apos;) from iteblog;</span><br><span class="line">fb</span><br></pre></td></tr></table></figure><h2 id="13-正则表达式解析函数：regexp-extract"><a href="#13-正则表达式解析函数：regexp-extract" class="headerlink" title="13.正则表达式解析函数：regexp_extract"></a>13.正则表达式解析函数：regexp_extract</h2><p>语法: regexp_extract(string subject, string pattern, int index)<br>返回值: string<br>说明：将字符串subject按照pattern正则表达式的规则拆分，返回index指定的字符。<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select regexp_extract(&apos;foothebar&apos;, &apos;foo(.*?)(bar)&apos;, 1) fromiteblog;</span><br><span class="line">the</span><br><span class="line">hive&gt; select regexp_extract(&apos;foothebar&apos;, &apos;foo(.*?)(bar)&apos;, 2) fromiteblog;</span><br><span class="line">bar</span><br><span class="line">hive&gt; select regexp_extract(&apos;foothebar&apos;, &apos;foo(.*?)(bar)&apos;, 0) fromiteblog;</span><br><span class="line">foothebar</span><br></pre></td></tr></table></figure><p>注意，在有些情况下要使用转义字符，下面的等号要用双竖线转义，这是java正则表达式的规则。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select data_field,</span><br><span class="line">     regexp_extract(data_field,&apos;.*?bgStart\\=([^&amp;]+)&apos;,1) as aaa,</span><br><span class="line">     regexp_extract(data_field,&apos;.*?contentLoaded_headStart\\=([^&amp;]+)&apos;,1) as bbb,</span><br><span class="line">     regexp_extract(data_field,&apos;.*?AppLoad2Req\\=([^&amp;]+)&apos;,1) as ccc</span><br><span class="line">     from pt_nginx_loginlog_st</span><br><span class="line">     where pt = &apos;2012-03-26&apos;limit 2;</span><br></pre></td></tr></table></figure><h2 id="14-URL解析函数：parse-url"><a href="#14-URL解析函数：parse-url" class="headerlink" title="14.URL解析函数：parse_url"></a>14.URL解析函数：parse_url</h2><p>语法: parse_url(string urlString, string partToExtract [, stringkeyToExtract])<br>返回值: string<br>说明：返回URL中指定的部分。partToExtract的有效值为：HOST, PATH, QUERY, REF, PROTOCOL, AUTHORITY, FILE, and USERINFO.<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select parse_url(&apos;http://iteblog.com?weixin=iteblog_hadoop&apos;, &apos;HOST&apos;) from iteblog;</span><br><span class="line">iteblog.com</span><br><span class="line">hive&gt; select parse_url(&apos;http://iteblog.com?weixin=iteblog_hadoop&apos;, </span><br><span class="line">       &gt; &apos;QUERY&apos;,&apos;weixin&apos;) from iteblog;</span><br><span class="line">iteblog_hadoop</span><br></pre></td></tr></table></figure><h2 id="15-json解析函数：get-json-object"><a href="#15-json解析函数：get-json-object" class="headerlink" title="15.json解析函数：get_json_object"></a>15.json解析函数：get_json_object</h2><p>语法: get_json_object(string json_string, string path)<br>返回值: string<br>说明：解析json的字符串json_string,返回path指定的内容。如果输入的json字符串无效，那么返回NULL。<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select get_json_object(&apos;&#123;&quot;store&quot;:</span><br><span class="line">&gt;  &#123;&quot;fruit&quot;:\[&#123;&quot;weight&quot;:8,&quot;type&quot;:&quot;apple&quot;&#125;,&#123;&quot;weight&quot;:9,&quot;type&quot;:&quot;pear&quot;&#125;],</span><br><span class="line">&gt;   &quot;bicycle&quot;:&#123;&quot;price&quot;:19.95,&quot;color&quot;:&quot;red&quot;&#125;</span><br><span class="line">&gt;   &#125;,</span><br><span class="line">&gt; &quot;email&quot;:&quot;amy@only_for_json_udf_test.net&quot;,</span><br><span class="line">&gt;  &quot;owner&quot;:&quot;amy&quot;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &apos;,&apos;$.owner&apos;) from iteblog;</span><br><span class="line">amy</span><br></pre></td></tr></table></figure><h2 id="16-空格字符串函数：space"><a href="#16-空格字符串函数：space" class="headerlink" title="16.空格字符串函数：space"></a>16.空格字符串函数：space</h2><p>语法: space(int n)<br>返回值: string<br>说明：返回长度为n的字符串<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select space(10) from iteblog;</span><br><span class="line">hive&gt; select length(space(10)) from iteblog;</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="17-重复字符串函数：repeat"><a href="#17-重复字符串函数：repeat" class="headerlink" title="17.重复字符串函数：repeat"></a>17.重复字符串函数：repeat</h2><p>语法: repeat(string str, int n)<br>返回值: string<br>说明：返回重复n次后的str字符串<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select repeat(&apos;abc&apos;,5) from iteblog;</span><br><span class="line">abcabcabcabcabc</span><br></pre></td></tr></table></figure><h2 id="18-首字符ascii函数：ascii"><a href="#18-首字符ascii函数：ascii" class="headerlink" title="18.首字符ascii函数：ascii"></a>18.首字符ascii函数：ascii</h2><p>语法: ascii(string str)<br>返回值: int<br>说明：返回字符串str第一个字符的ascii码<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select ascii(&apos;abcde&apos;) from iteblog;</span><br><span class="line">97</span><br></pre></td></tr></table></figure><h2 id="19-左补足函数：lpad"><a href="#19-左补足函数：lpad" class="headerlink" title="19.左补足函数：lpad"></a>19.左补足函数：lpad</h2><p>语法: lpad(string str, int len, string pad)<br>返回值: string<br>说明：将str进行用lpad进行左补足到len位<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select lpad(&apos;abc&apos;,10,&apos;td&apos;) from iteblog;</span><br><span class="line">tdtdtdtabc</span><br></pre></td></tr></table></figure><p>注意：与GP，ORACLE不同，pad 不能默认</p><h2 id="20-右补足函数：rpad"><a href="#20-右补足函数：rpad" class="headerlink" title="20.右补足函数：rpad"></a>20.右补足函数：rpad</h2><p>语法: rpad(string str, int len, string pad)<br>返回值: string<br>说明：将str进行用pad进行右补足到len位<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select rpad(&apos;abc&apos;,10,&apos;td&apos;) from iteblog;</span><br><span class="line">abctdtdtdt</span><br></pre></td></tr></table></figure><h2 id="21-分割字符串函数-split"><a href="#21-分割字符串函数-split" class="headerlink" title="21.分割字符串函数: split"></a>21.分割字符串函数: split</h2><p>语法: split(string str, stringpat)<br>返回值: array<br>说明: 按照pat字符串分割str，会返回分割后的字符串数组<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select split(&apos;abtcdtef&apos;,&apos;t&apos;) from iteblog;</span><br><span class="line">[&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</span><br></pre></td></tr></table></figure><h2 id="22-集合查找函数-find-in-set"><a href="#22-集合查找函数-find-in-set" class="headerlink" title="22.集合查找函数:find_in_set"></a>22.集合查找函数:find_in_set</h2><p>语法: find_in_set(string str, string strList)<br>返回值: int<br>说明: 返回str在strlist第一次出现的位置，strlist是用逗号分割的字符串。如果没有找该str字符，则返回0<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select find_in_set(&apos;ab&apos;,&apos;ef,ab,de&apos;) from iteblog;</span><br><span class="line">2</span><br><span class="line">hive&gt; select find_in_set(&apos;at&apos;,&apos;ef,ab,de&apos;) from iteblog;</span><br><span class="line">0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hive基本命令（三）</title>
      <link href="/hive/2018/03/10/hive%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/hive/2018/03/10/hive%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="hive基本命令"><a href="#hive基本命令" class="headerlink" title="hive基本命令"></a>hive基本命令</h1><h2 id="1-hive完整DDL"><a href="#1-hive完整DDL" class="headerlink" title="1. hive完整DDL"></a>1. hive完整DDL</h2><h3 id="1-1创建表"><a href="#1-1创建表" class="headerlink" title="1.1创建表"></a>1.1创建表</h3><p>CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name</p><blockquote><p> [(col_name data_type [COMMENT col_comment], …)]<br> [COMMENT table_comment]<br> [PARTITIONED BY (col_name data_type [COMMENT col_comment], …)]<br> [CLUSTERED BY (col_name, col_name, …)]<br> [SORTED BY (col_name [ASC|DESC], …)] INTO num_buckets BUCKETS]<br> [ROW FORMAT row_format]<br> [STORED AS file_format]<br> [LOCATION hdfs_path]</p></blockquote><p><strong><code>说明：</code></strong></p><ol><li>create table创建一个指定名字的表，如果相同名字的表已经存在，则抛出异常；用户可以用if not exists选项来忽略这个异常。</li><li>external 关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（location）.</li></ol><ul><li>hive创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</li></ul><p>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建外部表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> student_ext(Sno <span class="built_in">int</span>,Sname <span class="keyword">string</span>,Sex <span class="keyword">string</span>,Sage <span class="built_in">int</span>,Sdept <span class="keyword">string</span>)<span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> location <span class="string">'/home/hadoop/hivedata/'</span>;</span><br><span class="line"><span class="comment">--加载数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/home/hadoop/hivedata/students.txt'</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> student_ext;</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>like允许用户复制现有的表结构，但是不复制数据。<br>CREATE [EXTERNAL] TABLE [IF NOT EXISTS] [db_name.]table_name LIKE existing_table;<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--like复制表结构</span><br><span class="line">create table student_tmp like student;</span><br></pre></td></tr></table></figure></li><li><p>row format delimited（指定文件数据分隔符）</p><p>[FIELDS TERMINATED BY char]<br>[COLLECTION ITEMS TERMINATED BY char]<br>[MAP KEYS TERMINATED BY char]<br>[LINES TERMINATED BY char] | SERDE serde_name<br>[WITH SERDEPROPERTIES<br>(property_name=property_value, property_name=property_value,…)]</p></li></ol><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建表，指明分隔符为&apos;,&apos;</span><br><span class="line">create table student(Sno int,Sname string,Sex string,Sage int,Sdept string)row format delimited fields terminated by &apos;,&apos;stored as textfile;</span><br><span class="line"></span><br><span class="line">--创建一个数据类型有集合的表；指定字段分隔符为&apos;;&apos;,集合的分隔符为&apos;,&apos;</span><br><span class="line">create table t_collection (id int,name string)row format delimited fields terminated by &apos;;&apos; collection items terminated by &apos;,&apos;;</span><br><span class="line">load data local inpath &apos;/home/hadoop/hivedata/t_collection.txt&apos; overwrite into table t_collection;</span><br><span class="line">select * from t_collection;</span><br></pre></td></tr></table></figure></p><ul><li>hive 建表的时候默认的分割符是’\001’，若在建表的时候没有指明分隔符，load 文件的时候文件的分隔符需要是’\001’；若文件分隔符不是’001’，程序不会报错，但表查询的结果会全部为’null’；</li><li>用 vi 编辑器 Ctrl+v 然后 Ctrl+a 即可输入’\001’ ———–&gt; ^A</li><li>SerDe 是 Serialize/Deserilize 的简称，目的是用于序列化和反序列化。</li><li>Hive 读取文件机制： 首先调用 InputFormat（默认 TextInputFormat）， 返回一条一条记录（默认是一行对应一条记录）。然后调用 SerDe （默认 LazySimpleSerDe）的 Deserializer，将一条记录切分为各个字段（ 默认’\001’）。</li><li>Hive 写文件机制： 将 Row 写入文件时，主要调用 OutputFormat、 SerDe 的Seriliazer，顺序与读取相反。</li><li>可通过 desc formatted 表名； 进行相关信息查看。</li><li>当我们的数据格式比较特殊的时候，可以自定义 SerDe。</li></ul><ol start="5"><li>partitioned by（分区）</li></ol><ul><li>在 hive Select 查询中一般会扫描整个表内容，会消耗很多时间做没必要的工作。有时候只需要扫描表中关心的一部分数据，因此建表时引入了 partition 分区概念。</li><li>分区表指的是在创建表时指定的 partition 的分区空间。 一个表可以拥有一个或者多个分区，每个分区以文件夹的形式单独存在表文件夹的目录下。表和列名不区分大小写。分区是以字段的形式在表结构中存在，通过 describe table 命令可以查看到字段存在，但是该字段不存放实际的数据内容，仅仅是分区的表示。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">分区建表分为2种，一种是单分区，也就是说在表文件夹目录下只有一级文件夹目录。另外一种是多分区，表文件夹下出现多文件夹嵌套模式。</span><br><span class="line">单分区建表语句：</span><br><span class="line">create table day_table (id int, content string) partitioned by (dt string);单分区表，按天分区，在表结构中存在id，content，dt三列。(数据文件中只需有表定义的字段)</span><br><span class="line">create table day_table (id int, content string) partitioned by (dt string);</span><br><span class="line">load data local inpath &apos;/home/hadoop/hivedata/day_table.txt&apos; overwrite into table day_table partition(dt=&apos;2018-03-10&apos;);</span><br><span class="line">select *from day_table;</span><br><span class="line"></span><br><span class="line">双分区建表语句：</span><br><span class="line">create table day_hour_table (id int, content string) partitioned by (dt string, hour string);双分区表，按天和小时分区，在表结构中新增加了dt和hour两列。</span><br><span class="line">create table day_hour_table(id int,name string)partitioned by(dt string,hour string);</span><br><span class="line">load data local inpath &apos;/home/hadoop/hivedata/day_hour_table.txt&apos; overwrite into table day_hour_table partition(dt=&apos;2018-03-10&apos;,hour=&apos;21&apos;);</span><br><span class="line">select * from day_hour_table;</span><br></pre></td></tr></table></figure></p><ol start="6"><li>stored as sequencefile |textfile | rcfile</li></ol><ul><li>如果文件数据是纯文本，可以使用 STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</li><li>TEXTFILE 是默认的文件格式， 使用 DELIMITED 子句来读取分隔的文件。</li></ul><ol start="7"><li>clustered by into num_buckets buckets（分桶）</li></ol><ul><li>对于每一个表（ table）或者分， Hive 可以进一步组织成桶，也就是说桶是更为细粒度的数据范围划分。 Hive 也是针对某一列进行桶的组织。 Hive 采用对<code>列值哈希，然后除以桶的个数求余</code>的方式决定该条记录存放在哪个桶当中。</li><li>把表（或者分区）组织成桶（ Bucket）有两个理由：<ul><li>获得更高的查询处理效率。桶为表加上了额外的结构， Hive 在处理有些查询时能利用这个结构。具体而言，连接两个在（包含连接列的）相同列上划分了桶的表，可以使用 Map 端连接 （ Map-side join）高效的实现。比如 JOIN 操作。对于 JOIN 操作两个表有一个相同的列，如果对这两个表都进行了桶操作。那么将保存相同列值的桶进行 JOIN 操作就可以，可以大大较少 JOIN 的数据量。</li><li>使取样（ sampling）更高效。在处理大规模数据集时，在开发和修改查询的阶段，如果能在数据集的一小部分数据上试运行查询，会带来很多方便。</li></ul></li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--创建分桶表</span><br><span class="line">drop table stu_buck;</span><br><span class="line">create table stu_buck(Sno int,Sname string,Sex string,Sage int,Sdept string)</span><br><span class="line">clustered by(Sno)</span><br><span class="line">sorted by(Sno desc)</span><br><span class="line">into 4 buckets</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &apos;,&apos;;</span><br><span class="line">--分桶表数据导入</span><br><span class="line">insert overwrite table stu_buck select * from student cluster by(Sno);</span><br><span class="line">--分桶、排序等查询：cluster by 、sort by、distribute by</span><br></pre></td></tr></table></figure></p><h3 id="1-2-修改表"><a href="#1-2-修改表" class="headerlink" title="1.2 修改表"></a>1.2 修改表</h3><p><strong><code>增加分区：</code></strong><br>ALTER TABLE table_name ADD PARTITION (dt=’20170101’) location ‘/user/hadoop/warehouse/table_name/dt=20170101’; //一次添加一个分区</p><p>ALTER TABLE table_name ADD PARTITION (dt=’2008-08-08’, country=’us’) location<br>‘/path/to/us/part080808’ PARTITION (dt=’2008-08-09’, country=’us’) location<br>‘/path/to/us/part080809’; //一次添加多个分区</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--增加分区</span><br><span class="line">--执行添加分区时   /t_parti文件夹下的数据不会被移动。并且没有分区目录dt=2008-08-08</span><br><span class="line">alter table t_partition add partition (dt=&apos;2018-03-11&apos;) location &apos;hdfs://node-1:9000//t_parti&apos;;</span><br></pre></td></tr></table></figure></p><p><strong><code>删除分区：</code></strong><br>ALTER TABLE table_name DROP IF EXISTS PARTITION (dt=’2008-08-08’);<br>ALTER TABLE table_name DROP IF EXISTS PARTITION (dt=’2008-08-08’, country=’us’);<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--删除分区</span><br><span class="line">--执行删除分区时/t_parti下的数据会被删除并且连同/t_parti文件夹也会被删除</span><br><span class="line">alter table t_partition drop partition (dt=&apos;2018-03-11&apos;);</span><br><span class="line">--注意区别于load data时候添加分区:会移动数据 会创建分区目录</span><br></pre></td></tr></table></figure></p><p><strong><code>修改分区：</code></strong><br>ALTER TABLE table_name PARTITION (dt=’2008-08-08’) RENAME TO PARTITION (dt=’20080808’);</p><p><strong><code>添加列:</code></strong><br>ALTER TABLE table_name ADD|REPLACE COLUMNS (col_name STRING);</p><ul><li>注： ADD 是代表新增一个字段， 新增字段位置在所有列后面(partition 列前),REPLACE 则是表示替换表中所有字段。</li></ul><p><strong><code>修改列:</code></strong><br>test_change (a int, b int, c int);<br>ALTER TABLE test_change CHANGE a a1 INT; //修改 a 字段名</p><p>// will change column a’s name to a1, a’s data type to string, and put it after column b. The new table’s structure is: b int, a1 string, c int<br>ALTER TABLE test_change CHANGE a a1 STRING AFTER b;</p><p>// will change column b’s name to b1, and put it as the first column. The new table’s structure is: b1 int, a ints, c int<br>ALTER TABLE test_change CHANGE b b1 INT FIRST;</p><p><strong><code>表重命名:</code></strong><br>ALTER TABLE table_name RENAME TO new_table_name</p><h3 id="1-3-显示命令"><a href="#1-3-显示命令" class="headerlink" title="1.3 显示命令"></a>1.3 显示命令</h3><ul><li><p>显示当前数据库所有表<br>show tables;</p></li><li><p>显示所有数据库<br>show databases |schemas;</p></li><li><p>显示表分区信息，不是分区表执行报错<br>show partitions table_name;</p></li><li><p>显示当前版本 hive 支持的所有方法<br>show functions;</p></li><li><p>查看表信息<br>desc extended table_name;</p></li><li><p>查看表信息（格式化美观）<br>desc formatted table_name;</p></li><li><p>查看数据库相关信息<br>describe database database_name;</p></li></ul><h2 id="2-DML操作"><a href="#2-DML操作" class="headerlink" title="2. DML操作"></a>2. DML操作</h2><h3 id="2-1-LOAD"><a href="#2-1-LOAD" class="headerlink" title="2.1 LOAD"></a>2.1 LOAD</h3><ul><li>在将数据加载到表中时， Hive 不会进行任何转换。 加载操作是将数据文件移动到与 Hive表对应的位置的纯复制/移动操作。<br><code>语法结构:</code><br>LOAD DATA [LOCAL] INPATH ‘filepath’ [OVERWRITE] INTO<br>TABLE tablename [PARTITION (partcol1=val1, partcol2=val2 …)]<br>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--从本地文件系统中加载数据到hive表中，使用overwrite，则目标表中的内容会被删除，将从指定路径文件中加载</span><br><span class="line">load data local inpath &apos;/home/hadoop/hivedata/students.txt&apos; overwrite into table student;</span><br></pre></td></tr></table></figure></li></ul><p><strong><code>说明：</code></strong></p><ol><li>filepath</li></ol><ul><li>相对路径，例如： project/data1</li><li>绝对路径，例如： /user/hive/project/data1</li><li>完整 URI， 例如： hdfs://namenode:9000/user/hive/project/data1</li><li>filepath 可以引用一个文件（在这种情况下， Hive 将文件移动到表中），或者它可以是一个目录（在这种情况下， Hive 将把该目录中的所有文件移动到表中）。</li></ul><ol start="2"><li>LOCAL</li></ol><ul><li>如果指定了 LOCAL， load 命令将在本地文件系统中查找文件路径。</li><li>load 命令会将 filepath 中的文件复制到目标文件系统中。目标文件系统由表的位置属性决定。被复制的数据文件移动到表的数据对应的位置。</li><li>如果没有指定 LOCAL 关键字，如果 filepath 指向的是一个完整的 URI， hive会直接使用这个 URI。 否则：如果没有指定 schema 或者 authority， Hive 会使用在 hadoop 配置文件中定义的 schema 和 authority， fs.default.name 指定了Namenode 的 URI。</li></ul><ol start="3"><li>OVERWRITE</li></ol><ul><li>如果使用了 OVERWRITE 关键字，则目标表（或者分区）中的内容会被删除，然后再将 filepath 指向的文件/目录中的内容添加到表/分区中。</li><li>如果目标表（分区）已经有一个文件，并且文件名和 filepath 中的文件名冲突，那么现有的文件会被新文件所替代。</li></ul><h3 id="2-2-Insert"><a href="#2-2-Insert" class="headerlink" title="2.2 Insert"></a>2.2 Insert</h3><ul><li><p>Hive 中 insert 主要是结合 select 查询语句使用， 将查询结果插入到表中，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert overwrite table stu_buck</span><br><span class="line">select * from student cluster by(Sno);</span><br></pre></td></tr></table></figure></li><li><p>需要保证查询结果列的数目和需要插入数据表格的列数目一致.</p></li><li>如果查询出来的数据类型和插入表格对应的列数据类型不一致，将会进行转换，但是不能保证转换一定成功，转换失败的数据将会为 NULL。</li><li>可以将一个表查询出来的数据插入到原表中, 结果相当于自我复制了一份数据。</li></ul><p><code>Multi Inserts 多重插入:</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table source_table (id int, name string) row format delimited fields terminated by &apos;,&apos;;</span><br><span class="line">create table test_insert1 (id int) row format delimited fields terminated by &apos;,&apos;;</span><br><span class="line">create table test_insert2 (name string) row format delimited fields terminated by &apos;,&apos;;</span><br><span class="line"></span><br><span class="line">from source_table                     </span><br><span class="line">insert overwrite table test_insert1 </span><br><span class="line">select id</span><br><span class="line">insert overwrite table test_insert2</span><br><span class="line">select name;</span><br></pre></td></tr></table></figure><p><code>动态分区插入:</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#是否开启动态分区功能，默认false关闭。</span><br><span class="line">set hive.exec.dynamic.partition=true;    </span><br><span class="line"> </span><br><span class="line">#动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区。</span><br><span class="line">set hive.exec.dynamic.partition.mode=nonstrict;  </span><br><span class="line"></span><br><span class="line">需求：</span><br><span class="line">将dynamic_partition_table中的数据按照时间(day)，插入到目标表d_p_t的相应分区中。</span><br><span class="line">原始表：</span><br><span class="line">create table dynamic_partition_table(day string,ip string)row format delimited fields terminated by &quot;,&quot;; </span><br><span class="line"></span><br><span class="line">load data local inpath &apos;/root/hivedata/dynamic_partition_table.txt&apos; into table dynamic_partition_table;</span><br><span class="line">2018-02-10,ip1</span><br><span class="line">2018-02-10,ip2</span><br><span class="line">2018-03-14,ip3</span><br><span class="line">2018-03-14,ip4</span><br><span class="line">2018-03-15,ip1</span><br><span class="line">2018-03-15,ip2</span><br><span class="line"></span><br><span class="line">目标表：</span><br><span class="line">create table d_p_t(ip string) partitioned by (month string,day string);</span><br><span class="line"></span><br><span class="line">动态插入：</span><br><span class="line">insert overwrite table d_p_t partition (month,day) </span><br><span class="line">select ip,substr(day,1,7) as month,day </span><br><span class="line">from dynamic_partition_table;</span><br></pre></td></tr></table></figure><ul><li>动态分区是通过位置来对应分区值的。 原始表 select 出来的值和输出 partition的值的关系仅仅是通过位置来确定的，和名字并没有关系。</li></ul><p><strong><code>导出表数据</code></strong><br>语法结构<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] <span class="keyword">DIRECTORY</span> directory1 <span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ...</span><br><span class="line">multiple inserts:</span><br><span class="line"><span class="keyword">FROM</span> from_statement</span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] <span class="keyword">DIRECTORY</span> directory1 select_statement1</span><br><span class="line">[<span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] <span class="keyword">DIRECTORY</span> directory2 select_statement2] ...</span><br></pre></td></tr></table></figure></p><p>数据写入到文件系统时进行文本序列化，且每列用^A 来区分， \n 为换行符。</p><h3 id="2-3-Select"><a href="#2-3-Select" class="headerlink" title="2.3 Select"></a>2.3 Select</h3><ul><li>基本的 Select 操作<ul><li>语法结构<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [ALL | <span class="keyword">DISTINCT</span>] select_expr, select_expr, ...</span><br><span class="line"><span class="keyword">FROM</span> table_reference</span><br><span class="line"><span class="keyword">JOIN</span> table_other <span class="keyword">ON</span> expr</span><br><span class="line">[<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> col_list [<span class="keyword">HAVING</span> condition]]</span><br><span class="line">[CLUSTER <span class="keyword">BY</span> col_list</span><br><span class="line">| [<span class="keyword">DISTRIBUTE</span> <span class="keyword">BY</span> col_list][<span class="keyword">SORT</span> <span class="keyword">BY</span>| <span class="keyword">ORDER</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">[<span class="keyword">LIMIT</span> <span class="built_in">number</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong><code>说明：</code></strong></p><ol><li>order by 会对输入做全局排序，因此只有一个 reducer，会导致当输入规模较大时，<br>需要较长的计算时间。</li><li>sort by 不是全局排序，其在数据进入 reducer 前完成排序。因此，如果用 sort by 进行排序，并且设置 mapred.reduce.tasks&gt;1，则 sort by 只保证每个 reducer 的输出有序，不保证全局有序。</li><li>distribute by(字段)根据指定字段将数据分到不同的 reducer， 分发算法是 hash 散列。</li><li>Cluster by(字段) 除了具有 Distribute by 的功能外，还会对该字段进行排序。<br><code>如果 distribute 和 sort 的字段是同一个时，此时， cluster by = distribute by + sort by</code></li></ol><h2 id="3-Hive-join"><a href="#3-Hive-join" class="headerlink" title="3. Hive join"></a>3. Hive join</h2><ul><li>Hive 中除了支持和传统数据库中一样的内关联、左关联、右关联、全关联，还支持 <code>LEFT SEMI JOIN 和 CROSS JOIN</code>， 但这两种 JOIN 类型也可以用前面的代替。</li><li><code>Hive 支持等值连接（ a.id = b.id） ,不支持非等值(a.id&gt;b.id)的连接</code>，因为非等值连接非常难转化到 map/reduce 任务。 另外， Hive 支持多 2 个以上表之间的 join。</li><li>写 join 查询时，需要注意几个关键点：</li></ul><ol><li>join 时，每次 map/reduce 任务的逻辑：<ul><li>reducer 会缓存 join 序列中除了最后一个表的所有表的记录，再通过最后一个表将结果序列化到文件系统。这一实现有助于在 reduce 端减少内存的使用量。实践中，应该把最大的那个表写在最后（否则会因为缓存浪费大量内存）。</li></ul></li><li>LEFT， RIGHT 和 FULL OUTER 关键字用于处理 join 中空记录的情况<ul><li>SELECT a.val, b.val FROM a LEFT OUTER JOIN b ON (a.key=b.key)</li><li>对应所有 a 表中的记录都有一条记录输出。输出的结果应该是 a.val, b.val，当a.key=b.key 时，而当 b.key 中找不到等值的 a.key 记录时也会输出:</li><li>a.val, NULL</li><li>所以 a 表中的所有记录都被保留了；</li><li>“a RIGHT OUTER JOIN b” 会保留所有 b 表的记录。</li></ul></li><li>Join 发生在 WHERE 子句之前。</li></ol><ul><li>如果你想限制 join 的输出，应该在 WHERE 子句中写过滤条件——或是在 join 子句中写。这里面一个容易混淆的问题是表分区的情况：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.val, b.val FROM a</span><br><span class="line">LEFT OUTER JOIN b ON (a.key=b.key)</span><br><span class="line">WHERE a.ds=&apos;2009-07-07&apos; AND b.ds=&apos;2009-07-07&apos;</span><br></pre></td></tr></table></figure><ul><li>这会 join a 表到 b 表（ OUTER JOIN），列出 a.val 和 b.val 的记录。 WHERE 从句中可以使用其他列作为过滤条件。但是，如前所述，如果 b 表中找不到对应 a 表的记录， b 表的所有列都会列出 NULL， 包括 ds 列。也就是说， join 会过滤 b 表中不能找到匹配 a 表 join key 的所有记录。这样的话， LEFT OUTER 就使得查询结果与 WHERE 子句无关了。解决的办法是在 OUTER JOIN 时使用以下语法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.val, b.val FROM a LEFT OUTER JOIN b</span><br><span class="line">ON (a.key=b.key AND</span><br><span class="line">b.ds=&apos;2009-07-07&apos; AND</span><br><span class="line">a.ds=&apos;2009-07-07&apos;)</span><br></pre></td></tr></table></figure><ul><li>这一查询的结果是预先在 join 阶段过滤过的，所以不会存在上述问题。这一逻辑也<br>可以应用于 RIGHT 和 FULL 类型的 join 中。</li></ul><ol start="4"><li>Join 是不能交换位置的。</li></ol><ul><li>无论是 LEFT 还是 RIGHT join，都是左连接的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.val1, a.val2, b.val, c.val</span><br><span class="line">FROM a</span><br><span class="line">JOIN b ON (a.key = b.key)</span><br><span class="line">LEFT OUTER JOIN c ON (a.key = c.key)</span><br></pre></td></tr></table></figure><ul><li>先 join a 表到 b 表，丢弃掉所有 join key 中不匹配的记录，然后用这一中间结果和 c 表做 join。</li></ul><h2 id="4-hive交互式命令"><a href="#4-hive交互式命令" class="headerlink" title="4. hive交互式命令"></a>4. hive交互式命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@node-1 ~]$ hive extended -e</span><br><span class="line">usage: hive</span><br><span class="line"> -d,--define &lt;key=value&gt;          Variable subsitution to apply to hive</span><br><span class="line">                                  commands. e.g. -d A=B or --define A=B</span><br><span class="line">    --database &lt;databasename&gt;     Specify the database to use</span><br><span class="line"> -e &lt;quoted-query-string&gt;         SQL from command line</span><br><span class="line"> -f &lt;filename&gt;                    SQL from files</span><br><span class="line"> -H,--help                        Print help information</span><br><span class="line">    --hiveconf &lt;property=value&gt;   Use value for given property</span><br><span class="line">    --hivevar &lt;key=value&gt;         Variable subsitution to apply to hive</span><br><span class="line">                                  commands. e.g. --hivevar A=B</span><br><span class="line"> -i &lt;filename&gt;                    Initialization SQL file</span><br><span class="line"> -S,--silent                      Silent mode in interactive shell</span><br><span class="line"> -v,--verbose                     Verbose mode (echo executed SQL to the</span><br><span class="line">                                  console)</span><br></pre></td></tr></table></figure><p>常用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* bin/hive -e &lt;quoted-query-string&gt;</span><br><span class="line">eg:</span><br><span class="line">bin/hive -e &quot;select * from mars.student ;&quot;</span><br><span class="line">* bin/hive -f &lt;filename&gt;</span><br><span class="line">eg:</span><br><span class="line">$ touch hivef.sql</span><br><span class="line">select * from mars.student ;</span><br><span class="line">$ bin/hive -f /opt/datas/hivef.sql </span><br><span class="line">$ bin/hive -f /opt/datas/hivef.sql &gt; /opt/datas/hivef-res.txt</span><br></pre></td></tr></table></figure></p><ul><li><p>在hive cli命令窗口中如何查看hdfs文件系统<br>hive (default)&gt; dfs -ls / ;</p></li><li><p>在hive cli命令窗口中如何查看本地文件系统<br>hive (default)&gt; !ls /opt/datas </p></li></ul><h1 id="Hive函数"><a href="#Hive函数" class="headerlink" title="Hive函数"></a>Hive函数</h1><h2 id="1-Hive自定义函数和Transform"><a href="#1-Hive自定义函数和Transform" class="headerlink" title="1. Hive自定义函数和Transform"></a>1. Hive自定义函数和Transform</h2><ul><li>当 Hive 提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数（ UDF： user-defined function）。</li></ul><h3 id="1-1-UDF开发示例"><a href="#1-1-UDF开发示例" class="headerlink" title="1.1 UDF开发示例"></a>1.1 UDF开发示例</h3><ul><li>新建 JAVA maven 项目</li><li>添加 hive-exec-1.2.1.jar 和 hadoop-common-2.7.4.jar 依赖（见参考资料）</li></ul><ol><li>写一个 java 类，继承 UDF，并重载 evaluate 方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.bigdata.udf</span><br><span class="line">import org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line"></span><br><span class="line">public class Lower extends UDF&#123;</span><br><span class="line">public Text evaluate(Text s)&#123;</span><br><span class="line">if(s==null)&#123;return null;&#125;</span><br><span class="line">return new Text(s.toString().toLowerCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>打成 jar 包上传到服务器</li><li>将 jar 包添加到 hive 的 classpath<br>hive&gt;add JAR /home/hadoop/udf.jar;</li><li>创建临时函数与开发好的 java class 关联</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create temporary function tolowercase as &apos;cn.itcast.bigdata.udf.ToProvince&apos;;</span><br></pre></td></tr></table></figure><ol start="5"><li>即可在 hql 中使用自定义的函数 tolowercase ip<br>Select tolowercase(name),age from t_test;</li></ol><h3 id="1-2-Transform实现"><a href="#1-2-Transform实现" class="headerlink" title="1.2 Transform实现"></a>1.2 Transform实现</h3><ul><li>Hive 的 TRANSFORM 关键字<code>提供了在 SQL 中调用自写脚本的功能</code></li><li>适合实现 Hive 中没有的功能又不想写 UDF 的情况</li><li>使用示例 1： 下面这句 sql 就是借用了 weekday_mapper.py 对数据进行了处理</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add FILE weekday_mapper.py;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> u_data_new</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TRANSFORM (movieid , rate, timestring,uid)</span><br><span class="line"><span class="keyword">USING</span> <span class="string">'python weekday_mapper.py'</span></span><br><span class="line"><span class="keyword">AS</span> (movieid, rating, <span class="keyword">weekday</span>,userid)</span><br><span class="line"><span class="keyword">FROM</span> t_rating;</span><br></pre></td></tr></table></figure><ul><li>其中weekday_mapper.py内容如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">line = line.strip()</span><br><span class="line">movieid, rating, unixtime,userid = line.split(<span class="string">'\t'</span>)</span><br><span class="line">weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\t'</span>.join([movieid, rating, str(weekday),userid])</span><br></pre></td></tr></table></figure><h2 id="2-Hive-特殊分隔符处理"><a href="#2-Hive-特殊分隔符处理" class="headerlink" title="2. Hive 特殊分隔符处理"></a>2. Hive 特殊分隔符处理</h2><p><strong><code>hive 读取数据的机制：</code></strong></p><ul><li>首先用 InputFormat&lt;默认是： org.apache.hadoop.mapred.TextInputFormat &gt;的一个具体实现类读入文件数据，返回一条一条的记录（可以是行，或者是你逻辑中的“行”）</li><li>然后利用 SerDe&lt;默认： org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe&gt;的一个具体实现类，对上面返回的一条一条的记录进行字段切割。</li><li><p>Hive 对文件中字段的分隔符默认情况下只支持单字节分隔符，如果数据文件中的分隔符是多字符的，如下所示：<br>01||zhangsan<br>02||lisi</p></li><li><p>可用使用 RegexSerDe 通过正则表达式来抽取字段</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">drop table t_bi_reg;</span><br><span class="line">create table t_bi_reg(id string,name string)</span><br><span class="line">row format serde &apos;org.apache.hadoop.hive.serde2.RegexSerDe&apos;</span><br><span class="line">with serdeproperties(</span><br><span class="line">&apos;input.regex&apos;=&apos;(.*)\\|\\|(.*)&apos;,</span><br><span class="line">&apos;output.format.string&apos;=&apos;%1$s %2$s&apos;</span><br><span class="line">)</span><br><span class="line">stored as textfile;</span><br><span class="line">hive&gt;load data local inpath &apos;/root/hivedata/bi.dat&apos; into table t_bi_reg;</span><br><span class="line">hive&gt;select * from t_bi_reg;</span><br></pre></td></tr></table></figure><p>其中：<br>input.regex：输入的正则表达式<br>    表示 || 左右两边任意字符被抽取为一个字段<br>output.format.string：输出的正则表达式<br>    %1$s %2$s 则分别表示表中的第一个字段、第二个地段<br>注意事项：<br>a. 使用 RegexSerDe 类时，所有的字段必须为 string<br>b. input.regex 里面，以一个匹配组，表示一个字段<br>相关代码：链接：<a href="https://pan.baidu.com/s/1_lv2RaZug0ZYMV0BKAwYVg" target="_blank" rel="noopener">https://pan.baidu.com/s/1_lv2RaZug0ZYMV0BKAwYVg</a> 密码：s5kz</p>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hive安装与配置（二）</title>
      <link href="/hive/2018/03/09/hive%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/hive/2018/03/09/hive%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="hive安装所需软件"><a href="#hive安装所需软件" class="headerlink" title="hive安装所需软件"></a>hive安装所需软件</h2><p>Mysql<br>hive2.1.1<br>hadoop</p><h2 id="1-mysql安装"><a href="#1-mysql安装" class="headerlink" title="1. mysql安装"></a>1. mysql安装</h2><h3 id="1-1-在线安装mysql"><a href="#1-1-在线安装mysql" class="headerlink" title="1.1 在线安装mysql"></a>1.1 在线安装mysql</h3><p>使用yum在线安装mysql<br>执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql mysql-server mysql-devel -y</span><br></pre></td></tr></table></figure><p>最后提示 Complete! 表示安装成功!</p><h3 id="1-2-设置开机自启"><a href="#1-2-设置开机自启" class="headerlink" title="1.2 设置开机自启"></a>1.2 设置开机自启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkconfig mysqld on</span><br><span class="line">查看状态</span><br><span class="line">chkconfig mysqld --list</span><br></pre></td></tr></table></figure><h3 id="1-3-设置mysql远程访问"><a href="#1-3-设置mysql远程访问" class="headerlink" title="1.3 设置mysql远程访问"></a>1.3 设置mysql远程访问</h3><p>启动mysql服务<br><code>service mysqld start</code><br>登陆mysql，并设置mysql密码及远程访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">use mysql</span><br><span class="line">修改密码</span><br><span class="line">update user set password=password(&quot;new_pass&quot;) where user=&quot;root&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">授权用户远程访问</span><br><span class="line">grant all privileges  on *.* to root@&apos;%&apos; identified by &quot;root&quot;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><h2 id="2-hive安装与配置"><a href="#2-hive安装与配置" class="headerlink" title="2. hive安装与配置"></a>2. hive安装与配置</h2><p>下载hive2.1.1安装包，解压到/usr/local目录下，然后用mv命令重命名为hive，然后通过以下命令修改hive目录的读写权限</p><p>chown -R 当前用户名 /export/apps/server/hive</p><p>比如我当前用户为hadoop，那么命令就如下：</p><p>chown -R hadoop /export/apps/server/hive</p><h3 id="2-1-配置hive"><a href="#2-1-配置hive" class="headerlink" title="2.1 配置hive"></a>2.1 配置hive</h3><ol><li><p>配置hive环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME=/export/apps/server/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>进入/usr/local/hive/conf目录，这个目录下存在的文件都是模板，需要复制和改名，要修改的如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br><span class="line">cp hive-default.xml.template hive-site.xml</span><br><span class="line">cp hive-log4j2.properties.template hive-log4j2.properties</span><br><span class="line">cp hive-exec-log4j2.properties.template hive-exec-log4j2.properties</span><br></pre></td></tr></table></figure></li><li><p>修改hive-env.sh文件</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/export/apps/server/jdk1.8.0_144</span><br><span class="line">export HADOOP_HOME=/export/apps/server/hadoop-2.7.4</span><br><span class="line">export HIVE_HOME=/export/apps/server/hive</span><br><span class="line">export HIVE_CONF_DIR=/export/apps/server/hive/conf</span><br></pre></td></tr></table></figure><ol start="4"><li>修改hive-site.xml文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- WARNING!!! This file is auto generated for documentation purposes ONLY! --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- WARNING!!! Any changes you make to this file will be ignored by Hive.   --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- WARNING!!! You must make your changes in hive-site.xml instead.         --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Hive Execution Parameters --&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.querylog.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://node-1:3306/hive?createDatabaseIfNotExist=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Let Hive determine whether to run in local mode automatically<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto.inputbytes.max<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>50000000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>When hive.exec.mode.local.auto is true, input bytes should less than this for local mode.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      Enforce metastore schema version consistency.</span><br><span class="line">      True: Verify that version information stored in is compatible with one from Hive jars.  Also disable automatic</span><br><span class="line">            schema migration attempt. Users are required to manually migrate schema after Hive upgrade which ensures</span><br><span class="line">            proper metastore schema migration. (Default)</span><br><span class="line">      False: Warn if the version information stored in metastore doesn't match with one from in Hive jars.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>修改hadoop安装目录下的core-site.xml文件。若不修改，在执行hive的时候，会提示“xx is not allowed to impersonate hive”的错误信息。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>创建/export/apps/server/hive/tmp文件夹<br>mkdir /export/apps/server/hive/tmp<br>然后在配置文件hive-log4j2.properties中，把所有的\${sys:java.io.tmpdir} 替换为/export/apps/server/hive/tmp，把所有的\${sys:user.name}替换为${user.name}</p></li><li><p>配置jdbc驱动<br>下载mysql-connector-java-5.1.38-bin.jar 包，复制放到/export/apps/server/hive/lib目录下就可以了</p></li><li><p>在hdfs目录下建立三个文件，用来存放hive信息，并赋予777权限</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir -p /user/hive/warehouse</span><br><span class="line">hdfs dfs -mkdir -p /user/hive/tmp</span><br><span class="line">hdfs dfs -mkdir -p /user/hive/log</span><br><span class="line">hdfs dfs -chmod -R 777 /user/hive/warehouse</span><br><span class="line">hdfs dfs -chmod -R 777 /user/hive/tmp </span><br><span class="line">hdfs dfs -chmod -R 777 /user/hive/log</span><br></pre></td></tr></table></figure><ol start="9"><li><p>mysql中创建hive数据库<br>mysql -uroot -p<br>create database hive;<br>show databases;</p></li><li><p>初始化hive，在hive2.0以后的版本，初始化命令都是：<br>schematool -dbType mysql -initSchema</p></li><li><p>启动元数据库，在命令行中键入：hive –service metastore &amp;<br><code>(&amp;符号表示该进程将在后台运行，因为执行此命令后命令行会卡住，如果没加此符号，用ctrl+C退回命令行输入界面后会自动shotdown 该服务）</code><br>在命令行中键入：hive –service hiveserver2 &amp;</p></li><li><p>初始化成功后，就可以运行hive了，可以检测一下hive是否正常<br>如果配置了hive的bin环境变量，就可以在任意目录下输入hive，就可以进入hive了<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hive/hive-1.JPG" alt=""></p></li></ol><h2 id="3-使用HiveServer客户端界面工具"><a href="#3-使用HiveServer客户端界面工具" class="headerlink" title="3.  使用HiveServer客户端界面工具"></a>3.  使用HiveServer客户端界面工具</h2><p>Windows中通过JDBC连接HiveServer2的图形界面工具，包括：SQuirrel SQL Client、Oracle SQL Developer以及DbVisualizer。</p><h3 id="3-1-SQuirrel-SQL-Client"><a href="#3-1-SQuirrel-SQL-Client" class="headerlink" title="3.1 SQuirrel SQL Client"></a>3.1 SQuirrel SQL Client</h3><p>从<a href="http://squirrel-sql.sourceforge.net/" target="_blank" rel="noopener">http://squirrel-sql.sourceforge.net/</a> 下载最新的squirrel-sql，安装后打开。</p><ol><li>新建Driver，注意添加运行所依赖的Hive和Hadoop jar包,（我这里直接加入了hive的安装包下lib里面的jar包）<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hive/hive-2.JPG" alt=""></li><li>新建别名<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hive/hive-3.JPG" alt=""><br>测试连接，成功后保存 。</li></ol><h3 id="3-2-Oracle-SQL-Developer"><a href="#3-2-Oracle-SQL-Developer" class="headerlink" title="3.2 Oracle SQL Developer"></a>3.2 Oracle SQL Developer</h3><p>从<a href="http://www.oracle.com/technetwork/developer-tools/sql-developer/downloads/index.html下载SQL" target="_blank" rel="noopener">http://www.oracle.com/technetwork/developer-tools/sql-developer/downloads/index.html下载SQL</a> Developer 4.1.5，并解压；</p><p>从<a href="http://www.cloudera.com/downloads/connectors/hive/jdbc/2-5-15.html下载Hive" target="_blank" rel="noopener">http://www.cloudera.com/downloads/connectors/hive/jdbc/2-5-15.html下载Hive</a> JDBC Driver for Oracle SQL Developer，并解压，进入解压后的目录，将Cloudera_HiveJDBC4_2.5.15.1040.zip解压。<br>打开sqldeveloper.exe，点击”工具”–&gt;“首选项”,在”数据库”–&gt;”第三方JDBC驱动”中，添加Hive JDBC驱动：<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hive/hive-4.JPG" alt=""></p><p>添加后重启sqldeveloper。</p><p>再次打开sqldeveloper后，点击”新建连接”之后，多了”Hive”数据库：<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hive/hive-5.JPG" alt=""><br>测试连接，成功后保存。</p>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hive的体系结构（一）</title>
      <link href="/hive/2018/03/09/hive%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/hive/2018/03/09/hive%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是hive"><a href="#1-什么是hive" class="headerlink" title="1. 什么是hive"></a>1. 什么是hive</h1><ul><li>由Facebook开源用于解决海量结构化日志的数据统计；</li><li>Hive是基于Hadoop的一个数据仓库工具，可以<code>将结构化的数据文件映射成一张表</code>，并提供类SQL查询功能；</li><li><p>构建在Hadoop之上的数据仓库；</p><ul><li>使用HQL作为查询接口；</li><li>使用HDFS存储；</li><li>使用MapReduce计算；</li></ul></li><li><p>本质是：将HQL转化成MapReduce程序</p></li><li>灵活性和扩展性比较好：支持UDF，自定义存储格式等；</li><li>适合离线数据处理；</li></ul><h1 id="2-hive在生态系统的位置"><a href="#2-hive在生态系统的位置" class="headerlink" title="2. hive在生态系统的位置"></a>2. hive在生态系统的位置</h1><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hive/hive-6.JPG" alt="6"></p><h1 id="3-hive架构"><a href="#3-hive架构" class="headerlink" title="3. hive架构"></a>3. hive架构</h1><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hive/hive-7.JPG" alt="7"></p><ul><li><p>用户接口：Client<br>CLI(hive shell)、 JDBC/ODBC(java访问hive)， WEBUI(浏览器访问hive)</p></li><li><p>元数据: Metastore<br>元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等；<br>默认存储在自带的derby数据库中，推荐使用采用MySQL存储Metastore；</p></li><li><p>Hadoop<br>使用HDFS进行存储，使用MapReduce进行计算；</p></li><li><p>驱动器: Driver<br>包含：解析器、编译器、优化器、执行器；</p></li></ul><p><code>解析器：</code>将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、 SQL语义是否有误(比如select中被判定为聚合的字段在group by中是否有出现)；<br><code>编译器：</code>将AST编译生成逻辑执行计划；<br><code>优化器：</code>对逻辑执行计划进行优化；<br><code>执行器：</code>把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/TEZ/Spark；</p><h1 id="4-hive有点与使用场景"><a href="#4-hive有点与使用场景" class="headerlink" title="4. hive有点与使用场景"></a>4. hive有点与使用场景</h1><ol><li>操作接口采用类SQL语法，提供快速开发的能力(简单、容易上手)；</li><li>避免了去写MapReduce，减少开发人员的学习成本；</li><li>统一的元数据管理，可与impala/spark等共享元数据；</li><li>易扩展(HDFS+MapReduce：可以扩展集群规模；支持自定义函数)；</li><li>数据的离线处理；比如：日志分析，海量结构化数据离线分析…</li><li>Hive的执行延迟比较高，因此hive常用于数据分析的，对实时性要求不高的场合；</li><li>Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高</li></ol>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flume</title>
      <link href="/%E5%A4%A7%E6%95%B0%E6%8D%AE/2018/03/08/Flume/"/>
      <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE/2018/03/08/Flume/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Flume"><a href="#一-Flume" class="headerlink" title="一. Flume"></a>一. Flume</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ul><li><code>Flume</code> 是 Cloudera 提供的一个高可用的，高可靠的，分布式的<code>海量日志采集、聚合和传输的软件</code>。</li><li>Flume 的核心是把数据从<code>数据源(source)</code>收集过来， 再将收集到的数据送到指定的<code>目的地(sink)</code>。为了保证输送的过程一定成功，在送到目的地(sink)之前，会先<code>缓存数据(channel)</code>,待数据真正到达目的地(sink)后， flume 在删除自己缓存的数据。</li><li>Flume 支持定制各类数据发送方，用于收集各类型数据；同时， Flume 支持定制各种数据接受方，用于最终存储数据。 一般的采集需求，通过对 flume 的简单配置即可实现。 针对特殊场景也具备良好的自定义扩展能力。 因此， flume 可以适用于大部分的日常数据采集场景。</li><li>当前 Flume 有两个版本。 Flume 0.9X 版本的统称 <code>Flume OG</code>（ original generation）， Flume1.X 版本的统称 <code>Flume NG</code>（ next generation）。由于 FlumeNG 经过核心组件、核心配置以及代码架构重构，与 Flume OG 有很大不同，使用时请注意区分。 改动的另一原因是将 Flume 纳入 apache 旗下， Cloudera Flume改名为 Apache Flume。</li></ul><h2 id="2-运行机制"><a href="#2-运行机制" class="headerlink" title="2. 运行机制"></a>2. 运行机制</h2><ul><li>Flume系统中核心的角色是<code>agent</code>，agent本身是一个Java进程，一般运行在日志收集节点。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/flume/flume-1.JPG" alt=""></p><ul><li>每一个 agent 相当于一个数据传递员，内部有三个组件：</li><li><code>Source</code>：采集源，用于跟数据源对接，以获取数据；</li><li><code>Sink</code>：下沉地，采集数据的传送目的，用于往下一级 agent 传递数据或者往<ul><li>最终存储系统传递数据；</li></ul></li><li><code>Channel</code>： agent 内部的数据传输通道，用于从 source 将数据传递到 sink；</li><li>在整个数据的传输的过程中，流动的是 <code>event</code>， 它是 <code>Flume 内部数据传输的最基本单元</code>。 event 将传输的数据进行封装。如果是文本文件，通常是一行记录，event 也是事务的基本单位。 event 从 source，流向 channel，再到 sink，本身为一个字节数组，并可携带 headers(头信息)信息。 event 代表着一个数据的最小完整单元，从外部数据源来，向外部的目的地去。</li><li>一个完整的 event 包括： event headers、 event body、 event 信息， 其中event 信息就是 flume 收集到的日记记录。</li></ul><h2 id="3-Flume采集系统结构图"><a href="#3-Flume采集系统结构图" class="headerlink" title="3. Flume采集系统结构图"></a>3. Flume采集系统结构图</h2><h3 id="3-1-简单结构"><a href="#3-1-简单结构" class="headerlink" title="3.1 简单结构"></a>3.1 简单结构</h3><p>单个agent采集收据：<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/flume/flume-2.JPG" alt=""></p><h3 id="3-2-复杂结构"><a href="#3-2-复杂结构" class="headerlink" title="3.2 复杂结构"></a>3.2 复杂结构</h3><p>多级agent之间串连：<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/flume/flume-3.JPG" alt=""></p><h1 id="二、Flume安装部署"><a href="#二、Flume安装部署" class="headerlink" title="二、Flume安装部署"></a>二、Flume安装部署</h1><ul><li><p>Flume的安装非常简单<br>上传安装包到数据源所在节点上<br>然后解压tar -zxvf apache-flume-1.6.0-bin.tar.gz<br>然后进入flume的目录，修改conf下的flume-env.sh，在里面配置JAVA_HOME</p></li><li><p>根据数据采集需求<code>配置采集方案</code>，描述在配置文件中 （文件名自定义）</p></li><li><code>指定采集方案配置文件</code>，在相应的节点上启动flume agent</li></ul><p>先用一个简单的例子对flume做测试：<br>1、先在flume的conf目录下新建一个文件<br>vim netcat-logger.conf<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 定义这个 agent 中各组件的名字</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># 描述和配置 source 组件： r1</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># 描述和配置 sink 组件： k1</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># 描述和配置 channel 组件，此处使用是内存缓存的方式</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># 描述和配置 source channel sink 之间的连接关系</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><p>2、启动agent去采集数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f conf/netcat-logger.conf -n a1 -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">-c conf 指定 flume 自身的配置文件所在目录</span><br><span class="line">-f conf/netcat-logger.con 指定我们所描述的采集方案</span><br><span class="line">-n a1 指定我们这个 agent 的名字</span><br></pre></td></tr></table></figure></p><p>3、测试<br>先要往agent采集监听的端口上发送数据，让agent有数据可采。<br>随便在一个能跟agent节点联网的机器上：<br>telnet agent-hostname port    (telnet localhost 44444)<br>如果提示没有telnet则用yum安装即可：sudo yum install -y telnet</p><h1 id="三、Flume简单案例"><a href="#三、Flume简单案例" class="headerlink" title="三、Flume简单案例"></a>三、Flume简单案例</h1><h2 id="1-采集目录到HDFS"><a href="#1-采集目录到HDFS" class="headerlink" title="1. 采集目录到HDFS"></a>1. 采集目录到HDFS</h2><p>采集需求： <code>服务器的某特定目录下，会不断产生新的文件，每当有新文件出现，就需要把文件采集到 HDFS 中去</code><br>根据需求，首先定义以下 3 大要素</p><ul><li>采集源，即 source——监控文件目录 : spooldir</li><li>下沉目标，即 sink——HDFS 文件系统 : hdfs sink</li><li>source 和 sink 之间的传递通道——channel，可用 file channel 也可以用内存 channel<br>配置文件编写:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">##注意：不能往监控目中重复丢同名文件</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /root/logs</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = /flume/events/%y-%m-%d/%H%M/</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = eventsa1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 3</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 20</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 5</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">#生成的文件类型，默认是 Sequencefile，可用 DataStream，则为普通文本</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>channel参数解释：<br>capacity：默认该通道中最大的可以存储的event数量<br>trasactionCapacity:每次最大可以从source中拿到或者送到sink中的event数量</p><h2 id="2-采集文件到HDFS"><a href="#2-采集文件到HDFS" class="headerlink" title="2. 采集文件到HDFS"></a>2. 采集文件到HDFS</h2><ul><li><p>采集需求：<code>比如业务系统使用 log4j 生成的日志，日志内容不断增加，需要把追加到日志文件中的数据实时采集到 hdfs</code><br>根据需求，首先定义以下 3 大要素</p></li><li><p>采集源，即 source——监控文件内容更新 : exec ‘ tail -F file’</p></li><li>下沉目标，即 sink——HDFS 文件系统 : hdfs sink</li><li>Source 和 sink 之间的传递通道——channel，可用 file channel 也可以用内存 channel</li></ul><p>配置文件编写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /root/logs/test.log</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = /flume/tailout/%y-%m-%d/%H%M/</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = eventsa1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 3</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 20</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 5</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">#生成的文件类型，默认是 Sequencefile，可用 DataStream，则为普通文本</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p><strong>参数解析：</strong><br><code>rollInterval</code><br>默认值：30<br>hdfs sink 间隔多长将临时文件滚动成最终目标文件，单位：秒；<br>如果设置成 0，则表示不根据时间来滚动文件；<br>注：滚动（ roll）指的是， hdfs sink 将临时文件重命名成最终目标文件，并新打开一个临时文件来写入数据；<br><code>rollSize</code><br>默认值： 1024<br>当临时文件达到该大小（单位： bytes）时，滚动成目标文件；<br>如果设置成 0，则表示不根据临时文件大小来滚动文件；<br><code>rollCount</code><br>默认值： 10<br>当 events 数据达到该数量时候，将临时文件滚动成目标文件；<br>如果设置成 0，则表示不根据 events 数据来滚动文件；<br><code>round</code><br>默认值： false<br>是否启用时间上的“ 舍弃” ，这里的“舍弃” ，类似于“ 四舍五入” 。<br><code>roundValue</code><br>默认值： 1<br>时间上进行“ 舍弃” 的值；<br><code>roundUnit</code><br>默认值： seconds<br>时间上进行“ 舍弃” 的单位，包含： second,minute,hour<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a1.sinks.k1.hdfs.path = /flume/events/%y-%m-%d/%H%M/%S</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br></pre></td></tr></table></figure><p>当时间为 2015-10-16 17:38:59 时候， hdfs.path 依然会被解析为：<br>/flume/events/20151016/17:30/00<br>因为设置的是舍弃 10 分钟内的时间，因此，该目录每 10 分钟新生成一个。</p><h1 id="四、Flume的load-balance、failover"><a href="#四、Flume的load-balance、failover" class="headerlink" title="四、Flume的load-balance、failover"></a>四、Flume的load-balance、failover</h1><ul><li>负载均衡是用于解决一台机器(一个进程)无法解决所有请求而产生的一种算法。<code>Load balancing Sink Processor</code> 能够实现 load balance 功能， 如下图Agent1 是一个路由节点，负责将 Channel 暂存的 Event 均衡到对应的多个 Sink组件上，而每个 Sink 组件分别连接到一个独立的 Agent 上，示例配置，如下所示：<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/flume/flume-4.JPG" alt=""></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2 k3</span><br><span class="line">a1.sinkgroups.g1.processor.type = load_balance</span><br><span class="line">a1.sinkgroups.g1.processor.backoff = true #如果开启，则将失败的 sink 放入黑名单</span><br><span class="line">a1.sinkgroups.g1.processor.selector = round_robin # 另外还支持 random</span><br><span class="line">a1.sinkgroups.g1.processor.selector.maxTimeOut=10000 #在黑名单放置的超时时间， 超时结束时，若仍然无法接收，则超时时间呈指数增长</span><br></pre></td></tr></table></figure><ul><li><code>Failover Sink Processor</code> 能够实现 failover 功能，具体流程类似 load-balance，但是内部处理机制与 load balance 完全不同。</li><li>Failover Sink Processor 维护一个优先级 Sink 组件列表，只要有一个 Sink组件可用， Event 就被传递到下一个组件。 故障转移机制的作用是将失败的 Sink降级到一个池，在这些池中它们被分配一个冷却时间，随着故障的连续， 在重试之前冷却时间增加。 一旦 Sink 成功发送一个事件，它将恢复到活动池。 Sink 具有与之相关的优先级，数量越大，优先级越高。</li><li>例如，具有优先级为 100 的 sink 在优先级为 80 的 Sink 之前被激活。 如果在发送事件时汇聚失败，则接下来将尝试下一个具有最高优先级的 Sink 发送事件。 如果没有指定优先级，则根据在配置中指定 Sink 的顺序来确定优先级。</li><li>示例配置如下所示：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2 k3</span><br><span class="line">a1.sinkgroups.g1.processor.type = failover</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 = 5 #优先级值, 绝对值越大表示优先级越高</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 = 7</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k3 = 6</span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty = 20000 #失败的 Sink 的最大回退期（ millis）</span><br></pre></td></tr></table></figure><h1 id="五、Flume实战案例"><a href="#五、Flume实战案例" class="headerlink" title="五、Flume实战案例"></a>五、Flume实战案例</h1><h2 id="1-日志的采集和汇总"><a href="#1-日志的采集和汇总" class="headerlink" title="1. 日志的采集和汇总"></a>1. 日志的采集和汇总</h2><h3 id="1-1-案例场景"><a href="#1-1-案例场景" class="headerlink" title="1.1 案例场景"></a>1.1 案例场景</h3><ul><li><p>A、 B 两台日志服务机器实时生产日志主要类型为 access.log、 nginx.log、<br>web.log<br><strong><code>现在要求：</code></strong></p><ul><li>把 A、 B 机器中的 access.log、 nginx.log、 web.log 采集汇总到 C 机器上然后统一收集到 hdfs 中。<br>但是在 hdfs 中要求的目录为：<br>/source/logs/access/20160101/<strong><br>/source/logs/nginx/20160101/</strong><br>/source/logs/web/20160101/**</li></ul></li></ul><h3 id="1-2-场景分析"><a href="#1-2-场景分析" class="headerlink" title="1.2 场景分析"></a>1.2 场景分析</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/flume/flume-5.JPG" alt=""></p><h3 id="1-3-数据流程处理分析"><a href="#1-3-数据流程处理分析" class="headerlink" title="1.3 数据流程处理分析"></a>1.3 数据流程处理分析</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/flume/flume-6.JPG" alt=""></p><h3 id="1-4-功能实现"><a href="#1-4-功能实现" class="headerlink" title="1.4 功能实现"></a>1.4 功能实现</h3><p>1、在服务器A和服务器B上，创建配置文件exec_source_avro_sink.conf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1 r2 r3</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /root/data/access.log</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = static</span><br><span class="line">## static 拦截器的功能就是往采集到的数据的 header 中插入自</span><br><span class="line">## 己定义的 key-value 对</span><br><span class="line">a1.sources.r1.interceptors.i1.key = type</span><br><span class="line">a1.sources.r1.interceptors.i1.value = access</span><br><span class="line"></span><br><span class="line">a1.sources.r2.type = exec</span><br><span class="line">a1.sources.r2.command = tail -F /root/data/nginx.log</span><br><span class="line">a1.sources.r2.interceptors = i2</span><br><span class="line">a1.sources.r2.interceptors.i2.type = static</span><br><span class="line">a1.sources.r2.interceptors.i2.key = type</span><br><span class="line">a1.sources.r2.interceptors.i2.value = nginx</span><br><span class="line"></span><br><span class="line">a1.sources.r3.type = exec</span><br><span class="line">a1.sources.r3.command = tail -F /root/data/web.log</span><br><span class="line">a1.sources.r3.interceptors = i3</span><br><span class="line">a1.sources.r3.interceptors.i3.type = static</span><br><span class="line">a1.sources.r3.interceptors.i3.key = type</span><br><span class="line">a1.sources.r3.interceptors.i3.value = web</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = 192.168.200.101</span><br><span class="line">a1.sinks.k1.port = 41414</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 20000</span><br><span class="line">a1.channels.c1.transactionCapacity = 10000</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r2.channels = c1</span><br><span class="line">a1.sources.r3.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>2、在服务器C上创建配置文件avro_source_hdfs_sink.conf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#定义 agent 名， source、 channel、 sink 的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">#定义 source</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = mini2</span><br><span class="line">a1.sources.r1.port =41414</span><br><span class="line"></span><br><span class="line">#添加时间拦截器</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type =</span><br><span class="line">org.apache.flume.interceptor.TimestampInterceptor$Builder</span><br><span class="line"></span><br><span class="line">#定义 channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 20000</span><br><span class="line">a1.channels.c1.transactionCapacity = 10000</span><br><span class="line"></span><br><span class="line">#定义 sink</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path=hdfs://192.168.200.101:9000/source/logs/%&#123;ty</span><br><span class="line">pe&#125;/%Y%m%d</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix =events</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat = Text</span><br><span class="line">#时间类型</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">#生成的文件不按条数生成</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line">#生成的文件按时间生成</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line">#生成的文件按大小生成</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 10485760</span><br><span class="line">#批量写入 hdfs 的个数</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 10000</span><br><span class="line">flume 操作 hdfs 的线程数（包括新建，写入等）</span><br><span class="line">a1.sinks.k1.hdfs.threadsPoolSize=10</span><br><span class="line">#操作 hdfs 超时时间</span><br><span class="line">a1.sinks.k1.hdfs.callTimeout=30000</span><br><span class="line"></span><br><span class="line">#组装 source、 channel、 sink</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>3、配置完成之后，在服务器A和B上的/root/data有数据文件access.log、nginx.log、web.lob。先启动服务器C上的flume，启动命令<br>在flume安装目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f conf/avro_source_hdfs_sink.conf -name a1 -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure><p>然后在启动服务器上的 A 和 B，启动命令<br>在 flume 安装目录下执行 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f conf/exec_source_avro_sink.conf -name a1 -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建本地yum仓库</title>
      <link href="/Linux/2018/02/28/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0yum%E4%BB%93%E5%BA%93/"/>
      <url>/Linux/2018/02/28/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0yum%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="通过挂在光盘搭建本地yum仓库方法"><a href="#通过挂在光盘搭建本地yum仓库方法" class="headerlink" title="通过挂在光盘搭建本地yum仓库方法"></a>通过挂在光盘搭建本地yum仓库方法</h1><ul><li>1、挂载光盘</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在/media目录下新建一个目录 cdrom，用来将光盘挂在到该目录下</span><br><span class="line"></span><br><span class="line">[root@Linux ~]# mount /dev/cdrom /media/cdrom/</span><br><span class="line"></span><br><span class="line">mount: /dev/sr0 写保护，将以只读方式挂载</span><br><span class="line"></span><br><span class="line">[root@Linux ~]# mount /dev/sr0 /media/cdrom/</span><br><span class="line"></span><br><span class="line">mount: /dev/sr0 写保护，将以只读方式挂载</span><br><span class="line"></span><br><span class="line">mount: /dev/sr0 已经挂载或 /media/cdrom 忙</span><br><span class="line"></span><br><span class="line">/dev/sr0 已经挂载到 /media/cdrom 上</span><br></pre></td></tr></table></figure><ul><li>2、检查是否挂在成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@Linux ~]# df -h</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sda3        28G  11G  18G  37% /</span><br><span class="line">devtmpfs        904M    0  904M    0% /dev</span><br><span class="line">tmpfs          913M    0  913M    0% /dev/shm</span><br><span class="line">tmpfs          913M  8.6M  904M    1% /run</span><br><span class="line">tmpfs          913M    0  913M    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1      497M  129M  368M  26% /boot</span><br><span class="line">tmpfs          183M    0  183M    0% /run/user/0</span><br><span class="line">/dev/sr0        4.1G  4.1G    0  100% /media/cdrom</span><br></pre></td></tr></table></figure><p>可以看到光盘已经挂在到/media/cdrom目录下了</p><ul><li><p>3、进入yum库所在的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">ls</span><br><span class="line">CentOS-Base.repo      CentOS-Media.repo</span><br><span class="line">CentOS-CR.repo        CentOS-Sources.repo</span><br><span class="line">CentOS-Debuginfo.repo  CentOS-Vault.repo</span><br><span class="line">CentOS-fasttrack.repo</span><br></pre></td></tr></table></figure></li><li><p>4、将该目录下的文件都修改文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class="line"># mv CentOS-Debuginfo.repo CentOS-Debuginfo.repo.bak</span><br><span class="line"># mv CentOS-Vault.repo CentOS-Vault.repo.bak</span><br><span class="line"># mv CentOS-CR.repo CentOS-CR.repo.bak</span><br><span class="line"># mv CentOS-fasttrack.repo CentOS-fasttrack.repo.bak</span><br><span class="line"># mv CentOS-Sources.repo CentOS-Sources.repo.bak</span><br></pre></td></tr></table></figure></li></ul><p>只保留CentOS-Media.repo文件，方便yum库索引，提高效率（无网状态下）</p><ul><li>5、进入 CentOS-Media.repo 文件，修改yum库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[c7-media]</span><br><span class="line">name=CentOS-$releasever - Media</span><br><span class="line">baseurl=file:///media/CentOS/</span><br><span class="line">​        file:///media/cdrom/</span><br><span class="line">​        file:///media/cdrecorder/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><p>将gpgcheck=1改为gpgcheck=0（gpgcheck是gpg验证是否开启的选项，1是开启，0是不开启，一般情况可以关掉。）<br>将enabled=0改为enabled=1（enabled是开启选项，1是开启，0是不开启）<br>然后保存  退出文件</p><ul><li>6、测试yum库能否安装软件<br>能够成功安装就说明yum库安装成功</li></ul><h1 id="yum的基本命令"><a href="#yum的基本命令" class="headerlink" title="yum的基本命令"></a>yum的基本命令</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><ul><li>yum install 全部安装</li><li>yum install package1 安装指定的安装包package1</li><li>yum groupinsall group1 安装程序组group1</li></ul><h2 id="2-更新和升级"><a href="#2-更新和升级" class="headerlink" title="2 更新和升级"></a>2 更新和升级</h2><ul><li>yum update 全部更新</li><li>yum update package1 更新指定程序包package1</li><li>yum check-update 检查可更新的程序</li><li>yum upgrade package1 升级指定程序包package1</li><li>yum groupupdate group1 升级程序组group1</li></ul><h2 id="3-查找和显示"><a href="#3-查找和显示" class="headerlink" title="3 查找和显示"></a>3 查找和显示</h2><ul><li>yum info package1 显示安装包信息package1</li><li>yum list 显示所有已经安装和可以安装的程序包</li><li>yum list package1 显示指定程序包安装情况package1</li><li>yum groupinfo group1 显示程序组group1信息</li><li>yum search string 根据关键字string查找安装包</li></ul><h2 id="4-删除程序"><a href="#4-删除程序" class="headerlink" title="4 删除程序"></a>4 删除程序</h2><ul><li>yum remove &#124; erase package1 删除程序包package1</li><li>yum groupremove group1 删除程序组group1</li><li>yum deplist package1 查看程序package1依赖情况</li></ul><h2 id="5-清除缓存"><a href="#5-清除缓存" class="headerlink" title="5 清除缓存"></a>5 清除缓存</h2><ul><li>yum clean packages 清除缓存目录下的软件包</li><li>yum clean headers 清除缓存目录下的 headers</li><li>yum clean oldheaders 清除缓存目录下旧的 headers</li><li>yum clean, yum clean all (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers</li></ul><h1 id="搭建自己的本地YUM仓库"><a href="#搭建自己的本地YUM仓库" class="headerlink" title="搭建自己的本地YUM仓库"></a>搭建自己的本地YUM仓库</h1><p>由于ISO镜像中的软件包太少、太老，所以我的实验使用的yum源是阿里云镜像源；但是阿里云镜像源必须要连接外网才可以使用，做实验时倒无所谓；但是在公司部署大量服务器时会占用出口带宽。另外有些特殊的镜像源架设在国外，使用起来很不稳定。所以本地yum源仓库时必要的。<br>下面是我在部署公司本地yum仓库时的具体部署步骤（以epel-7源为例）：</p><h2 id="1、部署环境："><a href="#1、部署环境：" class="headerlink" title="1、部署环境："></a>1、部署环境：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统：Centos7 x86_64</span><br><span class="line">应用服务：httpd、createrepo、reposync</span><br><span class="line">镜像源：https://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure><h2 id="2、现在阿里云镜像源repo文件到本地："><a href="#2、现在阿里云镜像源repo文件到本地：" class="headerlink" title="2、现在阿里云镜像源repo文件到本地："></a>2、现在阿里云镜像源repo文件到本地：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] wget -O /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure><h2 id="3、安装httpd服务，用于提供存放yum源："><a href="#3、安装httpd服务，用于提供存放yum源：" class="headerlink" title="3、安装httpd服务，用于提供存放yum源："></a>3、安装httpd服务，用于提供存放yum源：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] yum install httpd -y</span><br><span class="line">使用默认配置即可，如果有特殊需求可以修改配置文件/etc/httpd/conf/httpd.conf</span><br><span class="line">http默认家目录/var/www/html</span><br></pre></td></tr></table></figure><h2 id="4、安装yum-utils提供reporsync服务："><a href="#4、安装yum-utils提供reporsync服务：" class="headerlink" title="4、安装yum-utils提供reporsync服务："></a>4、安装yum-utils提供reporsync服务：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] yum install yum-utils -y</span><br></pre></td></tr></table></figure><h2 id="5、选择指定仓库标识作为本地yum源："><a href="#5、选择指定仓库标识作为本地yum源：" class="headerlink" title="5、选择指定仓库标识作为本地yum源："></a>5、选择指定仓库标识作为本地yum源：</h2><p>执行yum repolist命令查看yum仓库标识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">* base: mirrors.163.com</span><br><span class="line">* epel: mirrors.aliyun.com</span><br><span class="line">* extras: mirrors.163.com</span><br><span class="line">* updates: mirrors.163.com</span><br><span class="line">repo id            repo name                                        status</span><br><span class="line">base/7/x86_64      CentOS-7 - Base                                  9,363</span><br><span class="line">epel/x86_64        Extra Packages for Enterprise Linux 7 - x86_64  11,681</span><br><span class="line">extras/7/x86_64    CentOS-7 - Extras                                380</span><br><span class="line">updates/7/x86_64  CentOS-7 - Updates                              1,838</span><br><span class="line">repolist: 23,262</span><br></pre></td></tr></table></figure></p><p>我使用epel作为本地yum源，用/var/www/html作为yum仓库根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# reposync -r epel -p /var/www/html/</span><br></pre></td></tr></table></figure></p><p>命令执行完毕后，会将阿里云中的epel源同步到本地/var/www/html中；在/var/www/html中自动创建epel目录用于存放rpm包；第一次同步是时间可能较长，大概1W多个rpm包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# </span><br><span class="line">[root@localhost ~]# </span><br><span class="line">[root@localhost ~]# ll /var/www/html/</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 31 root root 4096 May 27 23:50 epel</span><br></pre></td></tr></table></figure><h2 id="6、createrepo-命令创对-var-www-html-epel下的-rpm-包-创建为本地的-YUM"><a href="#6、createrepo-命令创对-var-www-html-epel下的-rpm-包-创建为本地的-YUM" class="headerlink" title="6、createrepo 命令创对/var/www/html/epel下的 rpm 包 创建为本地的 YUM"></a>6、createrepo 命令创对/var/www/html/epel下的 rpm 包 创建为本地的 YUM</h2><p>仓库，目的是为生成repodata目录并自动创建索引信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# createrepo -pdo /var/www/html/epel/ /var/www/html/epel/　　#第一个目录是repodata存放目录，第二个目录是需要生成索引信息yum源仓库目录</span><br></pre></td></tr></table></figure></p><h2 id="7、验证本地yum源是否能正常使用："><a href="#7、验证本地yum源是否能正常使用：" class="headerlink" title="7、验证本地yum源是否能正常使用："></a>7、验证本地yum源是否能正常使用：</h2><p>登录其他内网其他服务器，要能与yum源服务器通信；编写repo文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/epel-7.repo内容如下</span><br><span class="line">[epel]</span><br><span class="line">name=local epel</span><br><span class="line">baseurl=http://yum源服务器IP/epel</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure></p><p>备份其他repo文件至/etc/yum.repos.d/repobak目录下，以防影响测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# ll /etc/yum.repos.d/</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 1 root root  79 May 28 17:26 epel.repo</span><br><span class="line">drwxr-xr-x. 2 root root 4096 May 28 17:25 repobak</span><br></pre></td></tr></table></figure><p>执行yum clean all、yum makecache：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum clean all</span><br><span class="line">[root@localhost yum.repos.d]# yum makecache</span><br></pre></td></tr></table></figure><h2 id="7、为保证本地yum源能和阿里云镜像源同步，可以通过脚本定时任务实现："><a href="#7、为保证本地yum源能和阿里云镜像源同步，可以通过脚本定时任务实现：" class="headerlink" title="7、为保证本地yum源能和阿里云镜像源同步，可以通过脚本定时任务实现："></a>7、为保证本地yum源能和阿里云镜像源同步，可以通过脚本定时任务实现：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /root/yum-update.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">datetime=`date +&quot;%Y-%m-%d&quot;`</span><br><span class="line">exec &gt; /var/log/epel.log　　#同步日志输出</span><br><span class="line">reposync -d -r epel -p /var/www/html/  　　#同步镜像源</span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">​    createrepo --update  /var/www/html/epel 　　#每次添加新的rpm时,必须更新epel索引信息</span><br><span class="line">​    echo &quot;SUCESS: $datetime epel update successful&quot;else</span><br><span class="line">​    echo &quot;ERROR: $datetime epel update failed&quot;fi</span><br></pre></td></tr></table></figure><p>定时任务：每周六凌晨三点同步yum源<br>crontab -e<br>0 3 <em> </em> 6 /bin/bash /root/yum-update.sh</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MapReduce</title>
      <link href="/HADOOP/2018/02/27/MapReduce%E6%A6%82%E8%BF%B0/"/>
      <url>/HADOOP/2018/02/27/MapReduce%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、初始MapReduce"><a href="#一、初始MapReduce" class="headerlink" title="一、初始MapReduce"></a>一、初始MapReduce</h1><h2 id="1-MapReduce计算模型介绍"><a href="#1-MapReduce计算模型介绍" class="headerlink" title="1. MapReduce计算模型介绍"></a>1. MapReduce计算模型介绍</h2><h3 id="1-1-理解MapReduce思想"><a href="#1-1-理解MapReduce思想" class="headerlink" title="1.1 理解MapReduce思想"></a>1.1 理解MapReduce思想</h3><ul><li>MapReduce 思想在 生 活中 处处 可见 。 或 多 或少 都曾 接触 过这 种 思想 。MapReduce 的思想核心是“ 分而治之”， 适用于大量复杂的任务处理场景 （大规模数据处理场景）。 即使是发布过论文实现分布式计算的谷歌也只是实现了这种思想，而不是自己原创。</li><li><code>Map 负责“分”</code>，即把复杂的任务分解为若干个“简单的任务”来并行处理。可以进行拆分的前提是这些小任务可以<code>并行计算</code>，彼此间几乎<code>没有依赖关系</code>。</li><li><code>Reduce 负责“合”</code>，即对 map 阶段的结果进行全局<code>汇总</code>。</li><li>这两个阶段合起来正是 MapReduce 思想的体现。</li><li>还有一个比较形象的语言解释 MapReduce：</li><li>我们要数图书馆中的所有书。你数 1 号书架，我数 2 号书架。这就是“ Map” 。我们人越多，数书就更快。</li><li>现在我们到一起，把所有人的统计数加在一起。这就是“ Reduce” 。</li></ul><h3 id="1-2-Hadoop-MapReduce设计思想"><a href="#1-2-Hadoop-MapReduce设计思想" class="headerlink" title="1.2 Hadoop MapReduce设计思想"></a>1.2 Hadoop MapReduce设计思想</h3><ul><li>MapReduce 是一个分布式运算程序的编程框架，核心功能是将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，并发运行在Hadoop 集群上。</li><li>既然是做计算的框架，那么表现形式就是有个输入（ input）， MapReduce 操作这个输入（ input），通过本身定义好的计算模型，得到一个输出（ output）。</li><li>对许多开发者来说，自己完完全全实现一个并行计算程序难度太大，而MapReduce 就是一种简化并行计算的编程模型，降低了开发并行应用的入门门槛。</li><li>Hadoop MapReduce 构思体现在如下的三个方面：<ul><li>如何对付大数据处理： 分而治之</li><li>对相互间不具有计算依赖关系的大数据，实现并行最自然的办法就是采取分而治之的策略。 并行计算的第一个重要问题是如何划分计算任务或者计算数据以便对划分的子任务或数据块同时进行计算。 不可分拆的计算任务或相互间有依赖关系的数据无法进行并行计算！</li><li>构建抽象模型： Map 和 Reduce</li><li>MapReduce 借鉴了函数式语言中的思想，用 Map 和 Reduce 两个函数提供了高层的并行编程抽象模型。</li><li>Map: 对一组数据元素进行某种重复式的处理；</li><li>Reduce: 对 Map 的中间结果进行某种进一步的结果整理。</li><li>MapReduce 中定义了如下的 Map 和 Reduce 两个抽象的编程接口，由用户去<br>编程实现:</li><li>map: (k1; v1) → [(k2; v2)]</li><li>reduce: (k2; [v2]) → [(k3; v3)]</li><li>Map 和 Reduce 为程序员提供了一个清晰的操作接口抽象描述。 通过以上两个编程接口，大家可以看出 <code>MapReduce 处理的数据类型是&lt;key,value&gt;键值对</code>。</li><li>统一构架， 隐藏系统层细节</li><li>如何提供统一的计算框架， 如果没有统一封装底层细节， 那么程序员则需要考虑诸如数据存储、划分、分发、结果收集、错误恢复等诸多细节；为此，MapReduce 设计并提供了统一的计算框架，为程序员隐藏了绝大多数系统层面的处理细节。</li></ul></li><li>MapReduce 最大的亮点在于通过抽象模型和计算框架把需要做什么(what need to do)与具体怎么做(how to do)分开了，为程序员提供一个抽象和高层的编程接口和框架。 程序员仅需要关心其应用层的具体计算问题，仅需编写少量的处理应用本身计算问题的程序代码。如何具体完成这个并行计算任务所相关的诸多系统层细节被隐藏起来,交给计算框架去处理：从分布代码的执行，到大到数千小到单个节点集群的自动调度使用。</li></ul><h3 id="1-3-MapReduce框架"><a href="#1-3-MapReduce框架" class="headerlink" title="1.3 MapReduce框架"></a>1.3 MapReduce框架</h3><ul><li>一个完整的 mapreduce 程序在分布式运行时有三类实例进程：<ul><li>MRAppMaster：负责整个程序的过程调度及状态协调</li><li>MapTask：负责 map 阶段的整个数据处理流程</li><li>ReduceTask：负责 reduce 阶段的整个数据处理流程</li></ul></li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/mapreduce/mr-1.JPG" alt=""></p><h2 id="2-MapReduce编程规范及示例编写"><a href="#2-MapReduce编程规范及示例编写" class="headerlink" title="2. MapReduce编程规范及示例编写"></a>2. MapReduce编程规范及示例编写</h2><h3 id="2-1-编程规范"><a href="#2-1-编程规范" class="headerlink" title="2.1 编程规范"></a>2.1 编程规范</h3><p>（ 1） 用户编写的程序分成三个部分： Mapper， Reducer， Driver(提交运行 mr 程序的客户端)<br>（ 2） Mapper 的输入数据是 KV 对的形式（ KV 的类型可自定义）<br>（ 3） Mapper 的输出数据是 KV 对的形式（ KV 的类型可自定义）<br>（ 4） Mapper 中的业务逻辑写在 map()方法中<br>（ 5） map()方法（ maptask 进程）对每一个&lt;K,V&gt;调用一次<br>（ 6） Reducer 的输入数据类型对应 Mapper 的输出数据类型，也是 KV<br>（ 7） Reducer 的业务逻辑写在 reduce()方法中<br>（ 8） Reducetask 进程对每一组相同 k 的&lt;k,v&gt;组调用一次 reduce()方法<br>（ 9） 用户自定义的 Mapper 和 Reducer 都要继承各自的父类<br>（ 10） 整个程序需要一个 Drvier 来进行提交，提交的是一个描述了各种必要信息的 job 对象</p><h3 id="2-2-WordCount示例编写"><a href="#2-2-WordCount示例编写" class="headerlink" title="2.2 WordCount示例编写"></a>2.2 WordCount示例编写</h3><ul><li>需求：在一堆给定的文本文件中统计输出每一个单词出现的总次数<br>（1）定义一个mapper类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//首先要定义四个泛型的类型</span><br><span class="line">//keyin: LongWritable valuein: Text</span><br><span class="line">//keyout: Text valueout:IntWritable</span><br><span class="line">public class WordCountMapper extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt; &#123;</span><br><span class="line">// map 方法的生命周期： 框架每传一行数据就被调用一次</span><br><span class="line">// key : 这一行的起始点在文件中的偏移量</span><br><span class="line">// value: 这一行的内容</span><br><span class="line">@Override</span><br><span class="line">protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">// 拿到一行数据转换为 string</span><br><span class="line">String line = value.toString();</span><br><span class="line">// 将这一行切分出各个单词</span><br><span class="line">String[] words = line.split(&quot; &quot;);</span><br><span class="line">// 遍历数组，输出&lt;单词， 1&gt;</span><br><span class="line">for (String word : words) &#123;</span><br><span class="line">context.write(new Text(word), new IntWritable(1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）定义一个reducer类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//生命周期：框架每传递进来一个 kv 组， reduce 方法被调用一次</span><br><span class="line">@Override</span><br><span class="line">protected void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context) throws IOException,</span><br><span class="line">InterruptedException &#123;</span><br><span class="line">//定义一个计数器</span><br><span class="line">        int count = 0;</span><br><span class="line">        //遍历这一组 kv 的所有 v，累加到 count 中</span><br><span class="line">        for(IntWritable value:values)&#123;</span><br><span class="line">        count += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">context.write(key, new IntWritable(count));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（3）定义一个主类，用来描述job并提交job<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class WordCountRunner &#123;</span><br><span class="line">//把业务逻辑相关的信息（哪个是 mapper，哪个是 reducer， 要处理的数据在哪里，输出的结果放哪里……）描述成一个 job 对象</span><br><span class="line">//把这个描述好的 job 提交给集群去运行</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">Configuration conf = new Configuration();</span><br><span class="line">Job wcjob = Job.getInstance(conf);</span><br><span class="line">//指定我这个 job 所在的 jar 包</span><br><span class="line">// wcjob.setJar(&quot;/home/hadoop/wordcount.jar&quot;);</span><br><span class="line">wcjob.setJarByClass(WordCountRunner.class);</span><br><span class="line"></span><br><span class="line">wcjob.setMapperClass(WordCountMapper.class);</span><br><span class="line">wcjob.setReducerClass(WordCountReducer.class);</span><br><span class="line">        //设置我们的业务逻辑 Mapper 类的输出 key 和 value 的数据类型</span><br><span class="line">        wcjob.setMapOutputKeyClass(Text.class);</span><br><span class="line">        wcjob.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        //设置我们的业务逻辑 Reducer 类的输出 key 和 value 的数据类型</span><br><span class="line">        wcjob.setOutputKeyClass(Text.class);</span><br><span class="line">        wcjob.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        //指定要处理的数据所在的位置</span><br><span class="line">        FileInputFormat.setInputPaths(wcjob, &quot;hdfs://hdp-server01:9000/wordcount/data/big.txt&quot;);</span><br><span class="line">        //指定处理完成之后的结果所保存的位置</span><br><span class="line">        FileOutputFormat.setOutputPath(wcjob, new Path(&quot;hdfs://hdp-server01:9000/wordcount/output/&quot;));</span><br><span class="line"></span><br><span class="line">//向 yarn 集群提交这个 job</span><br><span class="line">boolean res = wcjob.waitForCompletion(true);</span><br><span class="line">System.exit(res?0:1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-MapReduce程序运行模式"><a href="#3-MapReduce程序运行模式" class="headerlink" title="3. MapReduce程序运行模式"></a>3. MapReduce程序运行模式</h2><h3 id="3-1-本地运行模式"><a href="#3-1-本地运行模式" class="headerlink" title="3.1 本地运行模式"></a>3.1 本地运行模式</h3><p>（ 1） mapreduce 程序是被提交给 LocalJobRunner 在本地以单进程的形式运行<br>（ 2） 而处理的数据及输出结果可以在本地文件系统，也可以在 hdfs 上<br>（ 3） 怎样实现本地运行？写一个程序，不要带集群的配置文件<br>    本质是程序的 conf 中是否有 mapreduce.framework.name=local 以及yarn.resourcemanager.hostname 参数<br>（ 4） 本地模式非常便于进行业务逻辑的 debug，只要在 eclipse 中打断点即可</p><h3 id="3-2-集群运行模式"><a href="#3-2-集群运行模式" class="headerlink" title="3.2 集群运行模式"></a>3.2 集群运行模式</h3><p>（ 1） 将 mapreduce 程序提交给 yarn 集群，分发到很多的节点上并发执行<br>（ 2） 处理的数据和输出结果应该位于 hdfs 文件系统<br>（ 3） 提交集群的实现步骤：</p><pre><code>- 将程序打成 JAR 包，然后在集群的任意一个节点上用 hadoop 命令启动    - hadoop jar wordcount.jar cn.itcast.bigdata.mrsimple.WordCountDriver args</code></pre><h1 id="二、深入MapReduce"><a href="#二、深入MapReduce" class="headerlink" title="二、深入MapReduce"></a>二、深入MapReduce</h1><h2 id="1-MapReduce的输入和输出"><a href="#1-MapReduce的输入和输出" class="headerlink" title="1. MapReduce的输入和输出"></a>1. MapReduce的输入和输出</h2><ul><li>MapReduce 框架运转在<code>&lt;key,value&gt;键值对</code>上，也就是说，框架把作业的输入看成是一组&lt;key,value&gt;键值对，同样也产生一组&lt;key,value&gt;键值对作为作业的输出，这两组键值对可能是不同的。</li><li>一个 MapReduce 作业的输入和输出类型如下图所示：可以看出在整个标准的流程中，会有三组&lt;key,value&gt;键值对类型的存在。</li></ul><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/mapreduce/mr-2.JPG" alt=""></p><h2 id="2-MapReduce的处理流程解析"><a href="#2-MapReduce的处理流程解析" class="headerlink" title="2. MapReduce的处理流程解析"></a>2. MapReduce的处理流程解析</h2><h3 id="2-1-Mapper任务执行过程详解"><a href="#2-1-Mapper任务执行过程详解" class="headerlink" title="2.1 Mapper任务执行过程详解"></a>2.1 Mapper任务执行过程详解</h3><ul><li><strong>第一阶段：</strong>是把输入目录下文件按照一定的标准逐个进行<code>逻辑切片</code>， 形成切片规划。 默认情况下， Split size = Block size。 每一个切片由一个MapTask 处理。 （ getSplits）</li><li><strong>第二阶段：</strong>是对切片中的数据按照一定的规则解析成&lt;key,value&gt;对。 默认规则是把每一行文本内容解析成键值对。 key 是每一行的起始位置(单位是字节)， value 是本行的文本内容。 （ TextInputFormat）</li><li><strong>第三阶段：</strong>是调用Mapper 类中的 map 方法。 上阶段中每解析出来的一个&lt;k,v&gt;，调用一次 map 方法。 每次调用 map 方法会输出零个或多个键值对。</li><li><strong>第四阶段：</strong>是按照一定的规则对第三阶段输出的键值对进行分区。 默认是只有一个区。 分区的数量就是 Reducer 任务运行的数量。默认只有一个Reducer 任务。</li><li><strong>第五阶段：</strong>是对每个分区中的键值对进行排序。首先，按照键进行排序，对于键相同的键值对，按照值进行排序。比如三个键值对&lt;2,2&gt;、 &lt;1,3&gt;、&lt;2,1&gt;，键和值分别是整数。那么排序后的结果是&lt;1,3&gt;、 &lt;2,1&gt;、 &lt;2,2&gt;。如果有第六阶段，那么进入第六阶段；如果没有，直接输出到文件中。</li><li><strong>第六阶段：</strong>是对数据进行局部聚合处理，也就是 combiner 处理。 键相等的键值对会调用一次 reduce 方法。经过这一阶段，数据量会减少。 本阶段默认是没有的。</li></ul><h3 id="2-2-Reducer任务执行过程详解"><a href="#2-2-Reducer任务执行过程详解" class="headerlink" title="2.2 Reducer任务执行过程详解"></a>2.2 Reducer任务执行过程详解</h3><ul><li><strong>第一阶段：</strong>是 Reducer 任务会主动从 Mapper 任务复制其输出的键值对。Mapper 任务可能会有很多，因此 Reducer 会复制多个 Mapper 的输出。</li><li><strong>第二阶段：</strong>是把复制到 Reducer 本地数据，全部进行合并，即把分散的数据合并成一个大的数据。再对合并后的数据排序。</li><li><p><strong>第三阶段：</strong>是对排序后的键值对调用 reduce 方法。 键相等的键值对调用一次reduce 方法，每次调用会产生零个或者多个键值对。最后把这些输出的键值对写入到 HDFS 文件中。</p></li><li><p><code>在整个MapReduce程序的开发过程中，我们最大的工作量是覆盖map函数和覆盖reduce函数。</code></p></li></ul><h1 id="三、MapReduce的序列化"><a href="#三、MapReduce的序列化" class="headerlink" title="三、MapReduce的序列化"></a>三、MapReduce的序列化</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul><li><code>序列化</code>（ Serialization）是指把结构化对象转化为字节流。</li><li><code>反序列化</code> （ Deserialization）是序列化的逆过程。把字节流转为结构化对象。</li><li>当要在进程间传递对象或持久化对象的时候，就需要序列化对象成字节流，反之当要将接收到或从磁盘读取的字节流转换为对象，就要进行反序列化。</li><li>Java 的序列化（ Serializable） 是一个重量级序列化框架，一个对象被序列化后，会附带很多额外的信息（各种校验信息， header，继承体系…），不便于在网络中高效传输；所以， hadoop 自己开发了一套序列化机制（ Writable），精简，高效。 不用像 java 对象类一样传输多层的父子关系，需要哪个属性就传输哪个属性值，大大的减少网络传输的开销。</li><li>Writable 是 Hadoop 的序列化格式，hadoop 定义了这样一个 Writable 接口。<br>一个类要支持可序列化只需实现这个接口即可。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Writable&#123;</span><br><span class="line">  void write(DataOutput out) throws IOException;</span><br><span class="line">  void readFileds(DataInput in) throws IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Wtitable序列化接口"><a href="#2-Wtitable序列化接口" class="headerlink" title="2. Wtitable序列化接口"></a>2. Wtitable序列化接口</h2><ul><li>如需要将自定义的 bean 放在 key 中传输，则还需要实现 comparable 接口，因为 mapreduce 框中的 shuffle 过程一定会对 key 进行排序,此时，自定义的bean 实现的接口应该是：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> dfFow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> dfFow, <span class="keyword">long</span> sumFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.dfFow = dfFow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> dfFow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.dfFow = dfFow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + dfFow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> upFlow,<span class="keyword">long</span> dfFow )</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.dfFow = dfFow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + dfFow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDfFow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfFow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSumFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow+<span class="string">"\t"</span>+dfFow+<span class="string">"\t"</span>+sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeLong(upFlow);</span><br><span class="line">        out.writeLong(dfFow);</span><br><span class="line">        out.writeLong(sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化的方法，反序列化时，从流中读取到各个字段的顺序应该与序列化时写出去的顺序保持一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = in.readLong();</span><br><span class="line">        <span class="keyword">this</span>.dfFow = in.readLong();</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = in.readLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象比较大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sumFlow&gt;o.getSumFlow()?-<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * compareTo 方法用于将当前对象与方法的参数进行比较。</span></span><br><span class="line"><span class="comment">     *如果指定的数与参数相等返回 0。</span></span><br><span class="line"><span class="comment">     * 如果指定的数小于参数返回 -1。</span></span><br><span class="line"><span class="comment">     * 如果指定的数大于参数返回 1。</span></span><br><span class="line"><span class="comment">     * 例如： o1.compareTo(o2);</span></span><br><span class="line"><span class="comment">     * 返回正数的话，当前对象（调用 compareTo 方法的对象 o1）要排在比较</span></span><br><span class="line"><span class="comment">     * 对象（ compareTo 传参对象 o2）后面，返回负数的话，放在前面。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowSumMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    Text k = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    FlowBean v = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] fileds = line.split(<span class="string">"\t"</span>);</span><br><span class="line">        String phoneNum = fileds[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">long</span> upFlow = Long.parseLong(fileds[fileds.length-<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">long</span> dFlow = Long.parseLong(fileds[fileds.length-<span class="number">2</span>]);</span><br><span class="line">        k.set(phoneNum);</span><br><span class="line">        v.set(upFlow,dFlow);</span><br><span class="line">        context.write(k,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>reducer实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowSumReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">FlowBean</span>,<span class="title">Text</span>,<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    FlowBean v = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;FlowBean&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> upFlowCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> dFlowCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (FlowBean bean :values)&#123;</span><br><span class="line">            upFlowCount +=bean.getUpFlow();</span><br><span class="line">            dFlowCount +=bean.getDfFow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v.set(upFlowCount,dFlowCount);</span><br><span class="line">        context.write(key,v);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序入口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowSumRunner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//把业务逻辑相关的信息（哪个是maooer,哪个是reduce，要处理的数据在哪里，输出结果放哪）</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">//指定我job所在的jar包</span></span><br><span class="line">        job.setJarByClass(FlowSumRunner.class);</span><br><span class="line"></span><br><span class="line">        job.setMapperClass(FlowSumMapper.class);</span><br><span class="line">        job.setReducerClass(FlowSumReducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置业务逻辑Mapper类的输出keu和value的数据类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(FlowBean.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置业务逻辑Reduce类的输出key和value的数据类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line"></span><br><span class="line">        job.setNumReduceTasks(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定要处理的数据所在的位置</span></span><br><span class="line">        <span class="comment">//FileInputFormat.setInputPaths(job,"hdfs://node-1:9000/wordcount/input/somewords.txt");</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="string">"D:\\myProject\\wordcount\\input\\http.txt"</span>);</span><br><span class="line">        <span class="comment">//指定处理完成之后的结果所保存的位置</span></span><br><span class="line">        <span class="comment">//FileOutputFormat.setOutputPath(job,new Path("hdfs://node-1:9000/wordcount/output/"));</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(<span class="string">"D:\\myProject\\wordcount\\output"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向yarn集群提交job</span></span><br><span class="line">        <span class="keyword">boolean</span> wait = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(wait?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、Mapreduce的排序"><a href="#四、Mapreduce的排序" class="headerlink" title="四、Mapreduce的排序"></a>四、Mapreduce的排序</h1><p>##1.需求</p><ul><li>在得出统计每一个用户（手机号）所耗费的总上行流量、下行流量，总流量结果的基础之上再加一个需求：将统计结果按照总流量倒序排序。</li></ul><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h2><ul><li>基本思路：</li><li><strong>实现自定义的bean来封装流量信息，并将bean作为map输出的key来传输</strong></li><li>MR 程序在处理数据的过程中会对数据排序(map 输出的 kv 对传输到 reduce之前，会排序)，排序的依据是 map 输出的 key。 所以，我们如果要实现自己需要的排序规则，则可以考虑将排序因素放到 key 中，让 key 实现接口：</li><li>WritableComparable， 然后重写 key 的 compareTo 方法。</li></ul><h2 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h2><p>自定义的bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> dfFow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> dfFow, <span class="keyword">long</span> sumFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.dfFow = dfFow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> dfFow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.dfFow = dfFow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + dfFow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> upFlow,<span class="keyword">long</span> dfFow )</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.dfFow = dfFow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + dfFow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDfFow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfFow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSumFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow+<span class="string">"\t"</span>+dfFow+<span class="string">"\t"</span>+sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeLong(upFlow);</span><br><span class="line">        out.writeLong(dfFow);</span><br><span class="line">        out.writeLong(sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化的方法，反序列化时，从流中读取到各个字段的顺序应该与序列化时写出去的顺序保持一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = in.readLong();</span><br><span class="line">        <span class="keyword">this</span>.dfFow = in.readLong();</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = in.readLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象比较大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sumFlow&gt;o.getSumFlow()?-<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * compareTo 方法用于将当前对象与方法的参数进行比较。</span></span><br><span class="line"><span class="comment">     *如果指定的数与参数相等返回 0。</span></span><br><span class="line"><span class="comment">     * 如果指定的数小于参数返回 -1。</span></span><br><span class="line"><span class="comment">     * 如果指定的数大于参数返回 1。</span></span><br><span class="line"><span class="comment">     * 例如： o1.compareTo(o2);</span></span><br><span class="line"><span class="comment">     * 返回正数的话，当前对象（调用 compareTo 方法的对象 o1）要排在比较</span></span><br><span class="line"><span class="comment">     * 对象（ compareTo 传参对象 o2）后面，返回负数的话，放在前面。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mapper实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowSumSortMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>,<span class="title">Text</span>,<span class="title">FlowBean</span>,<span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    FlowBean k = <span class="keyword">new</span> FlowBean();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] strings = line.split(<span class="string">"\t"</span>);</span><br><span class="line">        String phoneNum = strings[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> upFlowSum = Long.parseLong(strings[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">long</span> dFlowSum = Long.parseLong(strings[<span class="number">2</span>]);</span><br><span class="line">        k.set(upFlowSum,dFlowSum);</span><br><span class="line"></span><br><span class="line">        context.write(k,<span class="keyword">new</span> Text(phoneNum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>reducer实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowSumSortReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">FlowBean</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">FlowBean</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(FlowBean key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> upFlowCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> dFlowCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (FlowBean bean :values)&#123;</span><br><span class="line">            upFlowCount +=bean.getUpFlow();</span><br><span class="line">            dFlowCount +=bean.getDfFow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v.set(upFlowCount,dFlowCount);</span><br><span class="line">        context.write(key,v);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="五、Mapreduce的分区-Partitioner"><a href="#五、Mapreduce的分区-Partitioner" class="headerlink" title="五、Mapreduce的分区-Partitioner"></a>五、Mapreduce的分区-Partitioner</h1><h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h2><ul><li>将流量汇总统计结果按照手机归属地不同省份输出到不同文件中。</li></ul><h2 id="2-分析-1"><a href="#2-分析-1" class="headerlink" title="2. 分析"></a>2. 分析</h2><ul><li>Mapreduce 中会将 map 输出的 kv 对，按照相同 key 分组，然后分发给不同的 reducetask。</li><li>默认的分发规则为：根据 key 的 hashcode%reducetask 数来分发</li><li>所以：如果要按照我们自己的需求进行分组，则需要改写数据分发（分组）组件 Partitioner， 自定义一个 CustomPartitioner 继承抽象类： Partitioner， 然后在job 对象中，设置自定义 partitioner： job.setPartitionerClass(CustomPartitioner.class</li></ul><h2 id="3-实现-1"><a href="#3-实现-1" class="headerlink" title="3.实现"></a>3.实现</h2><p>自定义Partitioner：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvincePartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>,<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String,Integer&gt; provinceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        provinceMap.put(<span class="string">"134"</span>,<span class="number">0</span>);</span><br><span class="line">        provinceMap.put(<span class="string">"135"</span>,<span class="number">1</span>);</span><br><span class="line">        provinceMap.put(<span class="string">"136"</span>,<span class="number">2</span>);</span><br><span class="line">        provinceMap.put(<span class="string">"137"</span>,<span class="number">3</span>);</span><br><span class="line">        provinceMap.put(<span class="string">"138"</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text key, FlowBean value, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">        Integer code = provinceMap.get(key.toString().substring(<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (code !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mr程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowSumProvince</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowSumProvinceMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">FlowBean</span>&gt;</span>&#123;</span><br><span class="line">        Text k = <span class="keyword">new</span> Text();</span><br><span class="line">        FlowBean v = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//拿去一行文本转为string</span></span><br><span class="line">            String line = value.toString();</span><br><span class="line">            <span class="comment">//按照分隔符\t进行分割</span></span><br><span class="line">            String[] fileds = line.split(<span class="string">"\t"</span>);</span><br><span class="line">            <span class="comment">//获取用户手机号</span></span><br><span class="line">            String phoneNum = fileds[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> upFlow = Long.parseLong(fileds[fileds.length-<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">long</span> dFlow = Long.parseLong(fileds[fileds.length-<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">            k.set(phoneNum);</span><br><span class="line">            v.set(upFlow,dFlow);</span><br><span class="line"></span><br><span class="line">            context.write(k,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowSumProvinceReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">FlowBean</span>,<span class="title">Text</span>,<span class="title">FlowBean</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        FlowBean v = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;FlowBean&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> upFlowCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> dFlowCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (FlowBean bean:values)&#123;</span><br><span class="line">                upFlowCount +=bean.getUpFlow();</span><br><span class="line">                dFlowCount +=bean.getDfFow();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            v.set(upFlowCount,dFlowCount);</span><br><span class="line"></span><br><span class="line">            context.write(key,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//把业务逻辑相关的信息（哪个是maooer,哪个是reduce，要处理的数据在哪里，输出结果放哪）</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">//指定我job所在的jar包</span></span><br><span class="line">        job.setJarByClass(FlowSumProvince.class);</span><br><span class="line"></span><br><span class="line">        job.setMapperClass(FlowSumProvinceMapper.class);</span><br><span class="line">        job.setReducerClass(FlowSumProvinceReducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置业务逻辑Mapper类的输出keu和value的数据类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(FlowBean.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置业务逻辑Reduce类的输出key和value的数据类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line"></span><br><span class="line">        job.setNumReduceTasks(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里指定使用自定义分区组件</span></span><br><span class="line">        job.setPartitionerClass(ProvincePartitioner.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定要处理的数据所在的位置</span></span><br><span class="line">        <span class="comment">//FileInputFormat.setInputPaths(job,"hdfs://node-1:9000/wordcount/input/somewords.txt");</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="string">"D:\\myProject\\wordcount\\input\\http.txt"</span>);</span><br><span class="line">        <span class="comment">//指定处理完成之后的结果所保存的位置</span></span><br><span class="line">        <span class="comment">//FileOutputFormat.setOutputPath(job,new Path("hdfs://node-1:9000/wordcount/output/"));</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(<span class="string">"D:\\myProject\\wordcount\\output"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向yarn集群提交job</span></span><br><span class="line">        <span class="keyword">boolean</span> wait = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(wait?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="六、Mapreduce的combiner"><a href="#六、Mapreduce的combiner" class="headerlink" title="六、Mapreduce的combiner"></a>六、Mapreduce的combiner</h1><p>每一个 map 都可能会产生大量的本地输出， Combiner 的作用就是对 map 端的输出先做一次合并，以减少在 map 和 reduce 节点之间的数据传输量，以提高网络 IO 性能，是 MapReduce 的一种优化手段之一。</p><ul><li>combiner 是 MR 程序中 Mapper 和 Reducer 之外的一种组件</li><li>combiner 组件的父类就是 Reducer</li><li>combiner 和 reducer 的区别在于运行的位置：<ul><li>Combiner 是在每一个 maptask 所在的节点运行</li><li>Reducer 是接收全局所有 Mapper 的输出结果；</li></ul></li><li>combiner 的意义就是对每一个 maptask 的输出进行局部汇总，以减小网络传输量</li><li><code>具体实现步骤：</code><ul><li><code>1、 自定义一个 combiner 继承 Reducer，重写 reduce 方法</code></li><li><code>2、 在 job 中设置： job.setCombinerClass(CustomCombiner.class)</code></li></ul></li><li>combiner 能够应用的前提是不能影响最终的业务逻辑， 而且， combiner 的输出 kv 应该跟 reducer 的输入 kv 类型要对应起来</li></ul>]]></content>
      
      
      <categories>
          
          <category> HADOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HDFS</title>
      <link href="/HADOOP/2018/02/26/HDFS/"/>
      <url>/HADOOP/2018/02/26/HDFS/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HDFS入门"><a href="#一、HDFS入门" class="headerlink" title="一、HDFS入门"></a>一、HDFS入门</h1><h2 id="1-HDFS基本概念"><a href="#1-HDFS基本概念" class="headerlink" title="1. HDFS基本概念"></a>1. HDFS基本概念</h2><h3 id="1-1-HDFS介绍"><a href="#1-1-HDFS介绍" class="headerlink" title="1.1 HDFS介绍"></a>1.1 HDFS介绍</h3><ul><li>HDFS 是 Hadoop Distribute File System 的简称， 意为： Hadoop 分布式文件系统。 是 Hadoop 核心组件之一，作为最底层的分布式存储服务而存在。</li><li><code>分布式文件系统解决的问题就是大数据存储</code>。 它们是横跨在多台计算机上的存储系统。分布式文件系统在大数据时代有着广泛的应用前景，它们为存储和处理超大规模数据提供所需的扩展能力。</li></ul><h3 id="1-2-HDFS设计目标"><a href="#1-2-HDFS设计目标" class="headerlink" title="1.2 HDFS设计目标"></a>1.2 HDFS设计目标</h3><ul><li>硬件故障是常态， HDFS 将有成百上千的服务器组成， 每一个组成部分都有可能出现故障。 因此故障的检测和自动快速恢复是 HDFS 的核心架构目标。</li><li>HDFS 上的应用与一般的应用不同，它们主要是以流式读取数据。 HDFS 被设计成适合批量处理，而不是用户交互式的。 相较于数据访问的反应时间，更注重数据访问的高吞吐量。</li><li>典型的 HDFS 文件大小是 GB 到 TB 的级别。所以， HDFS 被调整成支持大文件。它应该提供很高的聚合数据带宽，一个集群中支持数百个节点，一个集群中还应该支持千万级别的文件。</li><li>大部分 HDFS 应用对文件要求的是 write-one-read-many 访问模型。 一个文件一旦创建、写入、关闭之后就不需要修改了。 这一假设简化了数据一致性问题，使高吞吐量的数据访问成为可能。</li><li>移动计算的代价比之移动数据的代价低。一个应用请求的计算，离它操作的数据越近就越高效，这在数据达到海量级别的时候更是如此。将计算移动到数据附近，比之将数据移动到应用所在显然更好。</li><li>在异构的硬件和软件平台上的可移植性。 这将推动需要大数据集的应用更广泛地采用 HDFS 作为平台。</li></ul><h2 id="2-HDFS重要特性"><a href="#2-HDFS重要特性" class="headerlink" title="2. HDFS重要特性"></a>2. HDFS重要特性</h2><ul><li><code>首先，它是一个文件系统</code>，用于存储文件，通过统一的命名空间目录树来定位文件；</li><li><code>其次，它是分布式的</code>，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。</li></ul><h3 id="2-1-master-slave架构"><a href="#2-1-master-slave架构" class="headerlink" title="2.1 master/slave架构"></a>2.1 master/slave架构</h3><ul><li>HDFS采用master/slave架构。一般一个HDFS集群是有一个NameNode和一定数目的DataNode组成。<code>NameNode是HDFS集群主节点，DataNode是HDFS集群从节点</code>，两个角色各司其职，共同协调完成分布式的文件存储服务。</li></ul><h3 id="2-2-分块存储"><a href="#2-2-分块存储" class="headerlink" title="2.2 分块存储"></a>2.2 分块存储</h3><ul><li>HDFS中的文件再物理上是分块存储（block）的，块的大小可以通过配置参数来规定，默认大小在hadoop2.X版本中是128M。</li></ul><h3 id="2-3-名字空间（NameSpace）"><a href="#2-3-名字空间（NameSpace）" class="headerlink" title="2.3 名字空间（NameSpace）"></a>2.3 名字空间（NameSpace）</h3><ul><li>HDFS 支持传统的层次型文件组织结构。用户或者应用程序可以创建目录，然后将文件保存在这些目录里。文件系统名字空间的层次结构和大多数现有的文件系统类似：用户可以创建、删除、移动或重命名文件。</li><li>Namenode 负责维护文件系统的名字空间，任何对文件系统名字空间或属性的修改都将被 Namenode 记录下来。HDFS 会给客户端提供一个统一的抽象目录树，客户端通过路径来访问文件，<br>形如： hdfs://namenode:port/dir-a/dir-b/dir-c/file.data。</li></ul><h3 id="2-4-NameNode元数据管理"><a href="#2-4-NameNode元数据管理" class="headerlink" title="2.4 NameNode元数据管理"></a>2.4 NameNode元数据管理</h3><ul><li>我们把目录结构及文件分块位置信息叫做元数据。NameNode负责维护整个hdfs文件系统的目录树结构，以及每一个文件所对应的block块信息（block的id，及所在的datanode服务器）。</li><li>作用：<ul><li>管理文件系统的命名空间</li><li>记录每个文件数据块在各个datanode上的位置和副本信息</li><li>协调客户端啊对文件的访问</li><li>记录命名空间内的改动或空间本身属性的改动</li><li>namenode使用事务日志记录HDFS元数据的变化，使用映射文件存储文件系统的命名空间，包括文件映射，文件属性等。</li></ul></li></ul><h3 id="2-5-DataNode数据存储"><a href="#2-5-DataNode数据存储" class="headerlink" title="2.5 DataNode数据存储"></a>2.5 DataNode数据存储</h3><ul><li>文件的各个block的具体存储管理由datanode节点承担，每一个block都可以在多个datanode上。Datanode需要定时向NameNode汇报自己特有的block信息。</li><li>存储多个副本（副本数量也可以通过参数设置dfs.replication，默认是3）。</li><li>特点：<ul><li>负责所有在物理节点的存储管理</li><li>又一次写入，多次读取</li><li>文件由数据块组成，典型的块大小是128M</li><li>数据块尽量散布到各个节点</li></ul></li></ul><h3 id="2-6-副本机制"><a href="#2-6-副本机制" class="headerlink" title="2.6 副本机制"></a>2.6 副本机制</h3><ul><li>为了容错，文件的所有block都会有副本，每个文件的block大小和副本系数都是可配置的应用程序可以指定某个文件副本数目。副本系数可以在文件创建的时候指定，也可以在之后改变。</li></ul><h2 id="3-HDFS基本操作"><a href="#3-HDFS基本操作" class="headerlink" title="3. HDFS基本操作"></a>3. HDFS基本操作</h2><h3 id="3-1-Shell命令行客户端"><a href="#3-1-Shell命令行客户端" class="headerlink" title="3.1 Shell命令行客户端"></a>3.1 Shell命令行客户端</h3><ul><li>Hadoop 提供了文件系统的 shell 命令行客户端，使用方法如下：<ul><li>hadoop fs <args></args></li></ul></li><li>文件系统 shell 包括与 Hadoop 分布式文件系统（ HDFS）以及 Hadoop 支持的其他文件系统（ 如本地 FS， HFTP FS， S3 FS 等） 直接交互的各种类似 shell的命令。 所有 FS shell 命令都将路径 URI 作为参数。</li><li>URI 格式为 scheme://authority/path。 对于 HDFS，该 scheme 是 hdfs，对于本地 FS，该scheme 是 file。 scheme 和 authority 是可选的。 如果未指定，则使用配置中指定的默认方案。</li><li>对于 HDFS,命令示例如下：<ul><li>hadoop fs -ls hdfs://namenode:host/parent/child</li><li>hadoop fs -ls /parent/child fs.defaultFS 中有配置</li><li>对于本地文件系统，命令示例如下：<ul><li>hadoop fs -ls file:///root/</li></ul></li><li>如果使用的文件系统是 HDFS，则使用 hdfs dfs 也是可以的，此时<ul><li>hadoop fs <args> = hdfs dfs <args></args></args></li></ul></li></ul></li></ul><h3 id="3-2-Shell命令选项"><a href="#3-2-Shell命令选项" class="headerlink" title="3.2 Shell命令选项"></a>3.2 Shell命令选项</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hdfs-1.JPG" alt=""><br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hdfs-2.JPG" alt=""></p><h3 id="3-3-Shell常用命令介绍"><a href="#3-3-Shell常用命令介绍" class="headerlink" title="3.3 Shell常用命令介绍"></a>3.3 Shell常用命令介绍</h3><p><code>-ls</code><br>使用方法： hadoop fs -ls [-h] [-R] <args><br>功能： 显示文件、 目录信息。<br>示例： hadoop fs -ls /user/hadoop/file1<br><code>-mkdir</code><br>使用方法： hadoop fs -mkdir [-p] <paths><br>功能： 在 hdfs 上创建目录， -p 表示会创建路径中的各级父目录。<br>示例： hadoop fs -mkdir –p /user/hadoop/dir1<br><code>-put</code><br>使用方法： hadoop fs -put [-f] [-p] [ -|<localsrc1> .. ]. <dst><br>功能： 将单个 src 或多个 srcs 从本地文件系统复制到目标文件系统。<br>    -p：保留访问和修改时间，所有权和权限。<br>    -f：覆盖目的地（如果已经存在）<br>示例： hadoop fs -put -f localfile1 localfile2 /user/hadoop/hadoopdir<br><code>-get</code><br>使用方法： hadoop fs -get [-ignorecrc][-crc] [-p][-f] <src> <localdst><br>    -ignorecrc：跳过对下载文件的 CRC 检查。<br>    -crc：为下载的文件写 CRC 校验和。<br>功能： 将文件复制到本地文件系统。<br>示例： hadoop fs -get hdfs://host:port/user/hadoop/file localfile<br><code>-appendToFile</code><br>使用方法： hadoop fs -appendToFile <localsrc> … <dst><br>功能：追加一个文件到已经存在的文件末尾<br>示例： hadoop fs -appendToFile localfile /hadoop/hadoopfile<br><code>-cat</code><br>使用方法： hadoop fs -cat [-ignoreCrc] URI [URI …]<br>功能：显示文件内容到 stdout<br>示例： hadoop fs -cat /hadoop/hadoopfile<br><code>-tail</code><br>使用方法： hadoop fs -tail [-f] URI<br>功能： 将文件的最后一千字节内容显示到 stdout。<br>    -f 选项将在文件增长时输出附加数据。<br>示例： hadoop fs -tail /hadoop/hadoopfile<br><code>-chgrp</code><br>使用方法： hadoop fs -chgrp [-R] GROUP URI [URI …]<br>功能：更改文件组的关联。用户必须是文件的所有者，否则是超级用户。<br>    -R 将使改变在目录结构下递归进行。<br>示例： hadoop fs -chgrp othergroup /hadoop/hadoopfile<br><code>-chmod</code><br>功能： 改变文件的权限。使用-R 将使改变在目录结构下递归进行。<br>示例： hadoop fs -chmod 666 /hadoop/hadoopfile<br><code>-chown</code><br>功能： 改变文件的拥有者。使用-R 将使改变在目录结构下递归进行。<br>示例： hadoop fs -chown someuser:somegrp /hadoop/hadoopfile<br><code>-copyFromLocal</code><br>使用方法： hadoop fs -copyFromLocal <localsrc> URI<br>功能：从本地文件系统中拷贝文件到 hdfs 路径去<br>示例： hadoop fs -copyFromLocal /root/1.txt /<br><code>-copyToLocal</code><br>功能：从 hdfs 拷贝到本地<br>示例： hadoop fs -copyToLocal /aaa/jdk.tar.gz<br><code>-cp</code><br>功能：从 hdfs 的一个路径拷贝 hdfs 的另一个路径<br>示例： hadoop fs -cp /aaa/jdk.tar.gz /bbb/jdk.tar.gz.2<br><code>-mv</code><br>功能：在 hdfs 目录中移动文件<br>示例： hadoop fs -mv /aaa/jdk.tar.gz /<br><code>-getmerge</code><br>功能：合并下载多个文件<br>示例：比如 hdfs 的目录 /aaa/下有多个文件:log.1, log.2,log.3,…<br>hadoop fs -getmerge /aaa/log.* ./log.sum<br><code>-rm</code><br>功能： 删除指定的文件。只删除非空目录和文件。 -r 递归删除。<br>示例： hadoop fs -rm -r /aaa/bbb/<br><code>-df</code><br>功能：统计文件系统的可用空间信息<br>示例： hadoop fs -df -h /<br><code>-du</code><br>功能： 显示目录中所有文件大小，当只指定一个文件时，显示此文件的大小。<br>示例： hadoop fs -du /user/hadoop/dir1<br><code>-setrep</code><br>功能： 改变一个文件的副本系数。 -R 选项用于递归改变目录下所有文件的副本<br>系数。<br>示例： hadoop fs -setrep -w 3 -R /user/hadoop/dir1</localsrc></dst></localsrc></localdst></src></dst></localsrc1></paths></args></p><h1 id="二、HDFS基本原理"><a href="#二、HDFS基本原理" class="headerlink" title="二、HDFS基本原理"></a>二、HDFS基本原理</h1><h2 id="1-NameNode概述"><a href="#1-NameNode概述" class="headerlink" title="1. NameNode概述"></a>1. NameNode概述</h2><ul><li>NameNode 是 HDFS 的核心。</li><li>NameNode 也称为 Master。</li><li>NameNode 仅存储 HDFS 的元数据： 文件系统中所有文件的目录树，并跟踪整个集群中的文件。</li><li>NameNode 不存储实际数据或数据集。数据本身实际存储在 DataNodes 中。</li><li>NameNode 知道 HDFS 中任何给定文件的块列表及其位置。使用此信息NameNode 知道如何从块中构建文件。</li><li>NameNode 并不持久化存储每个文件中各个块所在的 DataNode 的位置信息，这些信息会在系统启动时从数据节点重建。</li><li>NameNode 对于 HDFS 至关重要，当 NameNode 关闭时， HDFS / Hadoop 集群无法访问。</li><li>NameNode 是 Hadoop 集群中的单点故障。</li><li>NameNode 所在机器通常会配置有大量内存（ RAM）。<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hdfs-3.JPG" alt=""></li></ul><h2 id="2-DataNode概述"><a href="#2-DataNode概述" class="headerlink" title="2. DataNode概述"></a>2. DataNode概述</h2><ul><li>DataNode负责将实际数据存储在HDFS中。</li><li>DataNode也称为Slave。</li><li>NameNode和DataNode会保持不断通信。</li><li>DataNode启动时，它将自己发布到NameNode并汇报自己负责持有的块列表。</li><li>当某个DataNode关闭时，它不会影响数据或集群的可用性。NameNode将安排由其他DataNode管理的块进行副本复制。</li><li>DataNode 所在机器通常配置有大量的硬盘空间。因为实际数据存储在DataNode 中。</li><li>DataNode 会定期（ dfs.heartbeat.interval 配置项配置，默认是 3 秒）向NameNode 发送心跳，如果 NameNode 长时间没有接受到 DataNode 发送的心跳， NameNode 就会认为该 DataNode 失效。</li><li>block 汇报时间间隔取参数 dfs.blockreport.intervalMsec,参数未配置的话默认为 6 小时。</li></ul><h2 id="3-HDFS的工作机制"><a href="#3-HDFS的工作机制" class="headerlink" title="3. HDFS的工作机制"></a>3. HDFS的工作机制</h2><ul><li>NameNode负责管理整个文件系统元数据；DataNode负责管理具体文件数据块存储；Secondary NameNode协助NameNode进行元数据的备份。</li><li>HDFS的内部工作机制对客户端保持透明，客户端请求访问HDFS都是通过向NameNode来申请进行。<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hdfs-4.JPG" alt=""></li></ul><h3 id="3-1-HDFS写数据流程"><a href="#3-1-HDFS写数据流程" class="headerlink" title="3.1 HDFS写数据流程"></a>3.1 HDFS写数据流程</h3><p><strong>详细步骤解析：</strong></p><ul><li>client 发起文件上传请求，通过 RPC 与 NameNode 建立通讯， NameNode检查目标文件是否已存在，父目录是否存在，返回是否可以上传；</li><li>client 请求第一个 block 该传输到哪些 DataNode 服务器上；</li><li>NameNode 根据配置文件中指定的备份数量及机架感知原理进行文件分配，返回可用的 DataNode 的地址如： A， B， C；<br>注： Hadoop 在设计时考虑到数据的安全与高效，数据文件默认在 HDFS 上存放三份， 存储策略为本地一份，同机架内其它某一节点上一份，不同机架的某一节点上一份。</li><li>client 请求 3 台 DataNode 中的一台 A 上传数据（本质上是一个 RPC 调用，建立 pipeline）， A 收到请求会继续调用 B，然后 B 调用 C，将整个pipeline 建立完成， 后逐级返回 client；</li><li>client 开始往 A 上传第一个 block（先从磁盘读取数据放到一个本地内存缓存），以 packet 为单位（默认 64K）， A 收到一个 packet 就会传给 B，B 传给 C； A 每传一个 packet 会放入一个应答队列等待应答。</li><li>数据被分 割成一 个 个 packet 数据包在 pipeline 上依次传 输 ，在pipeline 反方向上，逐个发送 ack（命令正确应答），最终由 pipeline中第一个 DataNode 节点 A 将 pipeline ack 发送给 client;</li><li>当一个 block 传输完成之后， client 再次请求 NameNode 上传第二个block 到服务器。<br><strong>详细步骤图：</strong><br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hdfs-6.png" alt=""></li></ul><h3 id="3-2-HDFS读数据流程"><a href="#3-2-HDFS读数据流程" class="headerlink" title="3.2 HDFS读数据流程"></a>3.2 HDFS读数据流程</h3><p><strong>详细步骤解析：</strong></p><ul><li>Client 向 NameNode 发起 RPC 请求， 来确定请求文件 block 所在的位置；</li><li>NameNode 会视情况返回文件的部分或者全部 block 列表，对于每个 block，NameNode 都会返回含有该 block 副本的 DataNode 地址；</li><li>这些返回的 DN 地址，会按照集群拓扑结构得出 DataNode 与客户端的距离，然后进行排序，排序两个规则：网络拓扑结构中距离 Client 近的排靠前；心跳机制中超时汇报的 DN 状态为 STALE，这样的排靠后；</li><li>Client 选取排序靠前的 DataNode 来读取 block，如果客户端本身就是DataNode,那么将从本地直接获取数据；</li><li>底层上本质是建立 Socket Stream（ FSDataInputStream）， 重复的调用父类 DataInputStream 的 read 方法，直到这个块上的数据读取完毕；</li><li>当读完列表的 block 后，若文件读取还没有结束，客户端会继续向NameNode 获取下一批的 block 列表；</li><li>读取完一个 block 都会进行 checksum 验证，如果读取 DataNode 时出现错误，客户端会通知 NameNode，然后再从下一个拥有该 block 副本的DataNode 继续读。</li><li>read 方法是并行的读取 block 信息，不是一块一块的读取； NameNode 只是返回 Client 请求包含块的 DataNode 地址，并不是返回请求块的数据；</li><li>最终读取来所有的 block 会合并成一个完整的最终文件。<br><strong>详细步骤图：</strong><br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hdfs-5.png" alt=""></li></ul><h1 id="三、HDFS的应用开发"><a href="#三、HDFS的应用开发" class="headerlink" title="三、HDFS的应用开发"></a>三、HDFS的应用开发</h1><h2 id="1-HDFS的JAVA-API操作"><a href="#1-HDFS的JAVA-API操作" class="headerlink" title="1. HDFS的JAVA API操作"></a>1. HDFS的JAVA API操作</h2><ul><li>HDFS在生产应用中主要是客户端的开发，其核心步骤是从HDFS提供的api中构造一个HDFS的访问<code>客户端对象</code>，然后通过该客户端对象操作（增删改查）HDFS上的文件。</li></ul><h3 id="1-1-搭建开发环境"><a href="#1-1-搭建开发环境" class="headerlink" title="1.1 搭建开发环境"></a>1.1 搭建开发环境</h3><ul><li>创建 Maven 工程， 引入 pom 依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>配置 windows 平台 Hadoop 环境</code></p><ul><li>在 windows 上做 HDFS 客户端应用开发，需要设置 Hadoop 环境,而且要求是windows 平台编译的 Hadoop,不然会报以下的错误:<ul><li>Failed to locate the winutils binary in the hadoop binary path java.io.IOException: Could not locate executable null\bin\winutils.exe in the Hadoop binaries.</li></ul></li><li>为此我们需要进行如下的操作：<ul><li>在 windows 平台下编译 Hadoop 源码（可以参考资料编译， 但不推荐）</li><li>使用已经编译好的 Windows 版本 Hadoop：<ul><li>hadoop-2.7.4-with-windows.tar.gz</li></ul></li><li>解压一份到 windows 的任意一个目录下</li><li>在 windows 系统中配置 HADOOP_HOME 指向你解压的安装包目录</li><li>在 windows 系统的 path 变量中加入 HADOOP_HOME 的 bin 目录</li></ul></li></ul><h3 id="1-2-构造客户端对象"><a href="#1-2-构造客户端对象" class="headerlink" title="1.2 构造客户端对象"></a>1.2 构造客户端对象</h3><ul><li>在 java 中操作 HDFS， 主要涉及以下 Class：</li><li><code>Configuration</code>：该类的对象封转了客户端或者服务器的配置;</li><li><p><code>FileSystem</code>：该类的对象是一个文件系统对象，可以用该对象的一些方法来<br>对文件进行操作，通过 FileSystem 的静态方法 get 获得该对象。<br><code>FileSystem fs = FileSystem.get(conf)</code></p></li><li><p>get 方法从 conf 中的一个参数 fs.defaultFS 的配置值判断具体是什么类型的文件系统。 如果我们的代码中没有指定 fs.defaultFS，并且工程 classpath下也没有给定相应的配置，conf 中的默认值就来自于 hadoop 的 jar 包中的 coredefault.xml ， 默 认 值 为 ： file:/// ， 则 获 取 的 将 不 是 一 个DistributedFileSystem 的实例，而是一个本地文件系统的客户端对象。</p></li></ul><h3 id="1-3-示例代码"><a href="#1-3-示例代码" class="headerlink" title="1.3 示例代码"></a>1.3 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line"><span class="comment">//这里指定使用的是 hdfs 文件系统</span></span><br><span class="line">conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://node-21:9000"</span>);</span><br><span class="line"><span class="comment">//通过如下的方式进行客户端身份的设置</span></span><br><span class="line">System.setProperty(<span class="string">"HADOOP_USER_NAME"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//通过 FileSystem 的静态方法获取文件系统客户端对象</span></span><br><span class="line">FileSystem fs = FileSystem.get(conf);</span><br><span class="line"><span class="comment">//也可以通过如下的方式去指定文件系统的类型 并且同时设置用户身份</span></span><br><span class="line"><span class="comment">//FileSystem fs = FileSystem.get(new URI("hdfs://node-21:9000"), conf, "root");</span></span><br><span class="line"><span class="comment">//创建一个目录</span></span><br><span class="line">fs.create(<span class="keyword">new</span> Path(<span class="string">"/hdfsbyjava-ha"</span>), <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//上传一个文件</span></span><br><span class="line">fs.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">"e:/hello.sh"</span>), <span class="keyword">new</span> Path(<span class="string">"/hdfsbyjava-ha"</span>));</span><br><span class="line"><span class="comment">//关闭我们的文件系统</span></span><br><span class="line">fs.close();</span><br></pre></td></tr></table></figure><h2 id="2-案例：shell定时采集数据至HDFS"><a href="#2-案例：shell定时采集数据至HDFS" class="headerlink" title="2. 案例：shell定时采集数据至HDFS"></a>2. 案例：shell定时采集数据至HDFS</h2><ul><li>上线的网站每天都会产生日志数据。假如有这样的需求：要求在凌晨24点开始操作前一天产生的日志文件，准实时上传至HDFS集群上。</li><li>该如何实现？实现后能够实现周期性上传需求？如何定时？</li></ul><h3 id="2-1-技术分析"><a href="#2-1-技术分析" class="headerlink" title="2.1 技术分析"></a>2.1 技术分析</h3><ul><li>HDFS SHELL:<ul><li>hadoop fs –put //满足上传文件，不能满足定时、周期性传入。</li></ul></li><li>Linux crontab:<ul><li>crontab -e</li><li>0 0 <em> </em> * /shell/ uploadFile2Hdfs.sh //每天凌晨 12： 00 执行一次</li></ul></li></ul><h3 id="2-2-实现流程"><a href="#2-2-实现流程" class="headerlink" title="2.2 实现流程"></a>2.2 实现流程</h3><ul><li>一般日志文件生成的逻辑由业务系统决定，比如每小时滚动一次， 或者一定大小滚动一次， 避免单个日志文件过大不方便操作。</li><li>比如滚动后的文件命名为 access.log.x,其中 x 为数字。 正在进行写的日志文件叫做 access.log。 这样的话， 如果日志文件后缀是 1\2\3 等数字， 则该文件满足需求可以上传， 就把该文件移动到准备上传的工作区间目录。工作区间有文件之后，可以使用 hadoop put 命令将文件上传。</li></ul><h3 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hdfs-7.JPG" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> HADOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hadoop</title>
      <link href="/HADOOP/2018/02/26/hadoop%E6%A6%82%E8%BF%B0/"/>
      <url>/HADOOP/2018/02/26/hadoop%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Hadoop概述"><a href="#一、Hadoop概述" class="headerlink" title="一、Hadoop概述"></a>一、Hadoop概述</h1><h2 id="1-Hadoop介绍"><a href="#1-Hadoop介绍" class="headerlink" title="1. Hadoop介绍"></a>1. Hadoop介绍</h2><ul><li>Hadoop 是 Apache Lucene 创始人 Doug Cutting 创建的。最早起源于 Nutch，它是 Lucene 的子项目。 Nutch 的设计目标是构建一个大型的全网搜索引擎，包括网页抓取、索引、查询等功能，但随着抓取网页数量的增加，遇到了严重的可扩展性问题： 如何解决数十亿网页的存储和索引问题。</li><li>2003 年 Google 发表了一篇论文为该问题提供了可行的解决方案。 论文中描述的是谷歌的产品架构，该架构称为： 谷歌分布式文件系统（ GFS） ,可以解决他们在网页爬取和索引过程中产生的超大文件的存储需求。</li><li>2004 年 Google 发表论文向全世界介绍了谷歌版的 MapReduce 系统。同时期， Nutch 的开发人员完成了相应的开源实现 HDFS 和 MAPREDUCE，并从Nutch 中剥离成为独立项目 HADOOP，到 2008 年 1 月， HADOOP 成为 Apache 顶级项目，迎来了它的快速发展期。</li><li>2006 年 Google 发表了论文是关于 BigTable 的，这促使了后来的 Hbase 的发展。</li><li>因此， Hadoop 及其生态圈的发展离不开 Google 的贡献。 </li><li>当下的 Hadoop 已经成长为一个庞大的体系，随着生态系统的成长，新出现的项目越来越多，其中不乏一些非 Apache 主管的项目，这些项目对 HADOOP 是很好的补充或者更高层的抽象。 比如： <ul><li>Common:一系列组件和接口，用于分布式文件系统和通用I/O（序列化、Java RPC和持久化数据结构）</li><li>Avro:一种序列化系统，用于支持高效、跨语言的RPC和持久化数据存储</li><li>HDFS:分布式文件系统，运行于大型商用机集群<ul><li>MAPREDUCE：分布式运算程序开发框架 </li><li>Pig:数据流语言和运行环境，用以探究非常庞大的数据集。Pig运行在MapReduce和HDFS集群上</li><li>Hive:一种分布式的、按列存储的数据仓库。Hive管理HDFS中存储的数据，并提供基于SQL的查询语言（由运行时引擎翻译成MapReduce作业）用以查询数据</li><li>HBase:一种分布式的、按列存储的数据库。HBase使用HDFS作为底层储存，同时支持MapReduced的批量式计算和点查询（随机读取）</li><li>ZooKeeper:一种分布式的、可用性高的协调服务。ZooKeeper提供分布式锁之类的基本服务用于构建分布式应用</li><li>Sqoop:该工具用于在结构化数据存储（如关系型数据库）和HDFS之间高效批量传输数据</li><li>Oozie：该服务用于运行和调度Hadoop作业（如MapReduce,Pig,Hive及Sqoop作业）</li><li>Mahout：基于 mapreduce/spark/flink 等分布式运算框架的机器学习算法库 </li><li>Flume：日志数据采集框架</li><li>Impala： 基于 Hadoop 的实时分析 </li></ul></li></ul></li></ul><h2 id="2-Hadoop特性"><a href="#2-Hadoop特性" class="headerlink" title="2. Hadoop特性"></a>2. Hadoop特性</h2><ul><li><code>扩容能力（ Scalable）</code>： Hadoop 是在可用的计算机集群间分配数据并完成计算任务的，这些集群可用方便的扩展到数以千计的节点中。</li><li><code>成本低（ Economical）</code>： Hadoop 通过普通廉价的机器组成服务器集群来分发以及处理数据，以至于成本很低。</li><li><code>高效率（ Efficient）</code>：通过并发数据， Hadoop 可以在节点之间动态并行的移动数据，使得速度非常快。</li><li><code>可靠性（ Rellable）</code>：能自动维护数据的多份复制，并且在任务失败后能自动地重新部署（ redeploy）计算任务。所以 Hadoop 的按位存储和处理数据的能力值得人们信赖。 </li></ul><h2 id="3-Hadoop应用场景"><a href="#3-Hadoop应用场景" class="headerlink" title="3. Hadoop应用场景"></a>3. Hadoop应用场景</h2><ul><li><p>不管是国内还是国外，Hadoop最受青睐的行业是互联网领域，可以说互联网公司是 hadoop 的主要使用力量。 </p></li><li><p>国外来说，Yahoo、Facebook、IBM等公司都大量使用hadoop集群来支撑业务，比如：</p><ul><li>Yahoo的hadoop应用在支持广告系统、用户行为分析、支持Web搜索等。</li><li>Facebook主要使用hadoop存储内部日志与多维数据，并以此作为报告、分析和机器学习的数据源。</li></ul></li><li>国内来说， BAT 领头的互联网公司是当仁不让的 Hadoop 使用者、维护者。比如 Ali 云梯（ 14 年国内最大 Hadoop 集群）、百度的日志分析平台、推荐引擎系统等。 </li><li>国内其他非互联网领域也有不少 hadoop 的应用，比如：<ul><li>金融行业： 个人征信分析</li><li>证券行业： 投资模型分析</li><li>交通行业： 车辆、路况监控分析</li><li>电信行业： 用户上网行为分析</li></ul></li><li>总之： hadoop 并不会跟某种具体的行业或者某个具体的业务挂钩，它只是一种用来做海量数据分析处理的工具。 </li></ul><h1 id="二、Hadoop集群搭建"><a href="#二、Hadoop集群搭建" class="headerlink" title="二、Hadoop集群搭建"></a>二、Hadoop集群搭建</h1><h2 id="1-发行版本"><a href="#1-发行版本" class="headerlink" title="1. 发行版本"></a>1. 发行版本</h2><ul><li>Hadoop 发行版本分为开源<code>社区版</code>和<code>商业版</code>，社区版是指由 Apache 软件基金会维护的版本，是官方维护的版本体系。 商业版 Hadoop 是指由第三方商业公司在社区版 Hadoop 基础上进行了一些修改、整合以及各个服务组件兼容性测试而发行的版本， 比较著名的有 cloudera 的 CDH、 mapR 等。</li><li>我们学习的是社区版： Apache Hadoop。 后续如未说明都是指Apache 版本。</li><li>Hadoop 的版本很特殊，是由多条分支并行的发展着。 大的来看分为 3 个大的系列版本： 1.x、 2.x、 3.x。</li><li>Hadoop1.0 由一个分布式文件系统 HDFS 和一个离线计算框架MapReduce 组成。</li><li>Hadoop 2.0 则包含一个支持 NameNode 横向扩展的 HDFS，一个资源管理系统YARN 和一个运行在 YARN 上的离线计算框架 MapReduce。相比于 Hadoop1.0，</li><li>Hadoop 2.0 功能更加强大，且具有更好的扩展性、性能，并支持多种计算框架。</li><li>Hadoop 3.0 相比之前的 Hadoop 2.0 有一系列的功能增强。但目前还是个alpha 版本，有很多 bug，且不能保证 API 的稳定和质量。</li><li>我们课程中使用的是当前 2 系列最稳定版本： <code>Apache Hadoop 2.7.4</code>。 </li></ul><h2 id="2-集群简介"><a href="#2-集群简介" class="headerlink" title="2. 集群简介"></a>2. 集群简介</h2><ul><li><p>HADOOP 集群具体来说包含两个集群： <code>HDFS 集群</code>和 <code>YARN 集群</code>，两者逻辑上分离，但物理上常在一起。</p></li><li><p><code>HDFS 集群负责海量数据的存储</code>，集群中的角色主要有：</p><ul><li>NameNode、 DataNode、 SecondaryNameNode</li></ul></li><li><p><code>YARN 集群负责海量数据运算时的资源调度</code>，集群中的角色主要有：</p><ul><li>ResourceManager、 NodeManager</li></ul></li><li><p>那 mapreduce 是什么呢？它其实是一个分布式运算编程框架，是应用程序开发包，由用户按照编程规范进行程序开发，后打包运行在 HDFS 集群上，并且受到 YARN 集群的资源调度管理。</p></li><li><p>Hadoop 部署方式分三种，<code>Standalone mode （独立模式）</code>、<code>Pseudo-Distributedmode（伪分布式模式）</code>、 <code>Cluster mode（群集模式），其中前两种都是在单机部署</code>。独立模式又称为单机模式，仅 1 个机器运行 1 个 java 进程，主要用于调试。</p></li><li><p>伪分布模式也是在 1 个机器上运行 HDFS 的 NameNode 和 DataNode、 YARN的 ResourceManger 和 NodeManager，但分别启动单独的 java 进程，主要用于调试。</p></li><li><p>集群模式主要用于生产环境部署。 会使用 N 台主机组成一个 Hadoop 集群。这种部署模式下， 主节点和从节点会分开部署在不同的机器上。</p></li><li><p>我们以 3 节点为例进行搭建，角色分配如下：<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hadoop-4.JPG" alt=""></p></li></ul><h2 id="3-虚拟机准备"><a href="#3-虚拟机准备" class="headerlink" title="3. 虚拟机准备"></a>3. 虚拟机准备</h2><ul><li>本案例使用 VMware Workstation Pro 虚拟机创建虚拟服务器来搭建 Hadoop集群，所用软件及版本如下：<ul><li>VMware Workstation Pro 12.0</li><li>Centos 6.5 64bit</li><li>SecureCRT<br><code>**注意**</code>：这里先对单台虚拟机进行配置，所有配置完成之后就可以通过复制来得到其他虚拟机。然后只需要按照操作修改hosts文件，ip地址和mac地址。</li></ul></li></ul><h2 id="4-网络环境准备"><a href="#4-网络环境准备" class="headerlink" title="4. 网络环境准备"></a>4. 网络环境准备</h2><ul><li>采用 NAT 方式联网。</li><li>如果创建的是桌面版的 Centos 系统，可以在安装完毕后通过图形页面进行编辑。 如果是 mini 版本的，可通过编辑 ifcfg-eth*配置文件进行配置。<br><code>注意 BOOTPROTO、 GATEWAY、 NETMASK。</code></li></ul><h2 id="5-虚拟机系统设置"><a href="#5-虚拟机系统设置" class="headerlink" title="5. 虚拟机系统设置"></a>5. 虚拟机系统设置</h2><ul><li><p>设置主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network（集群中的主机都修改）</span><br><span class="line">NETWORKING=yes //表示系统是否使用网络</span><br><span class="line">HOSTNAME=主机名 //设置本机的主机名</span><br><span class="line">GATEWAY= //设置网关地址</span><br></pre></td></tr></table></figure></li><li><p>设置网络</p><ul><li>针对复制后的虚拟机，MAC地址需要修改<ul><li>MAC 地址处于下面两个文件中。</li><li>/etc/udev/rules.d/70-persistent-net.rules</li><li>/etc/sysconfig/network-scripts/ifcfg-eth0</li></ul></li><li>vim /etc/sysconfig/network（集群中的主机都修改）<ul><li>NETWORKING=yes //表示系统是否使用网络</li><li>HOSTNAME=主机名 //设置本机的主机名</li><li>GATEWAY= //设置网关地址</li></ul></li><li>vim /etc/sysconfig/network-scripts/ifcfg-eth0<ul><li>DEVICE=eth0 //网卡对应的设备别名</li><li>BOOTPROTO=static //网卡获得IP地址的方式</li><li>HWADDR= //物理网卡MAC地址</li><li>IPADDR=ip地址 //设置静态IP</li><li>NETMASK= //子网掩码</li><li>ONBOOT=yes //系统启动网卡自动启动</li><li>PEERDNS=no</li><li>DNS1=114.114.114.114</li><li>DNS2=8.8.8.8</li></ul></li></ul></li><li><p>设置IP与主机名映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">192.168.137.3node01</span><br><span class="line">192.168.137.4node02</span><br><span class="line">192.168.137.5node03</span><br></pre></td></tr></table></figure></li><li><p>创建hadoop用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd hadoop#创建用户</span><br><span class="line">passwdhadoop#为创建的用户添加密码</span><br></pre></td></tr></table></figure></li><li><p>给hadoop用户sudo权限</p><ul><li>使用root用户登录每台主机</li><li>开放sudoers文件写权限，执行chmod u+w /etc/sudoers;</li><li>执行vim /etc/sudoers,找到root ALL=(ALL) ALL </li><li>在其下边添加一行数据：hadoop  ALL=(ALL)   NOPASSWD:ALL（添加要免密的用户）</li></ul></li><li><p>配置防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>查看防火墙状态</span><br><span class="line">service iptables status</span><br><span class="line"><span class="meta">#</span>关闭防火墙</span><br><span class="line">service iptables stop</span><br><span class="line"><span class="meta">#</span>查看防火墙开机启动状态</span><br><span class="line">chkconfig iptables --list</span><br><span class="line"><span class="meta">#</span>关闭防火墙开机启动</span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure></li><li><p>关闭selinux</p><ul><li>使用getenforce命令查看是否关闭selinux</li><li>sudo vim /etc/sysconfig/selinux<ul><li>修改SELINUX=disabled</li></ul></li></ul></li><li><p>hadoop、JDK安装与配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#上传 hadoop、jdk 安装包</span><br><span class="line">jdk-8u65-linux-x64.tar.gz</span><br><span class="line">hadoop-2.7.4.tar.gz</span><br><span class="line">#解压安装包</span><br><span class="line">tar -zxvf jdk-8u65-linux-x64.tar.gz -C /hadoop/apps</span><br><span class="line">tar -zxvf hadoop-2.7.4.tar.gz -C /hadoop/apps</span><br><span class="line">#配置环境变量 </span><br><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/hadoop/apps/jdk1.8.0_65</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export HADOOP_HOME= /hadoop/apps/hadoop-2.7.4</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line">#刷新配置</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.marsm.top/2018/02/24/Linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/" target="_blank" rel="noopener">时间同步</a> 参考其他文章</p></li></ul><h2 id="6-Hadoop安装包目录结构"><a href="#6-Hadoop安装包目录结构" class="headerlink" title="6. Hadoop安装包目录结构"></a>6. Hadoop安装包目录结构</h2><ul><li><code>bin</code>： Hadoop 最基本的管理脚本和使用脚本的目录，这些脚本是 sbin 目录下管理脚本的基础实现，用户可以直接使用这些脚本管理和使用 Hadoop。</li><li><code>etc</code>： Hadoop 配置文件所在的目录，包括 core-site,xml、 hdfs-site.xml、mapred-site.xml 等从 Hadoop1.0 继承而来的配置文件和 yarn-site.xml 等Hadoop2.0 新增的配置文件。</li><li><code>include</code>：对外提供的编程库头文件（具体动态库和静态库在 lib 目录中），这些头文件均是用 C++定义的，通常用于 C++程序访问 HDFS 或者编写 MapReduce程序。</li><li><code>lib</code>：该目录包含了 Hadoop 对外提供的编程动态库和静态库，与 include 目录中的头文件结合使用。</li><li><code>libexec</code>：各个服务对用的 shell 配置文件所在的目录，可用于配置日志输出、启动参数（比如 JVM 参数）等基本信息。</li><li><code>sbin</code>： Hadoop 管理脚本所在的目录，主要包含 HDFS 和 YARN 中各类服务的启动/关闭脚本。</li><li><code>share</code>： Hadoop 各个模块编译后的 jar 包所在的目录。 </li></ul><h2 id="7-Hadoop配置文件修改"><a href="#7-Hadoop配置文件修改" class="headerlink" title="7. Hadoop配置文件修改"></a>7. Hadoop配置文件修改</h2><h3 id="7-1-hadoop-env-sh"><a href="#7-1-hadoop-env-sh" class="headerlink" title="7.1 hadoop-env.sh"></a>7.1 hadoop-env.sh</h3><ul><li>文件中设置的是 Hadoop 运行时需要的环境变量。JAVA_HOME 是必须设置的，即使我们当前的系统中设置了 JAVA_HOME，它也是不认识的，因为 Hadoop 即使是在本机上执行，它也是把当前的执行环境当成远程服务器。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi hadoop-env.sh</span><br><span class="line">export JAVA_HOME=/hadoop/apps/jdk1.8.0_65</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-2-core-site-xml"><a href="#7-2-core-site-xml" class="headerlink" title="7.2 core-site.xml"></a>7.2 core-site.xml</h3><ul><li><code>hadoop 的核心配置文件</code>，有默认的配置项 core-default.xml。</li><li>core-default.xml 与 core-site.xml 的功能是一样的，如果在 coresite.xml 里没有配置的属性，则会自动会获取 core-default.xml 里的相同属性的值。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于设置 Hadoop 的文件系统，由 URI 指定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node-1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 Hadoop 的临时目录,默认/tmp/hadoop-$&#123;user.name&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/hadoop-2.4.1/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-3-hdfs-site-xml"><a href="#7-3-hdfs-site-xml" class="headerlink" title="7.3 hdfs-site.xml"></a>7.3 hdfs-site.xml</h3><ul><li><code>HDFS 的核心配置文件</code>，有默认的配置项 hdfs-default.xml。</li><li>hdfs-default.xml 与 hdfs-site.xml 的功能是一样的，如果在 hdfssite.xml 里没有配置的属性，则会自动会获取 hdfs-default.xml 里的相同属性的值。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定 HDFS 副本的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- secondary namenode 所在主机的 ip 和端口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>192.168.1.152:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.7.x之后默认yarn内存使用是8g，不进行设置会导致nodemanager无法启动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-4-mapred-site-xml"><a href="#7-4-mapred-site-xml" class="headerlink" title="7.4 mapred-site.xml"></a>7.4 mapred-site.xml</h3><ul><li><code>MapReduce 的核心配置文件</code>，有默认的配置项 mapred-default.xml。</li><li>mapred-default.xml 与 mapred-site.xml 的功能是一样的，如果在 mapredsite.xml 里没有配置的属性，则会自动会获取 mapred-default.xml 里的相同属性的值。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定 mr 运行时框架，这里指定在 yarn 上，默认是 local --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-5-slaves"><a href="#7-5-slaves" class="headerlink" title="7.5 slaves"></a>7.5 slaves</h3><ul><li><code>slaves 文件里面记录的是集群主机名</code>。 一般有以下两种作用：</li><li>一是：配合一键启动脚本如 start-dfs.sh、 stop-yarn.sh 用来进行集群启动。 这时候 slaves 文件里面的主机标记的就是从节点角色所在的机器。</li><li>二是： 可以配合 hdfs-site.xml 里面 dfs.hosts 属性形成一种白名单机制。</li><li>dfs.hosts 指定一个文件，其中包含允许连接到 NameNode 的主机列表。 必须指定文件的完整路径名。如果值为空，则允许所有主机。 例如：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> dfs.hosts <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoop/apps/hadoop/etc/hadoop/slaves <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>那么所有在 slaves 中的主机才可以加入的集群中。</p><p>附件：<a href="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/blog%E6%96%87%E4%BB%B6/hadoop%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.xml" target="_blank" rel="noopener">hadoop配置文件</a></p><h2 id="8-集群配置"><a href="#8-集群配置" class="headerlink" title="8. 集群配置"></a>8. 集群配置</h2><h3 id="8-1-复制虚拟机"><a href="#8-1-复制虚拟机" class="headerlink" title="8.1 复制虚拟机"></a>8.1 复制虚拟机</h3><ul><li>为了快速搭建好集群，这里直接复制虚拟机。将刚刚配置好的虚拟机复制两份，然后用VM打开（选择已复制该虚拟机），按照上面的操作需要修改主机名、ip地址和mac地址。</li><li><p>复制后虚拟机的网卡配置方法：</p><ul><li><p>删除下面两个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/udev/rules.d/70-persistent-net.rules</span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><ul><li>关闭虚拟机，重启，使用reboot无法生效</li></ul></li></ul></li></ul><h3 id="8-2-配置SSH免密码登陆"><a href="#8-2-配置SSH免密码登陆" class="headerlink" title="8.2 配置SSH免密码登陆"></a>8.2 配置SSH免密码登陆</h3><ul><li>生成秘钥(每台虚拟机都执行)<ul><li>ssh-keygen -t rsa<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hadoop-1.JPG" alt=""></li></ul></li><li>复制node02、node03主机公钥到node01主机中<ul><li>scp id_rsa.pub <a href="mailto:hadoop@192.168.137.3" target="_blank" rel="noopener">hadoop@192.168.137.3</a>:/hadoop/.ssh/node02</li><li>scp id_rsa.pub <a href="mailto:hadoop@192.168.137.3" target="_blank" rel="noopener">hadoop@192.168.137.3</a>:/hadoop/.ssh/node03</li></ul></li><li><p>创建一个空文件，名为：authorized_keys</p><ul><li>touch authorized_keys</li></ul><p><strong>注意：</strong>authorized_keys文件权限需要修改为：644</p></li><li>通过cat file1 file2 file3 &gt; authorized_keys将node01机器上的三个公钥文件内容拷贝到authorized_keys文件中</li><li>将authorized_keys文件通过scp命令拷贝到其他机器中</li><li>测试连接：ssh node02</li></ul><h1 id="三、Hadoop集群启动"><a href="#三、Hadoop集群启动" class="headerlink" title="三、Hadoop集群启动"></a>三、Hadoop集群启动</h1><h2 id="1-启动方式"><a href="#1-启动方式" class="headerlink" title="1. 启动方式"></a>1. 启动方式</h2><ul><li>要启动 Hadoop 集群，需要启动 HDFS 和 YARN 两个集群。</li><li>注意： <code>首次启动 HDFS 时，必须对其进行格式化操作</code>。 本质上是一些清理和准备工作，因为此时的 HDFS 在物理上还是不存在的。</li><li><code>hdfs namenode–format</code> 或者 hadoop namenode –format</li></ul><h3 id="1-1-单节点逐个启动"><a href="#1-1-单节点逐个启动" class="headerlink" title="1.1 单节点逐个启动"></a>1.1 单节点逐个启动</h3><p>在主节点上使用以下命令启动 HDFS NameNode：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure></p><p>在每个从节点上使用以下命令启动 HDFS DataNode：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start datanode</span><br></pre></td></tr></table></figure></p><p>在主节点上使用以下命令启动 YARN ResourceManager：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure></p><p>在每个从节点上使用以下命令启动 YARN nodemanager：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure></p><p>以上脚本位于$HADOOP_PREFIX/sbin/目录下。如果想要停止某个节点上某个角色，只需要把命令中的 start 改为 stop 即可。</p><h3 id="1-2-脚本一键启动"><a href="#1-2-脚本一键启动" class="headerlink" title="1.2 脚本一键启动"></a>1.2 脚本一键启动</h3><ul><li>如果配置了 etc/hadoop/slaves 和 ssh 免密登录，则可以使用程序脚本启动所有 Hadoop 两个集群的相关进程，在主节点所设定的机器上执行。</li><li>hdfs： $HADOOP_PREFIX/sbin/start-dfs.sh</li><li>yarn: $HADOOP_PREFIX/sbin/start-yarn.sh</li><li>停止集群： stop-dfs.sh、 stop-yarn.sh<h2 id="2-集群web-ui"><a href="#2-集群web-ui" class="headerlink" title="2. 集群web-ui"></a>2. 集群web-ui</h2>一旦 Hadoop 集群启动并运行， 可以通过 web-ui 进行集群查看，如下所述：<br>NameNode <a href="http://nn_host:port/" target="_blank" rel="noopener">http://nn_host:port/</a> 默认 50070.<br>ResourceManager <a href="http://rm_host:port/" target="_blank" rel="noopener">http://rm_host:port/</a> 默认 8088.<br><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/hadoop/hadoop-3.JPG" alt=""></li></ul><h2 id="3-Hadoop初体验"><a href="#3-Hadoop初体验" class="headerlink" title="3. Hadoop初体验"></a>3. Hadoop初体验</h2><h3 id="3-1-HDFS使用"><a href="#3-1-HDFS使用" class="headerlink" title="3.1 HDFS使用"></a>3.1 HDFS使用</h3><p>从 Linux 本地上传一个文本文件到 hdfs 的/test/input 目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir -p /wordcount/input</span><br><span class="line">hadoop fs -put /root/somewords.txt /test/input</span><br></pre></td></tr></table></figure></p><h3 id="3-2-运行MapReduce程序"><a href="#3-2-运行MapReduce程序" class="headerlink" title="3.2 运行MapReduce程序"></a>3.2 运行MapReduce程序</h3><ul><li>在 Hadoop 安装包的 hadoop-2.7.4/share/hadoop/mapreduce 下有官方自带的 mapreduce 程序。 我们可以使用如下的命令进行运行测试。</li><li>示例程序 jar:<ul><li>hadoop-mapreduce-examples-2.7.4.jar</li></ul></li><li>计算圆周率:<ul><li>hadoop jar hadoop-mapreduce-examples-2.7.4.jar pi 20 50</li><li>关于圆周率的估算，感兴趣的可以查询资料 Monte Carlo 方法来计算 Pi 值。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> HADOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HADOOP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zookeeper</title>
      <link href="/%E5%A4%A7%E6%95%B0%E6%8D%AE/2018/02/25/Zookeeper/"/>
      <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE/2018/02/25/Zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="1-Zookeeper"><a href="#1-Zookeeper" class="headerlink" title="1. Zookeeper"></a>1. Zookeeper</h2><h3 id="1-1-Zookeeper概述"><a href="#1-1-Zookeeper概述" class="headerlink" title="1.1 Zookeeper概述"></a>1.1 Zookeeper概述</h3><ul><li><code>Zookeeper</code>是一个<code>分布式协调服务</code>的开源框架。 主要用来解决分布式集群中应用系统的一致性问题，例如怎样避免同时操作同一数据造成脏读的问题。</li><li>ZooKeeper 本质上是一个分布式的小文件存储系统。 提供基于类似于文件系统的目录树方式的数据存储，并且可以对树中的节点进行有效管理。从而用来维护和监控你存储的数据的状态变化。通过监控这些数据状态的变化，从而可以达到基于数据的集群管理。 诸如： 统一命名服务、分布式配置管理、分布式消息队列、分布式锁、分布式协调等功能 。</li></ul><h3 id="1-2-Zookeeper特性"><a href="#1-2-Zookeeper特性" class="headerlink" title="1.2 Zookeeper特性"></a>1.2 Zookeeper特性</h3><ul><li><code>全局数据一致</code>： 集群中每个服务器保存一份相同的数据副本， client 无论连接到哪个服务器，展示的数据都是一致的，这是最重要的特征；</li><li><code>可靠性</code>：如果消息被其中一台服务器接受，那么将被所有的服务器接受。</li><li><code>顺序性</code>：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息 a 在消息 b 前发布，则在所有 Server 上消息 a 都将在消息 b 前被发布；偏序是指如果一个消息 b 在消息 a 后被同一个发送者发布， a 必将排在 b 前面。</li><li><code>数据更新原子性</code>：一次数据更新要么成功（半数以上节点成功），要么失败，不存在中间状态；</li><li><code>实时性</code>： Zookeeper 保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。 </li></ul><h3 id="1-3-Zookeeper集群角色"><a href="#1-3-Zookeeper集群角色" class="headerlink" title="1.3 Zookeeper集群角色"></a>1.3 Zookeeper集群角色</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-1.jpg" alt="zk-1"></p><p><code>Leader</code>:</p><ul><li>Zookeeper 集群工作的核心<ul><li>事务请求（写操作） 的唯一调度和处理者，保证集群事务处理的顺序性；集群内部各个服务器的调度者。</li><li>对于 create， setData， delete 等有写操作的请求，则需要统一转发给leader 处理， leader 需要决定编号、执行操作，这个过程称为一个事务。<br><code>Follower</code>:</li></ul></li><li>处理客户端非事务（读操作） 请求，转发事务请求给 Leader；参与集群 Leader 选举投票。</li><li>此外，针对访问量比较大的 zookeeper 集群， 还可新增观察者角色。<br><code>Observer</code>:</li><li>观察者角色，观察 Zookeeper 集群的最新状态变化并将这些状态同步过来，其对于非事务请求可以进行独立处理，对于事务请求，则会转发给 Leader服务器进行处理。</li><li>不会参与任何形式的投票只提供非事务服务，通常用于在不影响集群事务处理能力的前提下提升集群的非事务处理能力。</li></ul><h3 id="1-4-Zookeeper集群搭建"><a href="#1-4-Zookeeper集群搭建" class="headerlink" title="1.4 Zookeeper集群搭建"></a>1.4 Zookeeper集群搭建</h3><ul><li>Zookeeper 集群搭建指的是 ZooKeeper 分布式模式安装。 通常由 <code>2n+1</code>台 servers 组成。 这是因为为了保证 Leader 选举（基于<code>Paxos 算法</code>的实现） 能过得到多数的支持，所以 ZooKeeper 集群的数量一般为奇数。</li><li>Zookeeper 运行需要 java 环境， 所以需要<code>提前安装 jdk</code>。 对于安装<code>leader+follower 模式</code>的集群， 大致过程如下：</li><li>配置主机名称到 IP 地址映射配置</li><li>修改 ZooKeeper 配置文件</li><li>远程复制分发安装文件</li><li>设置 myid</li><li>启动 ZooKeeper 集群<br>如果要想使用 Observer 模式，可在对应节点的配置文件添加如下配置：<br><code>peerType=observer</code><br>其次，必须在配置文件指定哪些节点被指定为 Observer，如：<br><code>server.1:localhost:2181:3181:observer</code><br>详细步骤请参考附件安装资料。</li></ul><h2 id="2-Zookeeper-shell"><a href="#2-Zookeeper-shell" class="headerlink" title="2. Zookeeper shell"></a>2. Zookeeper shell</h2><h3 id="2-1-客户端连接"><a href="#2-1-客户端连接" class="headerlink" title="2.1 客户端连接"></a>2.1 客户端连接</h3><p>运行 <code>zkCli.sh –server ip</code> 进入命令行工具。<br>输入 help，输出 zk shell 提示： </p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-2.jpg" alt="zk-2"></p><h3 id="2-2-shell基本操作"><a href="#2-2-shell基本操作" class="headerlink" title="2.2 shell基本操作"></a>2.2 shell基本操作</h3><p><code>创建节点</code></p><ul><li><p>create [-s][-e] path data acl</p></li><li><p>其中， -s 或-e 分别指定节点特性，顺序或临时节点，若不指定，则表示持久节点； acl 用来进行权限控制。</p></li><li><p>创建顺序节点：</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-3.jpg" alt="zk-3"></p></li><li><p>创建临时节点：</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-4.jpg" alt="zk-4"></p></li><li><p>创建永久节点：</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-5.jpg" alt="zk-5"></p></li></ul><p><code>读取节点</code></p><ul><li><p>与读取相关的命令有 ls 命令和 get 命令， ls 命令可以列出 Zookeeper 指定节点下的所有子节点，只能查看指定节点下的第一级的所有子节点； get 命令可以获取 Zookeeper 指定节点的数据内容和属性信息。</p></li><li><p>ls path [watch]</p></li><li><p>get path [watch]</p></li><li><p>ls2 path [watch]</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-6.jpg" alt="zk-6"></p></li></ul><p><code>更新节点</code></p><ul><li>set path data [version]</li><li>data 就是要更新的新内容， version 表示数据版本。<img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-7.jpg" alt=""></li></ul><p>现在 dataVersion 已经变为 1 了，表示进行了更新。</p><p><code>删除节点</code></p><ul><li><p>delete path [version]</p></li><li><p>若删除节点存在子节点，那么无法删除该节点，必须先删除子节点，再删除父节点。<br>  Rmr path<br>  可以递归删除节点。<br>  <code>quota</code></p></li><li><p>set quota -n|-b val path 对节点增加限制。</p><ul><li>n:表示子节点的最大个数</li><li>b:表示数据值的最大长度</li></ul></li><li><p>val:子节点最大个数或数据值的最大长度</p></li><li><p>path:节点路径</p><p>  <img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-8.jpg" alt="zk-8"></p></li><li><p>list quota path 列出指定节点的 quota</p><p>  <img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-9.jpg" alt="zk-9"></p></li></ul><p>子节点个数为 2,数据长度-1 表示没限制<br>delquota [-n|-b] path 删除 quota<br><code>其他命令</code></p><ul><li><p>history : 列出命令历史</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-10.jpg" alt="zk-10"></p></li></ul><p>redo： 该命令可以重新执行指定命令编号的历史命令,命令编号可以通过<br>history 查看</p><h2 id="3-Zookeeper数据模型"><a href="#3-Zookeeper数据模型" class="headerlink" title="3. Zookeeper数据模型"></a>3. Zookeeper数据模型</h2><ul><li>ZooKeeper 的数据模型，在结构上和标准文件系统的非常相似， 拥有一个层次的命名空间，都是采用<code>树形层次结构</code>， ZooKeeper 树中的每个节点被称为—<code>Znode</code>。和文件系统的目录树一样， ZooKeeper 树中的每个节点可以拥有子节点。但也有不同之处：<ul><li><code>Znode 兼具文件和目录两种特点</code>。既像文件一样维护着数据、元信息、 ACL、时间戳等数据结构，又像目录一样可以作为路径标识的一部分，并可以具有子 Znode。用户对 Znode 具有增、删、改、查等操作（权限允许的情况下）。</li><li><code>Znode 具有原子性操作</code>， 读操作将获取与节点相关的所有数据，写操作也将替换掉节点的所有数据。另外，每一个节点都拥有自己的 ACL(访问控制列表)，这个列表规定了用户的权限，即限定了特定用户对目标节点可以执行的操作。</li><li><code>Znode 存储数据大小有限制</code>。 ZooKeeper 虽然可以关联一些数据，但并没有被设计为常规的数据库或者大数据存储，相反的是，它用来管理调度数据，比如分布式应用中的配置文件信息、状态信息、汇集位置等等。这些数据的共同特性就是它们都是很小的数据， <code>通常以 KB 为大小单位</code>。 ZooKeeper 的服务器和客户端都被设计为严格检查并限制每个 Znode 的数据大小至多 1M，当时常规使用中应该远小于此值。</li><li><code>Znode 通过路径引用</code>， 如同 Unix 中的文件路径。 <code>路径必须是绝对的</code>，因此他们必须<code>由斜杠字符来开头</code>。除此以外，他们必须是唯一的，也就是说每一个路径只有一个表示，因此这些路径不能改变。在 ZooKeeper 中，路径由Unicode 字符串组成，并且有一些限制。字符串”/zookeeper”用以保存管理信息，比如关键配额信息。 </li></ul></li></ul><h3 id="3-1-数据源结构图"><a href="#3-1-数据源结构图" class="headerlink" title="3.1 数据源结构图"></a>3.1 数据源结构图</h3><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-11.png" alt="zk-11"></p><ul><li>图中的每个节点称为一个 Znode。 每个 Znode 由 3 部分组成:</li><li>stat：此为状态信息, 描述该 Znode 的版本, 权限等信息<ul><li>data：与该 Znode 关联的数据</li><li>children：该 Znode 下的子节点 </li></ul></li></ul><h3 id="3-2-节点类型"><a href="#3-2-节点类型" class="headerlink" title="3.2 节点类型"></a>3.2 节点类型</h3><ul><li><p>Znode 有两种，分别为<code>临时节点</code>和<code>永久节点</code>。</p></li><li><p>节点的类型在创建时即被确定，并且不能改变。</p></li><li><p>临时节点：该节点的生命周期依赖于创建它们的会话。一旦<code>会话结束，临时节点将被自动删除</code>，当然可以也可以手动删除。 <code>临时节点不允许拥有子节点</code>。</p></li><li><p>永久节点：该节点的生命周期不依赖于会话，并且只有在客户端显示执行删除操作的时候，他们才能被删除。</p></li><li><p>Znode 还有一个序列化的特性，如果创建的时候指定的话，该 Znode 的名字后面会自动追加一个不断增加的序列号。 序列号对于此节点的父节点来说是唯一的， 这样便会<code>记录每个子节点创建的先后顺序</code>。 它的格式为“ %10d”(10 位数字，没有数值的数位用 0 补充，例如“ 0000000001” )。</p><p>  <img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-11-2.png" alt="zk-11(2)"></p></li><li><p>这样便会存在四种类型的 Znode 节点， 分别对应：</p><ul><li>PERSISTENT：永久节点</li><li>EPHEMERAL：临时节点</li><li>PERSISTENT_SEQUENTIAL：永久节点、 序列化</li><li>EPHEMERAL_SEQUENTIAL：临时节点、序列化 </li></ul></li></ul><h3 id="3-3-节点属性"><a href="#3-3-节点属性" class="headerlink" title="3.3 节点属性"></a>3.3 节点属性</h3><ul><li><p>每个znode都包含了一系列的属性，通过命令get，可以获得节点的属性。</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-12.png" alt="zk-12"></p></li><li><p><code>dataVersion</code>： 数据版本号，每次对节点进行 set 操作， dataVersion 的值都会增加 1（即使设置的是相同的数据）， 可有效避免了数据更新时出现的先后顺序问题。</p></li><li><p><code>cversion</code> ： 子节点的版本号。当 znode 的子节点有变化时， cversion 的值就会增加 1。</p></li><li><p><code>aclVersion</code> ： ACL 的版本号。</p></li><li><p><code>cZxid</code> ： Znode 创建的事务 id。</p></li><li><p><code>mZxid</code> ： Znode 被修改的事务 id，即每次对 znode 的修改都会更新 mZxid。</p></li><li><p>对于 zk 来说，每次的变化都会产生一个唯一的事务 id， zxid（ ZooKeeper Transaction Id）。通过 zxid，可以确定更新操作的先后顺序。例如，如果 zxid1小于 zxid2，说明 zxid1 操作先于 zxid2 发生， zxid 对于整个 zk 都是唯一的，即使操作的是不同的 znode。</p></li><li><p><code>ctime</code>： 节点创建时的时间戳.</p></li><li><p><code>mtime</code>： 节点最新一次更新发生时的时间戳. </p></li><li><p><code>ephemeralOwner</code>:如果该节点为临时节点, ephemeralOwner 值表示与该节点<br>绑定的 session id. 如果不是, ephemeralOwner 值为 0.</p></li><li><p>在 client 和 server 通信之前,首先需要建立连接,该连接称为 session。 连<br>接建立后,如果发生连接超时、 授权失败,或者显式关闭连接,连接便处于 CLOSED<br>状态, 此时 session 结束。</p></li></ul><h2 id="4-Zookeeper-Watcher"><a href="#4-Zookeeper-Watcher" class="headerlink" title="4. Zookeeper Watcher"></a>4. Zookeeper Watcher</h2><ul><li>ZooKeeper 提供了分布式数据发布/订阅功能，一个典型的发布/订阅模型系统定义了一种一对多的订阅关系，能让多个订阅者同时监听某一个主题对象，当这个主题对象自身状态变化时，会通知所有订阅者，使他们能够做出相应的处理。</li><li>ZooKeeper 中，引入了 Watcher 机制来实现这种分布式的通知功能。ZooKeeper 允许客户端向服务端注册一个 Watcher 监听，当服务端的一些事件触发了这个 Watcher，那么就会向指定客户端发送一个事件通知来实现分布式的通知功能。</li><li>触发事件种类很多， 如：节点创建，节点删除，节点改变，子节点改变等。</li><li>总的来说可以概括 Watcher 为以下三个过程：<code>客户端向服务端注册 Watcher、服务端事件发生触发 Watcher、 客户端回调 Watcher 得到触发事件情况</code></li></ul><h3 id="4-1-Watch-机制特点"><a href="#4-1-Watch-机制特点" class="headerlink" title="4.1 Watch 机制特点"></a>4.1 Watch 机制特点</h3><p><strong>一次性触发</strong></p><ul><li>事件发生触发监听，一个 watcher event 就会被发送到设置监听的客户端，这种效果是一次性的， 后续再次发生同样的事件，不会再次触发。<br><strong>事件封装</strong></li><li>ZooKeeper 使用 WatchedEvent 对象来封装服务端事件并传递。</li><li>WatchedEvent 包含了每一个事件的三个基本属性：</li><li>通知状态（ keeperState）， 事件类型（ EventType） 和节点路径（ path）<br><strong>event 异步发送</strong></li><li>watcher 的通知事件从服务端发送到客户端是异步的。<br><strong>先注册再触发</strong><br>Zookeeper 中的 watch 机制，必须客户端先去服务端注册监听，这样事件发送才会触发监听，通知给客户端。</li></ul><h3 id="4-2-通知状态和事件类型"><a href="#4-2-通知状态和事件类型" class="headerlink" title="4.2 通知状态和事件类型"></a>4.2 通知状态和事件类型</h3><ul><li><p>同一个事件类型在不同的通知状态中代表的含义有所不同，下表列举了常见的通知状态和事件类型。</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-13.jpg" alt="zk-13"></p></li><li><p>其中<code>连接状态事件（type=None,path=null）不需要客户端注册</code>，客户端只要有需要直接处理就行了。</p></li></ul><h3 id="4-3-Shell客户端设置watcher"><a href="#4-3-Shell客户端设置watcher" class="headerlink" title="4.3 Shell客户端设置watcher"></a>4.3 Shell客户端设置watcher</h3><ul><li><p>设置节点数据变动监听：</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-14.png" alt="zk-14"></p></li><li><p>通过另一个客户端更改节点数据：</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-15.png" alt="zk-15"></p></li><li><p>此时设置监听的几点收到通知：</p><p><img src="https://myblog-1253777107.cos.ap-chengdu.myqcloud.com/zookeeper/zk-16.png" alt="zk-16"></p></li></ul><h2 id="5-ZooKeeper-Java-API"><a href="#5-ZooKeeper-Java-API" class="headerlink" title="5. ZooKeeper Java API"></a>5. ZooKeeper Java API</h2><ul><li><code>org.apache.zookeeper.Zookeeper</code></li><li>Zookeeper 是在 Java 中客户端主类，负责建立与 zookeeper 集群的会话，并提供方法进行操作。</li><li><code>org.apache.zookeeper.Watcher</code></li><li>Watcher 接口表示一个标准的事件处理器，其定义了事件通知相关的逻辑，<br>包含 KeeperState 和 EventType 两个枚举类，分别代表了通知状态和事件类型，<br>同时定义了<code>事件的回调方法： process（ WatchedEvent event）</code>。</li><li>process 方法是 Watcher 接口中的一个回调方法，当 ZooKeeper 向客户端发<br>送一个 Watcher 事件通知时，客户端就会对相应的 process 方法进行回调，从而<br>实现对事件的处理。 </li></ul><h3 id="5-1-基本使用"><a href="#5-1-基本使用" class="headerlink" title="5.1 基本使用"></a>5.1 基本使用</h3><p>建立 java maven 项目,引入 maven pom 坐标。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 ZooKeeper 实例(zk 地址、会话超时时间，与系统默认一致、 watcher)</span></span><br><span class="line">    ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"node-1:2181,node-2:2181"</span>, <span class="number">30000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"事件类型为： "</span> + event.getType());</span><br><span class="line">System.out.println(<span class="string">"事件发生的路径： "</span> + event.getPath());</span><br><span class="line">System.out.println(<span class="string">"通知状态为： "</span> +event.getState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    zk.create(<span class="string">"/myGirls"</span>, <span class="string">"性感的"</span>.getBytes(<span class="string">"UTF-8"</span>), Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);</span><br><span class="line">    zk.close();</span><br></pre></td></tr></table></figure><h3 id="5-2-更多操作示例"><a href="#5-2-更多操作示例" class="headerlink" title="5.2 更多操作示例"></a>5.2 更多操作示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// 初始化 ZooKeeper 实例(zk 地址、会话超时时间，与系统默认一致、 watcher)</span></span><br><span class="line">            ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"node-21:2181,node-22:2181"</span>, <span class="number">30000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"事件类型为： "</span> + event.getType());</span><br><span class="line">                    System.out.println(<span class="string">"事件发生的路径： "</span> + event.getPath());</span><br><span class="line">                    System.out.println(<span class="string">"通知状态为： "</span> +event.getState());</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">// 创建一个目录节点</span></span><br><span class="line">    zk.create(<span class="string">"/testRootPath"</span>, <span class="string">"testRootData"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">    CreateMode.PERSISTENT);</span><br><span class="line">    <span class="comment">// 创建一个子目录节点</span></span><br><span class="line">    zk.create(<span class="string">"/testRootPath/testChildPathOne"</span>, <span class="string">"testChildDataOne"</span>.getBytes(),</span><br><span class="line">        Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(zk.getData(<span class="string">"/testRootPath"</span>,<span class="keyword">false</span>,<span class="keyword">null</span>)));</span><br><span class="line">    <span class="comment">// 取出子目录节点列表</span></span><br><span class="line">    System.out.println(zk.getChildren(<span class="string">"/testRootPath"</span>,<span class="keyword">true</span>));</span><br><span class="line">    <span class="comment">// 修改子目录节点数据</span></span><br><span class="line">    zk.setData(<span class="string">"/testRootPath/testChildPathOne"</span>,<span class="string">"modifyChildDataOne"</span>.getBytes(),-<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"目录节点状态： ["</span>+zk.exists(<span class="string">"/testRootPath"</span>,<span class="keyword">true</span>)+<span class="string">"]"</span>);</span><br><span class="line">    <span class="comment">// 创建另外一个子目录节点</span></span><br><span class="line">    zk.create(<span class="string">"/testRootPath/testChildPathTwo"</span>, <span class="string">"testChildDataTwo"</span>.getBytes(),</span><br><span class="line">        Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(zk.getData(<span class="string">"/testRootPath/testChildPathTwo"</span>,<span class="keyword">true</span>,<span class="keyword">null</span>)));</span><br><span class="line">    <span class="comment">// 删除子目录节点</span></span><br><span class="line">    zk.delete(<span class="string">"/testRootPath/testChildPathTwo"</span>,-<span class="number">1</span>);</span><br><span class="line">    zk.delete(<span class="string">"/testRootPath/testChildPathOne"</span>,-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 删除父目录节点</span></span><br><span class="line">    zk.delete(<span class="string">"/testRootPath"</span>,-<span class="number">1</span>);</span><br><span class="line">    zk.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-ZooKeeper选举机制"><a href="#6-ZooKeeper选举机制" class="headerlink" title="6. ZooKeeper选举机制"></a>6. ZooKeeper选举机制</h2><ul><li>zookeeper默认的算法是FastLeaderElection,采用<code>投票数大于半数则胜出</code>的逻辑。</li></ul><h3 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h3><ul><li><code>服务器 ID</code><ul><li>比如有三台服务器，编号分别是 1,2,3。</li><li>编号越大在选择算法中的权重越大。</li></ul></li><li><code>选举状态</code><ul><li>LOOKING，竞选状态。</li><li>FOLLOWING，随从状态，同步 leader 状态，参与投票。</li><li>OBSERVING，观察状态,同步 leader 状态，不参与投票。</li><li>LEADING，领导者状态。</li></ul></li><li><code>数据 ID</code><ul><li>服务器中存放的最新数据 version。</li><li>值越大说明数据越新，在选举算法中数据越新权重越大。</li></ul></li><li><code>逻辑时钟</code><ul><li>也叫投票的次数， 同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加，然后与接收到的其它服务器返回的投票信息中的数值相比，根据不同的值做出不同的判断。 </li></ul></li></ul><h3 id="6-2-全新集群选举"><a href="#6-2-全新集群选举" class="headerlink" title="6.2 全新集群选举"></a>6.2 全新集群选举</h3><ul><li>假设目前有 5 台服务器， <code>每台服务器均没有数据</code>，它们的编号分别是1,2,3,4,5,<code>按编号依次启动</code>，它们的选择举过程如下：<ul><li>服务器 1 启动，给自己投票，然后发投票信息，由于其它机器还没有启动所以它收不到反馈信息，服务器 1 的状态一直属于 Looking。</li><li>服务器 2 启动，给自己投票，同时与之前启动的服务器 1 交换结果，由于服务器 2 的编号大所以服务器 2 胜出，但此时投票数没有大于半数，所以两个服务器的状态依然是 LOOKING。</li><li>服务器 3 启动，给自己投票，同时与之前启动的服务器 1,2 交换信息，由于服务器 3 的编号最大所以服务器 3 胜出，此时投票数正好大于半数，所以服务器 3 成为领导者，服务器 1,2 成为小弟。</li><li>服务器 4 启动，给自己投票，同时与之前启动的服务器 1,2,3 交换信息，尽管服务器 4 的编号大，但之前服务器 3 已经胜出，所以服务器 4 只能成为小弟。</li><li>服务器 5 启动，后面的逻辑同服务器 4 成为小弟。 </li></ul></li></ul><h3 id="6-3-非全新集群选举"><a href="#6-3-非全新集群选举" class="headerlink" title="6.3 非全新集群选举"></a>6.3 非全新集群选举</h3><ul><li>对于运行正常的 zookeeper 集群， 中途有机器 down 掉， 需要重新选举时，选举过程就需要加入<code>数据 ID</code>、 <code>服务器 ID</code> 和<code>逻辑时钟</code>。</li><li>数据 ID：数据新的 version 就大，数据每次更新都会更新 version。</li><li>服务器 ID：就是我们配置的 myid 中的值，每个机器一个。</li><li>逻辑时钟：这个值从 0 开始递增,每次选举对应一个值。 如果在同一次选举中,这个值是一致的。</li><li>这样选举的标准就变成：</li><li>逻辑时钟小的选举结果被忽略，重新投票；<ul><li>统一逻辑时钟后，数据 id 大的胜出；</li></ul></li><li>数据 id 相同的情况下， 服务器 id 大的胜出；<br>根据这个规则选出 leader。 </li></ul><h2 id="7．-ZooKeeper-典型应用"><a href="#7．-ZooKeeper-典型应用" class="headerlink" title="7． ZooKeeper 典型应用"></a>7． ZooKeeper 典型应用</h2><h3 id="7-1-数据发布与订阅（配置中心）"><a href="#7-1-数据发布与订阅（配置中心）" class="headerlink" title="7.1 数据发布与订阅（配置中心）"></a>7.1 数据发布与订阅（配置中心）</h3><ul><li>发布与订阅模型，即所谓的配置中心，顾名思义就是<code>发布者将数据发布到 ZK节点上，供订阅者动态获取数据，实现配置信息的集中式管理和动态更新</code>。</li><li>应用在启动的时候会主动来获取一次配置，同时，在节点上注册一个 Watcher，这样一来，以后每次配置有更新的时候，都会实时通知到订阅的客户端，从来达到获取最新配置信息的目的。 比如：</li><li>分布式搜索服务中，索引的元信息和服务器集群机器的节点状态存放在 ZK<br>的一些指定节点，供各个客户端订阅使用。<br><strong>注意</strong>： <code>适合数据量很小的场景</code>， 这样数据更新可能会比较快。</li></ul><h3 id="7-2-命名服务-Naming-Service"><a href="#7-2-命名服务-Naming-Service" class="headerlink" title="7.2 命名服务(Naming Service)"></a>7.2 命名服务(Naming Service)</h3><ul><li>在分布式系统中， <code>通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息</code>。 被命名的实体通常可以是集群中的机器，提供的服务地址，远程对象等等——这些我们都可以统称他们为名字（ Name）。其中较为常见的就是一些分布式服务框架中的服务地址列表。通过调用 ZK 提供的创建节点的 API，能够很容易创建一个<code>全局唯一的 path</code>，这个 path 就可以作为一个名称。</li><li>阿里巴巴集团开源的分布式服务框架 <code>Dubbo 中使用 ZooKeeper 来作为其命名服务</code>，维护全局的服务地址列表。</li></ul><h3 id="7-3-分布式锁"><a href="#7-3-分布式锁" class="headerlink" title="7.3 分布式锁"></a>7.3 分布式锁</h3><ul><li>分布式锁，这个主要得益于 ZooKeeper 保证了数据的强一致性。 <code>锁服务可以分为两类，一个是保持独占，另一个是控制时序</code>。</li><li>所谓<code>保持独占</code>，就是所有试图来获取这个锁的客户端，最终只有一个可以成功获得这把锁。通常的做法是把 zk 上的一个 znode 看作是一把锁，通过 createznode 的方式来实现。所有客户端都去创建 /distribute_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。</li><li><code>控制时序</code>，就是所有试图来获取这个锁的客户端，最终都是会被安排执行，只是有个全局时序了。做法和上面基本类似，只是这里 /distribute_lock 已经预先存在，客户端在它下面创建临时有序节点（这个可以通过节点的属性控制:CreateMode.EPHEMERAL_SEQUENTIAL 来指定）。Zk 的父节点（ /distribute_lock）维持一份 sequence,保证子节点创建的时序性，从而也形成了每个客户端的全局时序。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux常用配置命令</title>
      <link href="/Linux/2018/02/24/Linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/"/>
      <url>/Linux/2018/02/24/Linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1、crontab"><a href="#1、crontab" class="headerlink" title="1、crontab"></a>1、crontab</h1><h2 id="1-1-crontab配置"><a href="#1-1-crontab配置" class="headerlink" title="1.1 crontab配置"></a>1.1 crontab配置</h2><ul><li>crontab 是 Unix 和 Linux 用于设置周期性被执行的指令。 通过 crontab 命<br>令，可以在固定间隔时间执行指定的系统指令或 shell 脚本。时间间隔的单位可<br>以是分钟、小时、日、月、周及以上的任意组合。</li><li>crontab 安装：<ul><li>yum install crontabs</li></ul></li><li>服务操作说明：<ul><li>service crond start ## 启动服务</li><li>service crond stop ## 关闭服务</li><li>service crond restart ## 重启服务</li><li>service crond reload ## 重新载入配置</li><li>service crond status ## 查看 crontab 服务状态：</li><li>chkconfig crond –list ## 查看 crontab 服务是否已设置为开机启动</li><li>chkconfig crond on ## 加入开机自动启动</li></ul></li></ul><h2 id="1-2-命令格式"><a href="#1-2-命令格式" class="headerlink" title="1.2 命令格式"></a>1.2 命令格式</h2><ul><li>crontab [-u user] file</li><li>crontab [-u user] [ -e | -l | -r ]</li><li>参数说明：<ul><li>-u user：用来设定某个用户的 crontab 服务</li><li>file： file 是命令文件的名字,表示将 file 做为 crontab 的任务列表文件<br>并载入 crontab。</li><li>-e：编辑某个用户的 crontab 文件内容。如果不指定用户，则表示编辑当前<br>用户的 crontab 文件。</li><li>-l：显示某个用户的 crontab 文件内容。 如果不指定用户，则表示显示当前<br>用户的 crontab 文件内容。</li><li>-r：删除定时任务配置，从/var/spool/cron 目录中删除某个用户的 crontab<br>文件，如果不指定用户，则默认删除当前用户的 crontab 文件。</li><li>-i：在删除用户的 crontab 文件时给确认提示。</li></ul></li><li><p><code>命令示例：</code></p><ul><li><p>crontab file [-u user] ## 用指定的文件替代目前的 crontab。</p></li><li><p>crontab -l [-u user] ## 列出用户目前的 crontab.</p></li><li><p>crontab -e [-u user] ## 编辑用户目前的 crontab. </p></li></ul></li></ul><h2 id="1-3配置说明、实例"><a href="#1-3配置说明、实例" class="headerlink" title="1.3配置说明、实例"></a>1.3配置说明、实例</h2><ul><li>* * * * * command<ul><li>分 时 日 月 周 命令</li><li>第 1 列表示分钟 1～59 每分钟用<em>或者 </em>/1 表示</li><li>第 2 列表示小时 0～23（ 0 表示 0 点）</li><li>第 3 列表示日期 1～31</li><li>第 4 列表示月份 1～12</li><li>第 5 列标识号星期 0～6（ 0 表示星期天）</li><li>第 6 列要运行的命令</li></ul></li><li><code>配置实例：</code><ul><li><em>/1 </em> <em> </em> * date &gt;&gt; /root/date.txt<br>​    - 每分钟执行一次 date 命令</li><li>30 21 <em> </em> * /usr/local/etc/rc.d/httpd restart<ul><li>每晚的 21:30 重启 apache。</li></ul></li><li>45 4 1,10,22 <em> </em> /usr/local/etc/rc.d/httpd restart<ul><li>每月 1、 10、 22 日的 4 : 45 重启 apache。</li></ul></li><li>10 1 <em> </em> 6,0 /usr/local/etc/rc.d/httpd restart<ul><li>每周六、周日的 1 : 10 重启 apache。</li></ul></li><li>0,30 18-23 <em> </em> * /usr/local/etc/rc.d/httpd restart<ul><li>每天 18 : 00 至 23 : 00 之间每隔 30 分钟重启 apache。</li></ul></li><li><ul><li>23-7/1 <em> </em> * /usr/local/etc/rc.d/httpd restart<ul><li>晚上 11 点到早上 7 点之间，每隔一小时重启 apache </li></ul></li></ul></li></ul></li></ul><h1 id="2、局域网时间同步配置"><a href="#2、局域网时间同步配置" class="headerlink" title="2、局域网时间同步配置"></a>2、局域网时间同步配置</h1><h2 id="2-1-安装配置"><a href="#2-1-安装配置" class="headerlink" title="2.1 安装配置"></a>2.1 安装配置</h2><ul><li>检查是否安装ntpd服务</li><li>rpm -qa | grep ntp</li><li>没有通过下面命令安装</li><li>yum install -y ntp</li><li>安装完成后设置自启动</li><li>chkconfig ntpd on</li><li>chkconfig ntpd –list</li><li><p>ntpd           0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭<br>在配置前，先使用ntpdate手动同步下时间，免得本机与外部时间服务器时间差距太大，让ntpd不能正常同步。</p></li><li><p>ntpdate -u 202.112.10.36<br>22 Dec 16:52:38 ntpdate[6400]: adjust time server 202.112.10.36 offset 0.012135 sec</p></li></ul><p><strong>配置内网NTP-Server(192.168.1.135)</strong></p><ul><li><p>下面主要是配置内网的NPTD服务器(192.168.1.135), NTPD服务配置核心就在/etc/ntp.conf文件，配置好了就OK。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> For more information about this file, see the man pages</span><br><span class="line"><span class="meta">#</span> ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).</span><br><span class="line">driftfile /var/lib/ntp/drift</span><br><span class="line"><span class="meta">#</span> Permit time synchronization with our time source, but do not</span><br><span class="line"><span class="meta">#</span> permit the source to query or modify the service on this system.</span><br><span class="line">restrict default kod nomodify notrap nopeer noquery</span><br><span class="line">restrict -6 default kod nomodify notrap nopeer noquery</span><br><span class="line"><span class="meta">#</span> Permit all access over the loopback interface.  This could</span><br><span class="line"><span class="meta">#</span> be tightened as well, but to do so would effect some of</span><br><span class="line"><span class="meta">#</span> the administrative functions.</span><br><span class="line">restrict 127.0.0.1</span><br><span class="line">restrict -6 ::1</span><br><span class="line"><span class="meta">#</span> Hosts on local network are less restricted.</span><br><span class="line"><span class="meta">#</span> 允许内网其他机器同步时间</span><br><span class="line">restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"><span class="meta">#</span> Use public servers from the pool.ntp.org project.</span><br><span class="line"><span class="meta">#</span> Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line"><span class="meta">#</span> 中国这边最活跃的时间服务器 : http://www.pool.ntp.org/zone/cn</span><br><span class="line">server 210.72.145.44 perfer   # 中国国家受时中心</span><br><span class="line">server 202.112.10.36             # 1.cn.pool.ntp.org</span><br><span class="line">server 59.124.196.83             # 0.asia.pool.ntp.org</span><br><span class="line"><span class="meta">#</span>broadcast 192.168.1.255 autokey        # broadcast server</span><br><span class="line"><span class="meta">#</span>broadcastclient                        # broadcast client</span><br><span class="line"><span class="meta">#</span>broadcast 224.0.1.1 autokey            # multicast server</span><br><span class="line"><span class="meta">#</span>multicastclient 224.0.1.1              # multicast client</span><br><span class="line"><span class="meta">#</span>manycastserver 239.255.254.254         # manycast server</span><br><span class="line"><span class="meta">#</span>manycastclient 239.255.254.254 autokey # manycast client</span><br><span class="line"><span class="meta">#</span> allow update time by the upper server</span><br><span class="line"><span class="meta">#</span> 允许上层时间服务器主动修改本机时间</span><br><span class="line">restrict 210.72.145.44 nomodify notrap noquery</span><br><span class="line">restrict 202.112.10.36 nomodify notrap noquery</span><br><span class="line">restrict 59.124.196.83 nomodify notrap noquery</span><br><span class="line"><span class="meta">#</span> Undisciplined Local Clock. This is a fake driver intended for backup</span><br><span class="line"><span class="meta">#</span> and when no outside source of synchronized time is available.</span><br><span class="line"><span class="meta">#</span> 外部时间服务器不可用时，以本地时间作为时间服务</span><br><span class="line">server  127.127.1.0     # local clock</span><br><span class="line">fudge   127.127.1.0 stratum 10</span><br><span class="line"><span class="meta">#</span> Enable public key cryptography.</span><br><span class="line"><span class="meta">#</span>crypto</span><br><span class="line">includefile /etc/ntp/crypto/pw</span><br><span class="line"><span class="meta">#</span> Key file containing the keys and key identifiers used when operating</span><br><span class="line"><span class="meta">#</span> with symmetric key cryptography.</span><br><span class="line">keys /etc/ntp/keys</span><br><span class="line"><span class="meta">#</span> Specify the key identifiers which are trusted.</span><br><span class="line"><span class="meta">#</span>trustedkey 4 8 42</span><br><span class="line"><span class="meta">#</span> Specify the key identifier to use with the ntpdc utility.</span><br><span class="line"><span class="meta">#</span>requestkey 8</span><br><span class="line"><span class="meta">#</span> Specify the key identifier to use with the ntpq utility.</span><br><span class="line"><span class="meta">#</span>controlkey 8</span><br><span class="line"><span class="meta">#</span> Enable writing of statistics records.</span><br><span class="line"><span class="meta">#</span>statistics clockstats cryptostats loopstats peerstats</span><br></pre></td></tr></table></figure></li><li><p>修改sudo vi /etc/sysconfig/ntpd  添加： SYNC_HWCLOCK=yes</p></li><li>配置文件修改完成，保存退出，启动服务。<br><code>service ntpd start</code><br>启动后，一般需要5-10分钟左右的时候才能与外部时间服务器开始同步时间。可以通过命令查询NTPD服务情况。<br>查看服务连接和监听<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">netstat -tlunp | grep ntp</span><br><span class="line">udp        0      0 192.168.1.135:123           0.0.0.0:*          23103/ntpd</span><br><span class="line">udp        0      0 127.0.0.1:123               0.0.0.0:*           23103/ntpd</span><br><span class="line">udp        0      0 0.0.0.0:123                 0.0.0.0:*           23103/ntpd</span><br><span class="line">udp        0      0 fe80::6cae:8bff:fe3d:f65:123 :::*               23103/ntpd</span><br><span class="line">udp        0      0 fe80::6eae:8bff:fe3d:f65:123 :::*               23103/ntpd</span><br><span class="line">udp        0      0 ::1:123                     :::*                23103/ntpd</span><br><span class="line">udp        0      0 :::123                      :::*                23103/ntpd</span><br></pre></td></tr></table></figure></li></ul><p>ntpstat 命令查看时间同步状态，这个一般需要5-10分钟后才能成功连接和同步。所以，服务器启动后需要稍等下。<br>刚启动的时候，一般是：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ntpstat</span><br><span class="line">unsynchronised</span><br><span class="line">time server re-starting</span><br><span class="line">polling server every 64 s</span><br><span class="line">连接并同步后:</span><br><span class="line">synchronised to NTP server (202.112.10.36) at stratum 3</span><br><span class="line">time correct to within 275 ms</span><br><span class="line">polling server every 256 s</span><br></pre></td></tr></table></figure></p><p>OK，内网的NTPD服务已经配置完成，如果所有正常后，开始配置内网的其他设备与这台服务器作为时间同步服务。</p><p><strong>配置内网NTP-Clients</strong><br>首先需要安装NTPD服务，然后配置为自启动（与NTP-Server完全一样）。然后找其中一台配置/etc/ntp.conf文件，配置完成验证通过后，拷贝到其他客户端机器，直接使用即可。</p><ul><li>安装ntp服务<ul><li>yum install -y ntp</li></ul></li><li>设置开机自启<ul><li>chkconfig ntp on</li></ul></li><li>修改/etc/ntp.conf文件配置信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">driftfile /var/lib/ntp/drift</span><br><span class="line">restrict 127.0.0.1</span><br><span class="line">restrict -6 ::1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 配置时间服务器为本地的时间服务器</span><br><span class="line">server 192.168.1.135</span><br><span class="line"></span><br><span class="line">restrict 192.168.1.135 nomodify notrap noquery</span><br><span class="line"></span><br><span class="line">server  127.127.1.0     # local clock</span><br><span class="line">fudge   127.127.1.0 stratum 10</span><br><span class="line"></span><br><span class="line">includefile /etc/ntp/crypto/pw</span><br><span class="line"></span><br><span class="line">keys /etc/ntp/keys</span><br></pre></td></tr></table></figure></li></ul><p>修改好之后保存退出，请求服务器前，请先使用ntpdate手动同步下时间<br>ntpdate -u 192.168.0.135<br>22 Dec 17:09:57 ntpdate[6439]: adjust time server 192.168.1.135 offset 0.004882 sec</p><ul><li>设置定时同步时间，这里设置10分钟同步一次<ul><li>需要在root用户下添加 crontab -e<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span># sync cluster time</span><br><span class="line">0-59/10 * * * * /usr/sbin/ntpdate clouderamanager01</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="3、VMware-Tools安装"><a href="#3、VMware-Tools安装" class="headerlink" title="3、VMware Tools安装"></a>3、VMware Tools安装</h1><ul><li>1、在主机上，从 WorkstationPro 菜单栏中选择虚拟机 &gt; 安装 VMware Tools。如果安装了早期版本的 VMware Tools，则菜单项是更新 VMware Tools。</li><li>2、在虚拟机中，以 root 身份登录到客户机操作系统并打开终端窗口。</li><li>3、不带参数运行 mount 命令以确定 Linux 发行版是否自动装载VMware Tools 虚拟 CD-ROM 映像。</li><li>4、如果未装载 VMware Tools 虚拟 CD-ROM 映像，请装载 CD-ROM驱动器。如果装载点目录尚不存在，请创建该目录。<br>  <code>mkdir -p /mnt/cdrom 创建/mnt/cdrom目录</code></li><li>5、装载 CD-ROM 驱动器<br>  <code>mount /dev/cdrom /mnt/cdrom</code></li><li>6、然后可以将vmware-tools的安装包放到/tmp文件下</li><li>7、解压文件tar zxpfVMwareTools-x.x.x-yyyy.tar.gz</li><li>8、cdvmware-tools-distrib<br>  <code>./vmware-install.pl</code></li><li>通常，在安装程序文件结束运行后，将运行 vmware-config-tools.pl 配置文件。然后就是一路回车，直到安装完毕。</li><li>如果想要卸载VMware tools<ul><li>由tar包安装的打开终端，输入 vmware-uninstall-tools.pl 回车即可删除。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
